/*******************************************************************************
 * Weapon generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Weapon extends ActivatableInventory
	abstract
	native
	notplaceable
	dependson(WeaponConfig)
	dependson(Ammo)
	dependson(AnimationControllerEx)
	dependson(WeaponClip)
	dependson(LevelInfo)
	dependson(Material)
	dependson(Projectile)
	dependson(MeshInstance)
	dependson(SoftParticleSystem)
	dependson(dnFriendFX_Spawners)
	dependson(Weapon_LightEx)
	dependson(WeaponPickup)
	dependson(GameInfo)
	dependson(MultiplayerInfo)
	dependson(LightEx)
	dependson(Inventory)
	dependson(Pickup);

cpptext
{
// Stripped
}

var bool bPlayActivateSound;
var bool bAttemptWeaponDown;
var bool bAttemptWeaponReload;
var bool bWeaponFireLockout;
var bool bDeactivationAllowed;
var bool bQuickChangeTo;
var bool bQuickChangeFrom;
var bool bAutoSwitchOnPickup;
var bool bDrawLastWeaponHUD;
var bool bNonWeapon;
var bool bDebugWeapon;
var bool bCantUseActorWhileEquiped;
var() class<WeaponConfig> WeaponConfig;
var travel Ammo Ammo;
var travel int AmmoLoaded;
var int HUDAmmoClipIcon;
var int MuzzleFireIndex;
var array<SoftParticleSystem> MuzzleFlashActors;
var Weapon_LightEx MuzzleLightActor;
var() int LastMeleeIndex;
var Vector MeleeStartTrace;
var string MeleeAnimEventString;
var float DOFWeapDist;
var float DOFWeapDistDelta;
var int CrosshairIndex;
var bool bDrawInfiniteAmmo;
var int WeaponStateImpulse;
var byte WeaponState;
var Actor.EWeaponChangeSpeed ChangeSpeed;
var WeaponClip InsertingClip;
var WeaponClip EjectingClip;
var() StaticMesh FullClipRenderObject;
var() StaticMesh EmptyClipRenderObject;
var SMountPrefab UserInsertClipMount;
var SMountPrefab WeaponClipMount;
var class<DefaultPhysicsMaterial> EmptyClipPhysMaterial;
var bool bUseHitEffectOverrides;
var float FireHitEffectSystemSizeScaleScale;
var float FireHitEffectFakeLightIntensityOverride;
var float FireHitEffectLifetimeScale;
var private transient float LastShellCasingTime;
var private float MinTimeBetweenShellCasings;

replication
{
	// Pos:0x000
	reliable if(__NFUN_173__(int(Role), int(ROLE_Authority)))
		Ammo;

	// Pos:0x00B
	reliable if(__NFUN_148__(__NFUN_173__(int(Role), int(ROLE_Authority)), __NFUN_145__(bNetOwner)))
		LastMeleeIndex, WeaponState, 
		WeaponStateImpulse;

	// Pos:0x023
	reliable if(__NFUN_173__(int(Role), int(ROLE_Authority)))
		ClientMaybeWeaponSwitch, ClientReload, 
		ClientSetAmmoLoaded;

	// Pos:0x02E
	reliable if(__NFUN_173__(int(Role), int(ROLE_Authority)))
		PerformHit;

	// Pos:0x039
	reliable if(__NFUN_169__(int(Role), int(ROLE_Authority)))
		ServerReload;
}

// Export UWeapon::execUserCanSprint(FFrame&, void* const)
native simulated function bool UserCanSprint();

simulated function SetupWeaponSupportActors()
{
	local int i;

	MuzzleLightActor = __NFUN_615__(WeaponConfig.default.MuzzleLightClass, self);
	// End:0x4B
	if(__NFUN_173__(string(WeaponConfig.default.MuzzleInfo), 0))
	{
		Warn("no muzzles on weapon");
	}
	string(MuzzleFlashActors) = string(WeaponConfig.default.MuzzleInfo);
	i = __NFUN_166__(string(WeaponConfig.default.MuzzleInfo), 1);
	J0x7B:

	// End:0xBA [Loop If]
	if(__NFUN_172__(i, 0))
	{
		MuzzleFlashActors[i] = __NFUN_615__(WeaponConfig.default.MuzzleInfo[i].MuzzleFlashClass, self);
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x7B;
	}
	// End:0x12A
	if(__NFUN_340__(FullClipRenderObject, none))
	{
		InsertingClip = __NFUN_615__(class'WeaponClip', Instigator);
		// End:0x12A
		if(__NFUN_340__(InsertingClip, none))
		{
			InsertingClip.__NFUN_595__(FullClipRenderObject);
			InsertingClip.__NFUN_633__(WeaponClipMount, self);
			InsertingClip.__NFUN_590__(true);
			InsertingClip.bCastStencilShadows = false;
		}
	}
	// End:0x19F
	if(__NFUN_340__(EmptyClipRenderObject, none))
	{
		EjectingClip = __NFUN_615__(class'WeaponClip', Instigator);
		// End:0x19F
		if(__NFUN_340__(EjectingClip, none))
		{
			EjectingClip.__NFUN_595__(EmptyClipRenderObject);
			EjectingClip.__NFUN_633__(WeaponClipMount, self);
			EjectingClip.__NFUN_590__(bHidden);
			EjectingClip.bCastStencilShadows = false;
		}
	}
	return;
}

simulated function DestroyWeaponSupportActors()
{
	local int i;

	i = __NFUN_166__(string(MuzzleFlashActors), 1);
	J0x0F:

	// End:0x49 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x3F
		if(__NFUN_340__(MuzzleFlashActors[i], none))
		{
			MuzzleFlashActors[i].__NFUN_614__();
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x0F;
	}
	// End:0x62
	if(__NFUN_340__(MuzzleLightActor, none))
	{
		MuzzleLightActor.__NFUN_614__();
	}
	// End:0x7B
	if(__NFUN_340__(InsertingClip, none))
	{
		InsertingClip.__NFUN_614__();
	}
	// End:0x94
	if(__NFUN_340__(EjectingClip, none))
	{
		EjectingClip.__NFUN_614__();
	}
	return;
}

simulated function AttachSupportActors()
{
	local int i;
	local SoftParticleSystem MuzzleFlashActor;

	// End:0x8C
	if(__NFUN_340__(MuzzleLightActor, none))
	{
		MuzzleLightActor.LightStyle = 0;
		MuzzleLightActor.MountMeshItem = WeaponConfig.default.MuzzleLightBoneName;
		// End:0x6C
		if(__NFUN_342__(MuzzleLightActor.MountMeshItem, 'None'))
		{
			MuzzleLightActor.MountType = 2;			
		}
		else
		{
			MuzzleLightActor.MountType = 0;
		}
		MuzzleLightActor.__NFUN_635__(self);
	}
	i = __NFUN_166__(string(WeaponConfig.default.MuzzleInfo), 1);
	J0xA5:

	// End:0x15D [Loop If]
	if(__NFUN_172__(i, 0))
	{
		MuzzleFlashActor = MuzzleFlashActors[i];
		// End:0x153
		if(__NFUN_340__(MuzzleFlashActor, none))
		{
			MuzzleFlashActor.TickStyle = 2;
			MuzzleFlashActor.MountType = 2;
			MuzzleFlashActor.MountMeshItem = WeaponConfig.default.MuzzleInfo[i].MuzzleBoneName;
			MuzzleFlashActor.MountAngles = WeaponConfig.default.MuzzleInfo[i].MuzzleMountAngles;
			MuzzleFlashActor.__NFUN_635__(self);
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0xA5;
	}
	return;
}

simulated function DetachSupportActors()
{
	local int i;

	// End:0x19
	if(__NFUN_340__(MuzzleLightActor, none))
	{
		MuzzleLightActor.__NFUN_631__();
	}
	i = __NFUN_166__(string(MuzzleFlashActors), 1);
	J0x28:

	// End:0x7A [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x70
		if(__NFUN_340__(MuzzleFlashActors[i], none))
		{
			MuzzleFlashActors[i].TickStyle = 0;
			MuzzleFlashActors[i].__NFUN_631__();
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x28;
	}
	return;
}

simulated event UnhideWeapon()
{
	__NFUN_590__(Instigator.bHidden);
	// End:0x3C
	if(__NFUN_340__(EjectingClip, none))
	{
		EjectingClip.__NFUN_590__(Instigator.bHidden);
	}
	__NFUN_635__(Instigator,,,, true);
	return;
}

simulated function HideWeapon()
{
	// End:0x1A
	if(__NFUN_340__(EjectingClip, none))
	{
		EjectingClip.__NFUN_590__(true);
	}
	__NFUN_590__(true);
	__NFUN_631__();
	return;
}

event float GiveTo(Pawn Other, optional bool bTravel)
{
	local float AmmoGiven;
	local bool bIsNewWeapon;

	// End:0x4C
	if(__NFUN_148__(__NFUN_148__(__NFUN_145__(bTravel), Other.bIsPlayerPawn), __NFUN_339__(Other.FindActivatableInventory(self.Class), none)))
	{
		bIsNewWeapon = true;
	}
	super.GiveTo(Other, bTravel);
	AmmoGiven = AttachToAmmo(bTravel);
	// End:0xAB
	if(__NFUN_174__(WeaponConfig.default.ReloadCount, 0))
	{
		AmmoLoaded = __NFUN_188__(WeaponConfig.default.ReloadCount, int(Ammo.Charge));
	}
	ClientSetAmmoLoaded(AmmoLoaded);
	// End:0xF7
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(bIsNewWeapon, bAutoSwitchOnPickup), bIsPrimaryWeapon), CanActivateNow()))
	{
		Other.ChangeToWeapon(self);
		return AmmoGiven;
	}
	return AmmoGiven;
	return;
}

// Export UWeapon::execGiveToAI(FFrame&, void* const)
native(1070) static event GiveToAI(Pawn receiver)
{
	//native.receiver;	
}

event ApplyAIScale(Pawn Other)
{
	__NFUN_591__(__NFUN_195__(DrawScale, Other.DrawScale));
	return;
}

simulated function bool CanActivateNow()
{
	// End:0x18
	if(__NFUN_148__(IsCompletelyOutOfAmmo(), __NFUN_145__(bIsPrimaryWeapon)))
	{
		return false;
	}
	return super.CanActivateNow();
	return;
}

simulated function NoteIntigatorTookDamage()
{
	return;
}

simulated function bool Deactivate()
{
	bAttemptWeaponDown = true;
	return true;
	return;
}

function bool InventoryAllowPickup(class<Inventory> InvClass)
{
	// End:0x43
	if(__NFUN_357__(InvClass, class'Weapon'))
	{
		// End:0x43
		if(__NFUN_148__(__NFUN_339__(InvClass.default.InventoryReferenceClass, InventoryReferenceClass), __NFUN_145__(CanPickupLikeWeapon(class<Weapon>(InvClass)))))
		{
			return false;
		}
	}
	return super(Inventory).InventoryAllowPickup(InvClass);
	return;
}

function bool CanPickupLikeWeapon(class<Weapon> WeaponClass)
{
	// End:0x25
	if(__NFUN_204__(Ammo.Charge, Ammo.MaxCharge))
	{
		return false;
	}
	return true;
	return;
}

function float PickedUpAdditionalCopyCustom(Pawn Other, class<Inventory> InvClass, Pickup Source)
{
	local float AmmoChargeBefore;

	AmmoChargeBefore = Ammo.Charge;
	// End:0x5A
	if(__NFUN_148__(__NFUN_340__(Source, none), __NFUN_174__(Source.AmmoCharge, 0)))
	{
		Ammo.AddAmmo(Source.AmmoCharge);		
	}
	else
	{
		Ammo.AddAmmo(WeaponConfig.default.AdditionalPickupAmmoMin);
		// End:0xB2
		if(__NFUN_170__(WeaponConfig.default.AdditionalPickupAmmoRnd, 0))
		{
			Ammo.AddAmmo(__NFUN_187__(__NFUN_165__(WeaponConfig.default.AdditionalPickupAmmoRnd, 1)));
		}
	}
	// End:0x139
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(bIsPrimaryWeapon, Other.bIsPlayerPawn), __NFUN_145__(PlayerPawn(Other).bOnSteroids)), __NFUN_204__(AmmoChargeBefore, float(0))), __NFUN_340__(Other.Weapon, none)), __NFUN_145__(Other.Weapon.bIsPrimaryWeapon)))
	{
		ClientMaybeWeaponSwitch();
	}
	return __NFUN_199__(Ammo.Charge, AmmoChargeBefore);
	return;
}

simulated function PostNetInitial()
{
	super(RenderActor).PostNetInitial();
	SetupWeaponSupportActors();
	// End:0x25
	if(__NFUN_174__(int(WeaponState), int(0)))
	{
		SetWeaponState(WeaponState);
	}
	return;
}

simulated function Destroyed()
{
	super(Inventory).Destroyed();
	OnDestroyed();
	return;
}

simulated function OnDestroyed()
{
	DestroyWeaponSupportActors();
	Instigator = none;
	return;
}

event TravelPostAccept()
{
	super(Actor).TravelPostAccept();
	// End:0x59
	if(__NFUN_339__(Pawn(Owner), none))
	{
		BroadcastLog(__NFUN_302__(string(self), ".TravelPostAccept(): traveled without a pawn owner."));
		return;
	}
	AttachToAmmo(true);
	// End:0x96
	if(__NFUN_340__(InsertingClip, none))
	{
		InsertingClip.__NFUN_591__(__NFUN_195__(__NFUN_196__(DrawScale, default.DrawScale), InsertingClip.default.DrawScale));
	}
	// End:0xCC
	if(__NFUN_340__(EjectingClip, none))
	{
		EjectingClip.__NFUN_591__(__NFUN_195__(__NFUN_196__(DrawScale, default.DrawScale), EjectingClip.default.DrawScale));
	}
	// End:0x11B
	if(__NFUN_339__(self, Pawn(Owner).Weapon))
	{
		ChangeSpeed = 1;
		// End:0x112
		if(__NFUN_145__(Pawn(Owner).bAttachedToUsableSomething))
		{
			BringUp();			
		}
		else
		{
			PutDown();
		}		
	}
	else
	{
		TryState('Waiting');
	}
	return;
}

simulated event Tick(float DeltaTime)
{
	super(Actor).Tick(DeltaTime);
	// End:0x90
	if(__NFUN_148__(IsMP(), __NFUN_173__(int(Role), int(ROLE_SimulatedProxy))))
	{
		// End:0x5A
		if(__NFUN_340__(InsertingClip, none))
		{
			InsertingClip.__NFUN_591__(__NFUN_195__(__NFUN_196__(DrawScale, default.DrawScale), InsertingClip.default.DrawScale));
		}
		// End:0x90
		if(__NFUN_340__(EjectingClip, none))
		{
			EjectingClip.__NFUN_591__(__NFUN_195__(__NFUN_196__(DrawScale, default.DrawScale), EjectingClip.default.DrawScale));
		}
	}
	return;
}

simulated function Actor GetIgnoreMeleeActor(Actor defaultIgnore)
{
	return defaultIgnore;
	return;
}

simulated function ClientMaybeWeaponSwitch()
{
	// End:0x27
	if(__NFUN_150__(__NFUN_339__(Instigator, none), __NFUN_339__(Ammo, none)))
	{
		__NFUN_397__('WaitingForReplication');
		return;		
	}
	else
	{
		// End:0x3A
		if(__NFUN_398__('WaitingForReplication'))
		{
			__NFUN_397__('Waiting');
		}
	}
	// End:0x5A
	if(__NFUN_148__(IsMP(), Instigator.CarryingAnActor()))
	{
		return;
	}
	// End:0x72
	if(__NFUN_339__(Instigator.Weapon, self))
	{
		return;
	}
	Instigator.ChangeToWeapon(self);
	return;
}

simulated function Weapon RecommendWeapon()
{
	local Weapon Recommended;

	// End:0x5A
	if(__NFUN_145__(Instigator.bIsPlayerPawn))
	{
		BroadcastLog(__NFUN_302__(string(self), ".RecommendWeapon(): somehow owned by a non-PlayerPawn!"));
		return none;
	}
	// End:0x76
	if(__NFUN_148__(IsMP(), IncompleteReplication()))
	{
		__NFUN_397__('WaitingForReplication');
	}
	// End:0x9A
	if(__NFUN_148__(self.bIsPrimaryWeapon, __NFUN_145__(self.IsCompletelyOutOfAmmo())))
	{
		return self;
	}
	// End:0xCE
	if(__NFUN_340__(NextInventory, none))
	{
		Recommended = NextInventory.RecommendWeapon();
		// End:0xCE
		if(__NFUN_340__(Recommended, none))
		{
			return Recommended;
		}
	}
	return none;
	return;
}

function bool IsDown()
{
	local name CurrentStateName;

	CurrentStateName = __NFUN_399__();
	return __NFUN_150__(__NFUN_341__(CurrentStateName, 'Deactivating'), __NFUN_341__(CurrentStateName, 'Waiting'));
	return;
}

function bool IsActive()
{
	return __NFUN_148__(__NFUN_145__(IsDown()), __NFUN_342__(__NFUN_399__(), 'Activating'));
	return;
}

simulated event bool CanDrawCrosshair()
{
	return WeaponConfig.default.bDrawCrosshair;
	return;
}

simulated event int GetCrosshairIndex()
{
	return 0;
	return;
}

event DrawCrosshairHUD(Canvas C, float CenterScale)
{
	return;
}

simulated function bool CanCombineWithInventory(Inventory Item)
{
	return true;
	return;
}

simulated function bool BringUp()
{
	return TryState('Activating');
	return;
}

simulated function bool PutDown()
{
	bAttemptWeaponDown = true;
	return TryState('Deactivating');
	return;
}

simulated event bool IncompleteReplication()
{
	// End:0x1A
	if(__NFUN_174__(int(Level.NetMode), int(NM_Client)))
	{
		return false;
	}
	// End:0x28
	if(__NFUN_339__(Instigator, none))
	{
		return true;
	}
	// End:0x36
	if(__NFUN_339__(Ammo, none))
	{
		return true;
	}
	// End:0x4E
	if(__NFUN_339__(Instigator.PlayerReplicationInfo, none))
	{
		return true;
	}
	return false;
	return;
}

k2call simulated function PlayInvSound(optional EventInfo AnimEventInfo)
{
	local name GroupName;

	// End:0x40
	if(__NFUN_309__(AnimEventInfo.EventString, ""))
	{
		GroupName = __NFUN_343__(AnimEventInfo.EventString);
		// End:0x40
		if(CanPlaySound(GroupName))
		{
			FindAndPlaySound(GroupName, 1);
		}
	}
	return;
}

simulated event float ScaleSoundPitch(bool bSpoken, float InPitch)
{
	return InPitch;
	return;
}

simulated event bool SoundOwnedByLocalPlayer()
{
	return __NFUN_148__(__NFUN_148__(__NFUN_340__(Instigator, none), Instigator.bIsPlayerPawn), PlayerPawn(Instigator).IsLocallyControlled());
	return;
}

// Export UWeapon::execFindLookActor(FFrame&, void* const)
native function Actor FindLookActor(Actor current_lock_target, bool maintain_lock_only, optional float Radius)
{
	//native.current_lock_target;
	//native.maintain_lock_only;
	//native.Radius;	
}

simulated function UpdateTickAndAnimationSettings(bool bTurnOn)
{
	// End:0x34
	if(bTurnOn)
	{
		bDumbMesh = false;
		AnimToggleState = 0;
		bNoNativeTick = false;
		TickStyle = 2;
		__NFUN_361__('Tick');		
	}
	else
	{
		bDumbMesh = true;
		bNoNativeTick = true;
		TickStyle = 0;
		bActive = false;
	}
	return;
}

simulated event NU_WeaponStateImpulse(int NewImpulse)
{
	SetWeaponState(WeaponState);
	// End:0x57
	if(__NFUN_148__(__NFUN_148__(__NFUN_340__(Instigator, none), __NFUN_173__(int(Instigator.Role), int(ROLE_SimulatedProxy))), __NFUN_150__(__NFUN_173__(int(WeaponState), int(5)), __NFUN_173__(int(WeaponState), int(4)))))
	{
		SelectNextFireMuzzle();
	}
	// End:0x6F
	if(__NFUN_173__(int(WeaponState), int(2)))
	{
		UpdateTickAndAnimationSettings(false);		
	}
	else
	{
		// End:0x7F
		if(bNoNativeTick)
		{
			UpdateTickAndAnimationSettings(true);
		}
	}
	return;
}

simulated function bool CanPlaySound(name GroupName)
{
	local bool bPlay;

	bPlay = true;
	// End:0x2D
	if(__NFUN_341__(GroupName, 'Activate'))
	{
		bPlay = bPlayActivateSound;
		bPlayActivateSound = true;
	}
	return bPlay;
	return;
}

final function TurnOffMountedLights()
{
	local LightEx l;

	// End:0x23
	foreach __NFUN_753__(class'LightEx', l)
	{
		l.LightStyle = 0;		
	}	
	return;
}

final function TurnOnMountedLights()
{
	local LightEx l;

	// End:0x30
	foreach __NFUN_753__(class'LightEx', l)
	{
		l.LightStyle = l.default.LightStyle;		
	}	
	return;
}

function class<Pickup> GetPickupClassForSpawn()
{
	return PickupClass;
	return;
}

function Pickup SpawnPickupForWeapon(optional float OverrideDrawScale, optional bool bNoPawnInteractions)
{
	return SpawnPickupFor(Class, GetTotalAmmo(), self, OverrideDrawScale, bNoPawnInteractions);
	return;
}

final function Pickup SpawnPickupFor(class<Weapon> WeaponClass, int PickupAmmo, optional KarmaActor StateActor, optional float OverrideDrawScale, optional bool bNoPawnInteractions)
{
	local WeaponPickup SpawnedPickup;
	local bool bIsMP;

	// End:0x0E
	if(__NFUN_339__(WeaponClass, none))
	{
		return none;
	}
	// End:0x28
	if(__NFUN_204__(OverrideDrawScale, 0))
	{
		OverrideDrawScale = default.DrawScale;
	}
	// End:0x40
	if(__NFUN_339__(WeaponClass.default.PickupClass, none))
	{
		return none;
	}
	SpawnedPickup = WeaponPickup(__NFUN_615__(WeaponClass.default.PickupClass, self,, Instigator.Location, Rotation));
	// End:0x81
	if(__NFUN_339__(SpawnedPickup, none))
	{
		return none;
	}
	bIsMP = IsMP();
	SpawnedPickup.bWeaponDropped = true;
	// End:0xB8
	if(bNoPawnInteractions)
	{
		SpawnedPickup.__NFUN_812__(1);
	}
	// End:0xF8
	if(__NFUN_148__(__NFUN_340__(StateActor, none), StateActor.Owner.bIsPlayerPawn))
	{
		SpawnedPickup.AmmoCharge = PickupAmmo;
	}
	// End:0x13A
	if(bIsMP)
	{
		SpawnedPickup.RespawnTime = -1;
		SpawnedPickup.bTakeExplosionDamageMomentum = false;
		SpawnedPickup.bTakeDamageMomentum = false;
	}
	SpawnedPickup.OverlayEffectAlpha = 0;
	SpawnedPickup.FadeOverlayEffect(1, 1);
	SpawnedPickup.__NFUN_591__(OverrideDrawScale);
	SpawnedPickup.__NFUN_620__(__NFUN_195__(default.CollisionRadius, OverrideDrawScale), __NFUN_195__(default.CollisionHeight, OverrideDrawScale));
	SpawnedPickup.GoPhysics(StateActor);
	// End:0x290
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(bIsMP, __NFUN_340__(Level.Game, none)), __NFUN_340__(Level.Game.MPInfo, none)), __NFUN_201__(Level.Game.MPInfo.WeaponStayTime, 0)))
	{
		SpawnedPickup.LifeSpan = Level.Game.MPInfo.WeaponStayTime;
		SpawnedPickup.bTickOnlyWhenPhysicsAwake = false;
		SpawnedPickup.bTickOnlyRecent = false;
		SpawnedPickup.bTickOnlyZoneRecent = false;
	}
	return SpawnedPickup;
	return;
}

simulated function StartWeaponViewKick(PlayerPawn PlayerOwner)
{
	local int i;

	i = __NFUN_166__(string(WeaponConfig.default.ViewKicks), 1);
	J0x19:

	// End:0x54 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		PlayerOwner.ShakeView(WeaponConfig.default.ViewKicks[i], true);
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x19;
	}
	i = __NFUN_166__(string(WeaponConfig.default.RumbleKicks), 1);
	J0x6D:

	// End:0xA7 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		PlayerOwner.AddRumble(WeaponConfig.default.RumbleKicks[i]);
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x6D;
	}
	return;
}

simulated event StopWeaponViewKick(PlayerPawn PlayerOwner)
{
	local int i;

	i = __NFUN_166__(string(WeaponConfig.default.ViewKicks), 1);
	J0x19:

	// End:0x7C [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x72
		if(__NFUN_200__(WeaponConfig.default.ViewKicks[i].ShakeDuration, 0))
		{
			PlayerOwner.StopShake(WeaponConfig.default.ViewKicks[i].ShakeName);
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x19;
	}
	return;
}

simulated function bool CanFire()
{
	local bool ret;

	ret = __NFUN_148__(__NFUN_150__(__NFUN_145__(IsOutOfLoadedAmmo()), PlayerPawn(Instigator).bInfiniteAmmo), __NFUN_145__(bWeaponFireLockout));
	// End:0xB5
	if(bDebugWeapon)
	{
		__NFUN_355__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__("CanFire returning ", string(ret)), " (!IsOutOfLoadedAmmo()="), string(__NFUN_145__(IsOutOfLoadedAmmo()))), ", !bWeaponFireLockout="), string(__NFUN_145__(bWeaponFireLockout))), ")"));
	}
	return ret;
	return;
}

k2call simulated function WeaponCallback_MaybeDoneFiring()
{
	return;
}

k2call simulated function WeaponCallback_DefinitelyDoneFiring()
{
	return;
}

k2call simulated function Fire_Effects(optional EventInfo AnimEventInfo)
{
	// End:0x47
	if(__NFUN_148__(__NFUN_148__(__NFUN_340__(PlayerPawn(Instigator), none), __NFUN_173__(int(Instigator.Role), int(ROLE_Authority))), __NFUN_173__(int(Instigator.RemoteRole), int(ROLE_AutonomousProxy))))
	{
		return;
	}
	DoFire_Effects();
	return;
}

simulated event DoFire_Effects()
{
	PerformFire();
	// End:0x24
	if(__NFUN_174__(int(Level.NetMode), int(NM_DedicatedServer)))
	{
		ClientSideEffects();
	}
	Instigator.NotifyFired();
	SelectNextFireMuzzle();
	return;
}

// Export UWeapon::execEject_Casing(FFrame&, void* const)
native(1071) k2call simulated function Eject_Casing(optional EventInfo AnimEventInfo)
{
	//native.AnimEventInfo;	
}

simulated function ClientSideEffects()
{
	AttachSupportActors();
	// End:0x48
	if(__NFUN_340__(MuzzleLightActor, none))
	{
		MuzzleLightActor.LightRadius = __NFUN_195__(MuzzleLightActor.default.LightRadius, DrawScale);
		MuzzleLightActor.Flash();
	}
	// End:0x6B
	if(__NFUN_340__(MuzzleFlashActors[MuzzleFireIndex], none))
	{
		HandleParticleEffect(MuzzleFlashActors[MuzzleFireIndex]);
	}
	return;
}

simulated function HandleParticleEffect(SoftParticleSystem ParticleEffect)
{
	ParticleEffect.__NFUN_591__(1);
	ParticleEffect.SystemSizeScale = __NFUN_196__(DrawScale, default.DrawScale);
	// End:0x5A
	if(ParticleEffect.bIsFriendSpawner)
	{
		dnFriendFX_Spawners(ParticleEffect).ExecuteEffect(true);		
	}
	else
	{
		ParticleEffect.Trigger(self, Instigator);
	}
	return;
}

simulated function StopClientSideEffects()
{
	local int i;

	i = __NFUN_166__(string(MuzzleFlashActors), 1);
	J0x0F:

	// End:0x6C [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x62
		if(__NFUN_148__(__NFUN_340__(MuzzleFlashActors[i], none), MuzzleFlashActors[i].bIsFriendSpawner))
		{
			dnFriendFX_Spawners(MuzzleFlashActors[i]).StopEffect();
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x0F;
	}
	return;
}

simulated function SelectNextFireMuzzle()
{
	MuzzleFireIndex = __NFUN_164__(__NFUN_165__(MuzzleFireIndex, 1), string(WeaponConfig.default.MuzzleInfo));
	return;
}

simulated event GetBaseBarrelLocation(out Vector OutBarrelLocation, optional out Rotator OutBarrelRotation)
{
	GetBarrelLocation(0, OutBarrelLocation, OutBarrelRotation);
	return;
}

simulated event GetCurrentBarrelLocation(out Vector OutBarrelLocation, optional out Rotator OutBarrelRotation)
{
	GetBarrelLocation(MuzzleFireIndex, OutBarrelLocation, OutBarrelRotation);
	return;
}

simulated function GetBarrelLocation(int MuzzleIndex, out Vector OutBarrelLocation, optional out Rotator OutBarrelRotation)
{
	local name MuzzleBoneName;

	// End:0x58
	if(__NFUN_340__(__NFUN_568__(), none))
	{
		MuzzleBoneName = WeaponConfig.default.MuzzleInfo[MuzzleIndex].MuzzleBoneName;
		OutBarrelLocation = __NFUN_568__().__NFUN_533__(MuzzleBoneName, true);
		OutBarrelRotation = __NFUN_568__().__NFUN_534__(MuzzleBoneName, true);
	}
	return;
}

// Export UWeapon::execGetCurrentShellEjectionLocation(FFrame&, void* const)
native(1072) simulated function GetCurrentShellEjectionLocation(out Vector OutEjectionLocation, out Rotator OutEjectionRotation)
{
	//native.OutEjectionLocation;
	//native.OutEjectionRotation;	
}

simulated event bool AttemptFire(optional bool bContinueFire)
{
	// End:0x5B
	if(bDebugWeapon)
	{
		__NFUN_355__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_303__(string(self), "AttemptFire"), string(Instigator.WantsToFire(self))), string(bAttemptWeaponDown)), string(CanFire())), string(GottaReload())), string(IsCompletelyOutOfAmmo())));
	}
	// End:0xFE
	if(__NFUN_148__(Instigator.WantsToFire(self), __NFUN_145__(bAttemptWeaponDown)))
	{
		// End:0x96
		if(CanFire())
		{
			Fire(bContinueFire);
			return true;			
		}
		else
		{
			// End:0xFE
			if(Instigator.bIsPlayerPawn)
			{
				// End:0xC5
				if(GottaReload())
				{
					Instigator.Reload();					
				}
				else
				{
					// End:0xFE
					if(IsCompletelyOutOfAmmo())
					{
						// End:0xFE
						if(__NFUN_145__(Instigator.SwitchToBestWeapon()))
						{
							Instigator.HUDActivate();
							FindAndPlaySound('DryFire');
						}
					}
				}
			}
		}
	}
	return false;
	return;
}

simulated event PerformTraceFireEffects(class<TraceDamageType> TraceDamageType, Vector TraceStart, Vector TraceEnd, Actor HitActor)
{
	local BeamSystem Beam;
	local Vector BeamStart;

	super(Actor).PerformTraceFireEffects(TraceDamageType, TraceStart, TraceEnd, HitActor);
	GetCurrentBarrelLocation(BeamStart);
	SpawnWeaponTracer(BeamStart, TraceEnd, WeaponConfig.default.TracerBeamChance, WeaponConfig.default.TracerBeamSystemClass, WeaponConfig.default.TracerBubblesClass, HitActor);
	return;
}

simulated function Fire(optional bool bContinueFire)
{
	// End:0x12
	if(__NFUN_145__(TryState('Firing')))
	{
		return;
	}
	FireSuccess(bContinueFire);
	return;
}

simulated function FireSuccess(bool bContinueFire)
{
	// End:0x29
	if(__NFUN_148__(WeaponConfig.default.bHasFireStart, __NFUN_145__(bContinueFire)))
	{
		WpnFireStart();		
	}
	else
	{
		WpnFire();
	}
	// End:0xA0
	if(__NFUN_340__(Owner, none))
	{
		// End:0x63
		if(Owner.bIsPawn)
		{
			Pawn(Owner).HUDActivate();
		}
		// End:0xA0
		if(__NFUN_148__(Owner.bIsPlayerPawn, PlayerPawn(Owner).IsLocallyControlled()))
		{
			StartWeaponViewKick(PlayerPawn(Owner));
		}
	}
	return;
}

simulated event GetTraceFireAim(out Vector Start, out Vector Forward)
{
	// End:0x53
	if(__NFUN_148__(IsMP(), __NFUN_340__(PlayerPawn(Instigator), none)))
	{
		Start = PlayerPawn(Instigator).WeaponStartTraceLocation;
		Forward = PlayerPawn(Instigator).WeaponStartTraceDirection;		
	}
	else
	{
		Instigator.GetWeaponAim(Start, Forward);
	}
	return;
}

simulated event GetShotError(out float HorizShotError, out float VertShotError)
{
	HorizShotError = WeaponConfig.default.HorizShotError;
	VertShotError = WeaponConfig.default.VertShotError;
	// End:0x8C
	if(__NFUN_148__(WeaponConfig.default.bUseShrunkShotError, __NFUN_200__(Instigator.DrawScale, Instigator.default.DrawScale)))
	{
		HorizShotError = WeaponConfig.default.ShrunkHorizShotError;
		VertShotError = WeaponConfig.default.ShrunkVertShotError;
	}
	// End:0xCB
	if(Instigator.IsZoomedIn())
	{
		__NFUN_207__(HorizShotError, WeaponConfig.default.ZoomErrorPct);
		__NFUN_207__(VertShotError, WeaponConfig.default.ZoomErrorPct);
	}
	return;
}

// Export UWeapon::execPerformFire(FFrame&, void* const)
native(1073) simulated function Projectile PerformFire();

simulated event PerformFire_Custom()
{
	return;
}

event Unfire()
{
	StopClientSideEffects();
	return;
}

event Projectile ProjectileFire(class<Projectile> ProjClass)
{
	local Projectile SpawnedProjectile;
	local Vector SpawnLocation, Forward;
	local Rotator SpawnRotation;

	Instigator.GetWeaponAim(SpawnLocation, Forward);
	// End:0x38
	if(WeaponConfig.default.bFireProjFromMuzzle)
	{
		GetCurrentBarrelLocation(SpawnLocation);
	}
	SpawnRotation = Rotator(Forward);
	AdjustProjectileSpawn(SpawnLocation, SpawnRotation);
	SpawnedProjectile = __NFUN_615__(ProjClass,,, SpawnLocation, SpawnRotation,, WeaponConfig.default.bSkipProjectileFindSpot);
	SetupProjectile(SpawnedProjectile);
	SpawnedProjectile.MuzzleFireIndex = byte(MuzzleFireIndex);
	return SpawnedProjectile;
	return;
}

simulated event class<Projectile> GetProjectileClass()
{
	return WeaponConfig.default.ProjectileClass;
	return;
}

simulated function class<Projectile> GetImpactProjectileClass()
{
	return WeaponConfig.default.ImpactProjectileClass;
	return;
}

function AdjustProjectileSpawn(out Vector SpawnLocation, out Rotator SpawnRotation)
{
	local Vector TraceEnd;
	local STraceFlags TraceFlags;
	local STraceHitResult HitResult;

	// End:0xD4
	if(WeaponConfig.default.bCheatMuzzleBlockage)
	{
		TraceFlags.bTraceActors = true;
		TraceFlags.bMeshAccurate = true;
		TraceFlags.bAbortFirstHit = true;
		TraceFlags.bShotTrace = true;
		TraceFlags.bNoParticles = true;
		TraceFlags.bNoFudge = true;
		TraceEnd = __NFUN_238__(SpawnLocation, __NFUN_234__(__NFUN_253__(Vector(SpawnRotation)), 100));
		__NFUN_736__(SpawnLocation, TraceEnd, TraceFlags, HitResult);
		// End:0xD4
		if(__NFUN_340__(HitResult.Actor, none))
		{
			// End:0xD4
			if(__NFUN_339__(Instigator.TraceFromCrosshairMesh(100), none))
			{
				SpawnLocation = Instigator.__NFUN_872__();
			}
		}
	}
	return;
}

function SetupProjectile(Projectile Proj)
{
	// End:0x0E
	if(__NFUN_339__(Proj, none))
	{
		return;
	}
	Proj.Instigator = Instigator;
	return;
}

simulated function float GetBaseFiringDamage()
{
	return 0;
	return;
}

simulated function bool HasUnfire()
{
	return WeaponConfig.default.bHasUnFire;
	return;
}

simulated event float GetBaseDamage(Actor Victim, optional Pawn DamageInstigator, optional class<DamageType> DamageType, optional Vector HitDirection, optional Vector HitPosition, optional name BoneName, optional Vector SourceTraceOrigin)
{
	return GetBaseFiringDamage();
	return;
}

simulated function bool CanMelee()
{
	return __NFUN_148__(__NFUN_145__(bAttemptWeaponDown), __NFUN_170__(WeaponConfig.default.NumMeleeAttacks, 0));
	return;
}

k2call simulated function WeaponCallback_MeleeComplete()
{
	return;
}

k2call simulated function Melee_Effects(optional EventInfo AnimEventInfo)
{
	// End:0x14
	if(__NFUN_173__(int(Role), int(ROLE_Authority)))
	{
		ServerMelee();
	}
	ClientSideMeleeEffects();
	return;
}

simulated function ClientSideMeleeEffects()
{
	return;
}

simulated event bool AttemptMelee()
{
	// End:0x27
	if(__NFUN_148__(Instigator.WantsToMelee(self), CanMelee()))
	{
		Melee();
		return true;
	}
	return false;
	return;
}

simulated function Melee()
{
	// End:0x12
	if(__NFUN_145__(TryState('MeleeAttack')))
	{
		return;
	}
	Instigator.HUDActivate();
	MeleeStartTrace = __NFUN_263__(__NFUN_239__(Instigator.__NFUN_872__(), Instigator.Location), __NFUN_267__(float(-1), Instigator.Rotation));
	WpnMelee();
	return;
}

final function ServerMelee()
{
	return;
}

final simulated function Actor PerformMelee()
{
	local STraceFlags TraceFlags;
	local STraceHitResult TraceResult;
	local Vector Forward, TraceStart, TraceEnd;
	local Actor HitActor, HitActor2;
	local float TraceDistance;
	local bool bExtentTrace;
	local class<Material> HitMaterial;
	local Actor.ETraceFireHitResponse MeleeHitResponse;
	local Vector MovingVelocity;
	local float MovingVelocityDot;

	// End:0x1A
	if(__NFUN_173__(int(Level.NetMode), int(NM_Client)))
	{
		return none;
	}
	Instigator.GetWeaponAim(TraceStart, Forward);
	// End:0x5C
	if(Instigator.__NFUN_921__())
	{
		TraceDistance = WeaponConfig.default.MeleeTraceDistanceShrunk;		
	}
	else
	{
		TraceDistance = WeaponConfig.default.MeleeTraceDistance;
	}
	TraceFlags.bTraceActors = true;
	TraceFlags.bMeshAccurate = true;
	TraceFlags.bShotTrace = true;
	TraceFlags.bTraceTexture = true;
	TraceStart = __NFUN_238__(Instigator.Location, __NFUN_263__(MeleeStartTrace, Instigator.Rotation));
	TraceEnd = __NFUN_238__(TraceStart, __NFUN_235__(TraceDistance, Forward));
	// End:0x17B
	if(__NFUN_148__(IsMP(), __NFUN_340__(Level.__NFUN_1161__(), Instigator)))
	{
		MovingVelocityDot = __NFUN_227__(__NFUN_244__(__NFUN_253__(Instigator.Velocity), __NFUN_253__(Forward)), -0.1, 1);
		MovingVelocity = __NFUN_234__(__NFUN_234__(__NFUN_234__(Instigator.Velocity, Level.TimeDeltaSeconds), MovingVelocityDot), 4.5);
		__NFUN_249__(TraceEnd, MovingVelocity);
	}
	// End:0x1B8
	if(WeaponConfig.default.bDebugShotTraces)
	{
		__NFUN_676__(TraceStart, TraceEnd, NewColorBytes(255, 0, 0, 255), WeaponConfig.default.DebugShotTracesTime);
	}
	HitActor = __NFUN_736__(TraceStart, TraceEnd, TraceFlags, TraceResult,, GetIgnoreMeleeActor(Instigator));
	// End:0x2A6
	if(__NFUN_150__(__NFUN_339__(HitActor, none), __NFUN_148__(__NFUN_145__(HitActor.bIsInteractiveActor), __NFUN_174__(int(HitActor.Physics), int(18)))))
	{
		HitActor = __NFUN_736__(TraceStart, TraceEnd, TraceFlags, TraceResult, __NFUN_235__(Instigator.ShrinkScale, WeaponConfig.default.MeleeHitExtent), GetIgnoreMeleeActor(Instigator));
		bExtentTrace = true;
		// End:0x2A6
		if(__NFUN_148__(__NFUN_340__(HitActor, none), __NFUN_339__(TraceResult.Texture, none)))
		{
			TraceResult.Texture = HitActor.__NFUN_740__(0);
		}
	}
	// End:0x324
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(IsMP(), __NFUN_340__(HitActor, none)), HitActor.bIsPlayerPawn), __NFUN_340__(Level.__NFUN_1161__(), Instigator)))
	{
		// End:0x324
		if(MightIgnorePrediction(Instigator, Pawn(HitActor), TraceResult.Location, TraceStart, TraceEnd, MovingVelocity))
		{
			HitActor = none;
		}
	}
	// End:0x372
	if(__NFUN_340__(HitActor, none))
	{
		return PerformHit(TraceFlags, TraceResult, Forward, TraceStart, TraceEnd, HitActor, HitActor2, TraceDistance, bExtentTrace, HitMaterial, MeleeHitResponse);		
	}
	else
	{
		return HitActor;
	}
	return;
}

function bool MightIgnorePrediction(Pawn Instigator, Pawn Target, Vector HitLocation, Vector TraceStart, Vector TraceEnd, Vector TraceAddition)
{
	// End:0x70
	if(__NFUN_150__(__NFUN_200__(__NFUN_252__(Target.Velocity), float(100)), __NFUN_200__(__NFUN_244__(__NFUN_253__(Instigator.Velocity), __NFUN_253__(Target.Velocity)), float(0))))
	{
		// End:0x70
		if(__NFUN_201__(__NFUN_252__(__NFUN_239__(TraceStart, HitLocation)), __NFUN_252__(__NFUN_239__(__NFUN_239__(TraceStart, TraceEnd), TraceAddition))))
		{
			return true;
		}
	}
	return false;
	return;
}

final noexport simulated function Actor PerformHit(STraceFlags TraceFlags, STraceHitResult TraceResult, Vector Forward, Vector TraceStart, Vector TraceEnd, Actor HitActor, Actor HitActor2, float TraceDistance, bool bExtentTrace, class<Material> HitMaterial, Actor.ETraceFireHitResponse MeleeHitResponse)
{
	// End:0x1D6
	if(__NFUN_340__(HitActor, none))
	{
		// End:0x4E
		if(__NFUN_357__(Instigator.Class, class'PlayerPawn'))
		{
			Instigator.SentinelAddEvent(HitActor, self, "melee_hit", 0, "");
		}
		MeleeHitResponse = MeleeHit(HitActor, TraceStart, TraceEnd, TraceResult, bExtentTrace);
		bExtentTrace = false;
		HitMaterial = TraceResult.Texture.GetMaterial();
		// End:0xB8
		if(__NFUN_339__(HitMaterial, none))
		{
			HitMaterial = HitActor.EffectsMaterial;
		}
		// End:0x1D6
		if(__NFUN_148__(__NFUN_148__(__NFUN_173__(int(MeleeHitResponse), int(1)), __NFUN_340__(HitMaterial, none)), HitMaterial.default.bAllowMeleePassthrough))
		{
			HitActor2 = __NFUN_736__(TraceResult.Location, TraceEnd, TraceFlags, TraceResult,, HitActor);
			// End:0x1A4
			if(__NFUN_339__(HitActor2, none))
			{
				HitActor2 = __NFUN_736__(TraceResult.Location, TraceEnd, TraceFlags, TraceResult, __NFUN_235__(Instigator.ShrinkScale, WeaponConfig.default.MeleeHitExtent), HitActor);
				bExtentTrace = true;
				// End:0x1A4
				if(__NFUN_148__(__NFUN_340__(HitActor2, none), __NFUN_339__(TraceResult.Texture, none)))
				{
					TraceResult.Texture = HitActor2.__NFUN_740__(0);
				}
			}
			// End:0x1D6
			if(__NFUN_340__(HitActor2, none))
			{
				MeleeHit(HitActor2, TraceStart, TraceEnd, TraceResult, bExtentTrace);
				return HitActor2;
			}
		}
	}
	return HitActor;
	return;
}

final simulated function Actor.ETraceFireHitResponse MeleeHit(Actor HitActor, Vector TraceStart, Vector TraceEnd, STraceHitResult TraceResult, bool bExtentTrace)
{
	local float Damage;
	local Rotator WorldRotation;
	local class<Material> HitMaterial;
	local PlayerPawn PlayerOwner;
	local bool bIsMasking;

	__NFUN_354__(__NFUN_340__(HitActor, none));
	// End:0xD0
	if(__NFUN_174__(int(Level.NetMode), int(NM_DedicatedServer)))
	{
		// End:0x52
		if(__NFUN_340__(HitActor.EffectsMaterial, none))
		{
			HitMaterial = HitActor.EffectsMaterial;			
		}
		else
		{
			// End:0x97
			if(__NFUN_340__(TraceResult.Texture, none))
			{
				HitMaterial = TraceResult.Texture.GetMaterial();
				bIsMasking = TraceResult.Texture.__NFUN_1193__();
			}
		}
		TraceFireMaterialHit(WeaponConfig.default.MeleeDamageType, HitActor, TraceResult.Location, TraceResult.Normal, HitMaterial, bIsMasking);
	}
	// End:0x100
	if(GetMeleeDirection(WorldRotation))
	{
		TraceStart = __NFUN_239__(TraceEnd, __NFUN_234__(Vector(WorldRotation), 64));
		MeleeAnimEventString = "";
	}
	// End:0x176
	if(__NFUN_148__(Instigator.bIsPlayerPawn, Instigator.IsLocallyControlled()))
	{
		PlayerOwner = PlayerPawn(Instigator);
		PlayerOwner.ShakeView(PlayerOwner.MeleeContactShake);
		PlayerOwner.AddRumble(PlayerOwner.MeleeContactRumble);
	}
	return HitActor.TraceFireHit(self, WeaponConfig.default.MeleeDamageType, TraceStart, TraceResult.Location, TraceResult.Normal, TraceResult.MeshBone, bExtentTrace);
	return;
}

final function bool GetMeleeDirection(out Rotator WorldRotation)
{
	local int CommaPos;
	local float XDir, YDir;

	CommaPos = __NFUN_315__(MeleeAnimEventString, ",");
	// End:0x8B
	if(__NFUN_172__(CommaPos, 0))
	{
		XDir = float(__NFUN_317__(MeleeAnimEventString, CommaPos));
		YDir = float(__NFUN_318__(MeleeAnimEventString, __NFUN_166__(__NFUN_166__(__NFUN_314__(MeleeAnimEventString), CommaPos), 1)));
		WorldRotation = __NFUN_265__(int(__NFUN_195__(float(16384), YDir)), __NFUN_165__(int(__NFUN_195__(float(16384), XDir)), Instigator.ViewRotation.Yaw), 0);
		return true;
	}
	return false;
	return;
}

function float AttachToAmmo(optional bool bTravel)
{
	local float AmmoAdded;

	// End:0x24D
	if(__NFUN_145__(bTravel))
	{
		// End:0x42
		if(__NFUN_340__(Ammo, none))
		{
			Warn(__NFUN_302__("called with existing Ammo ", string(Ammo)));
		}
		Ammo = Ammo(Instigator.__NFUN_917__(WeaponConfig.default.AmmoClass));
		// End:0x15C
		if(__NFUN_339__(Ammo, none))
		{
			Ammo = __NFUN_615__(WeaponConfig.default.AmmoClass, self);
			// End:0xC4
			if(__NFUN_339__(Ammo, none))
			{
				Warn(__NFUN_303__("Could not spawn", string(WeaponConfig.default.AmmoClass)));
			}
			// End:0xE8
			if(__NFUN_206__(Charge, float(0)))
			{
				Ammo.Charge = Charge;				
			}
			else
			{
				// End:0x113
				if(bIsPrimaryWeapon)
				{
					Ammo.Charge = Ammo.MaxCharge;					
				}
				else
				{
					Ammo.Charge = float(AmmoLoaded);
				}
			}
			AmmoAdded = Ammo.Charge;
			Ammo.GiveTo(Instigator, bTravel);			
		}
		else
		{
			AmmoAdded = Ammo.Charge;
			// End:0x1AE
			if(__NFUN_148__(__NFUN_204__(Ammo.Charge, float(0)), __NFUN_206__(Charge, float(0))))
			{
				__NFUN_209__(Ammo.Charge, Charge);				
			}
			else
			{
				// End:0x1D9
				if(bIsPrimaryWeapon)
				{
					Ammo.Charge = Ammo.MaxCharge;					
				}
				else
				{
					__NFUN_209__(Ammo.Charge, float(WeaponConfig.default.AdditionalPickupAmmoMin));
				}
			}
			Ammo.Charge = float(__NFUN_191__(int(Ammo.Charge), 0, int(Ammo.MaxCharge)));
			AmmoAdded = __NFUN_199__(Ammo.Charge, AmmoAdded);
		}		
	}
	else
	{
		// End:0x27E
		if(__NFUN_339__(Ammo, none))
		{
			Warn("called with non-existant Ammo");
		}
	}
	return AmmoAdded;
	return;
}

simulated function ClientSetAmmoLoaded(int NewAmmoLoaded)
{
	AmmoLoaded = NewAmmoLoaded;
	return;
}

k2call simulated function Ammo_Inserted(optional EventInfo AnimEventInfo)
{
	// End:0x53
	if(__NFUN_150__(__NFUN_173__(int(Role), int(ROLE_Authority)), __NFUN_148__(__NFUN_340__(Instigator, none), Instigator.IsLocallyControlled())))
	{
		ReloadAmmo();
		// End:0x53
		if(__NFUN_340__(Instigator, none))
		{
			Instigator.HUDActivate();
		}
	}
	return;
}

simulated function ReloadAmmo(optional int MaxReloadRounds, optional bool bSilentReload)
{
	local int LoadCount;

	// End:0x2A
	if(__NFUN_174__(MaxReloadRounds, 0))
	{
		MaxReloadRounds = __NFUN_188__(MaxReloadRounds, WeaponConfig.default.ReloadCount);		
	}
	else
	{
		MaxReloadRounds = WeaponConfig.default.ReloadClipAmmo;
	}
	LoadCount = MaxReloadRounds;
	// End:0x7B
	if(__NFUN_340__(Ammo, none))
	{
		LoadCount = __NFUN_188__(int(__NFUN_199__(Ammo.Charge, float(AmmoLoaded))), MaxReloadRounds);
	}
	LoadCount = __NFUN_188__(LoadCount, __NFUN_166__(WeaponConfig.default.ReloadCount, AmmoLoaded));
	__NFUN_180__(AmmoLoaded, LoadCount);
	// End:0xE8
	if(__NFUN_148__(__NFUN_148__(WeaponConfig.default.bHUDAmmoActivateOnReload, __NFUN_145__(bSilentReload)), __NFUN_340__(Instigator, none)))
	{
		Instigator.HUDAmmoActivate();
	}
	return;
}

simulated function AIActor_ForceReload()
{
	AmmoLoaded = WeaponConfig.default.ReloadCount;
	return;
}

simulated event bool ExpendAmmo(int amount)
{
	// End:0x2F
	if(__NFUN_148__(Instigator.bIsPlayerPawn, PlayerPawn(Instigator).bInfiniteAmmo))
	{
		return true;
	}
	// End:0x59
	if(__NFUN_173__(int(Role), int(ROLE_Authority)))
	{
		// End:0x59
		if(__NFUN_145__(Ammo.UseAmmo(amount)))
		{
			return false;
		}
	}
	// End:0x83
	if(__NFUN_174__(WeaponConfig.default.ReloadCount, 0))
	{
		AmmoLoaded = __NFUN_189__(0, __NFUN_166__(AmmoLoaded, amount));
	}
	Instigator.HUDAmmoActivate();
	return true;
	return;
}

simulated function bool IsCompletelyOutOfAmmo()
{
	// End:0x1A
	if(PlayerPawn(Instigator).bInfiniteAmmo)
	{
		return false;
	}
	return __NFUN_200__(Ammo.Charge, float(WeaponConfig.default.AmmoExpenditure));
	return;
}

simulated function bool IsOutOfLoadedAmmo()
{
	// End:0x17
	if(__NFUN_145__(Instigator.bIsPlayerPawn))
	{
		return false;
	}
	// End:0x31
	if(PlayerPawn(Instigator).bInfiniteAmmo)
	{
		return false;
	}
	return __NFUN_169__(GetLoadedAmmo(), WeaponConfig.default.AmmoExpenditure);
	return;
}

simulated function bool GottaReload()
{
	// End:0x17
	if(__NFUN_173__(WeaponConfig.default.ReloadCount, 0))
	{
		return false;
	}
	// End:0x2F
	if(__NFUN_148__(IsOutOfLoadedAmmo(), __NFUN_145__(IsCompletelyOutOfAmmo())))
	{
		return true;
	}
	return false;
	return;
}

simulated event bool IsFullyLoaded()
{
	return __NFUN_172__(GetLoadedAmmo(), WeaponConfig.default.ReloadCount);
	return;
}

simulated event int GetLoadedAmmo()
{
	// End:0x26
	if(__NFUN_173__(WeaponConfig.default.ReloadCount, 0))
	{
		return int(Ammo.Charge);
	}
	return AmmoLoaded;
	return;
}

// Export UWeapon::execGetMaxClip(FFrame&, void* const)
native final simulated function int GetMaxClip();

simulated function int GetTotalAmmo()
{
	return int(Ammo.Charge);
	return;
}

simulated function int GetMaximumAmmo()
{
	return int(Ammo.MaxCharge);
	return;
}

simulated function GetPrincipalAmmoValues(out int Value, out int MaxValue)
{
	Value = GetLoadedAmmo();
	// End:0x39
	if(__NFUN_174__(WeaponConfig.default.ReloadCount, 0))
	{
		MaxValue = WeaponConfig.default.ReloadCount;		
	}
	else
	{
		MaxValue = int(Ammo.MaxCharge);
	}
	return;
}

function ServerReload()
{
	Reload();
	return;
}

function bool Reload()
{
	bAttemptWeaponReload = false;
	// End:0x46
	if(__NFUN_145__(CanReload()))
	{
		// End:0x44
		if(__NFUN_148__(__NFUN_340__(Instigator, none), WeaponConfig.default.bHUDAmmoActivateOnReload))
		{
			Instigator.HUDAmmoActivate();
		}
		return false;
	}
	// End:0x62
	if(__NFUN_340__(Instigator, none))
	{
		Instigator.NotifyReloading();
	}
	TryState('Reloading');
	return true;
	return;
}

simulated function ClientReload()
{
	// End:0x0D
	if(__NFUN_145__(CanReload()))
	{
		return;
	}
	TryState('Reloading');
	return;
}

simulated function float GetClipPCT()
{
	local int HelperCurrentAmmo, HelperMaxAmmo;

	// End:0x39
	if(__NFUN_150__(__NFUN_173__(int(ChargeDisplayType), int(2)), __NFUN_173__(int(ChargeDisplayType), int(1))))
	{
		HelperCurrentAmmo = GetTotalAmmo();
		HelperMaxAmmo = GetMaximumAmmo();		
	}
	else
	{
		// End:0x5A
		if(__NFUN_173__(int(ChargeDisplayType), int(3)))
		{
			GetPrincipalAmmoValues(HelperCurrentAmmo, HelperMaxAmmo);			
		}
		else
		{
			HelperCurrentAmmo = 1;
			HelperMaxAmmo = 1;
		}
	}
	return __NFUN_227__(__NFUN_196__(float(HelperCurrentAmmo), float(HelperMaxAmmo)), 0, 1);
	return;
}

function float GetWarnPCT()
{
	return WeaponConfig.default.AmmoWarnPCT;
	return;
}

simulated function string GetHUDAmmoDisplay()
{
	return __NFUN_303__(string(GetTotalAmmo()), "Ammo");
	return;
}

simulated function bool ShouldShowHUDAmmoActivate(class<Weapon> OldWeaponClass)
{
	return true;
	return;
}

simulated function string GetHUDNumber()
{
	return string(GetTotalAmmo());
	return;
}

simulated function bool CanReload()
{
	// End:0x1B
	if(__NFUN_172__(AmmoLoaded, WeaponConfig.default.ReloadCount))
	{
		return false;
	}
	// End:0x32
	if(__NFUN_171__(WeaponConfig.default.ReloadClipAmmo, 0))
	{
		return false;
	}
	// End:0x4E
	if(__NFUN_202__(Ammo.Charge, float(AmmoLoaded)))
	{
		return false;
	}
	// End:0x59
	if(bAttemptWeaponDown)
	{
		return false;
	}
	return true;
	return;
}

k2call simulated function WeaponCallback_MaybeDoneReloading()
{
	return;
}

k2call simulated function WeaponCallback_DefinitelyDoneReloading()
{
	return;
}

k2call simulated function Eject_Clip(optional EventInfo AnimEventInfo)
{
	local Vector EjectVelocity;

	// End:0x9E
	if(__NFUN_340__(EjectingClip, none))
	{
		// End:0x2D
		if(IsMP())
		{
			EjectVelocity = EjectingClip.default.Velocity;			
		}
		else
		{
			EjectVelocity = Instigator.__NFUN_798__(EjectingClip.Location);
		}
		__NFUN_619__(EmptyClipRenderObject, EmptyClipPhysMaterial, EjectingClip.Location, EjectingClip.Rotation, EjectingClip.DrawScale, EjectVelocity,, true);
		EjectingClip.__NFUN_590__(true);
	}
	return;
}

k2call simulated function Mount_Clip_User(optional EventInfo AnimEventInfo)
{
	// End:0x65
	if(__NFUN_148__(__NFUN_340__(InsertingClip, none), Instigator.bIsPlayerPawn))
	{
		InsertingClip.__NFUN_590__(false);
		InsertingClip.DestroyOnDismount = false;
		InsertingClip.__NFUN_631__();
		InsertingClip.__NFUN_633__(UserInsertClipMount, Instigator);
	}
	return;
}

k2call simulated function Mount_Clip_Weapon(optional EventInfo AnimEventInfo)
{
	// End:0x3E
	if(__NFUN_340__(InsertingClip, none))
	{
		InsertingClip.DestroyOnDismount = false;
		InsertingClip.__NFUN_631__();
		InsertingClip.__NFUN_633__(WeaponClipMount, self);
	}
	return;
}

k2call simulated function WeaponCallback_AnimEnd()
{
	return;
}

simulated event name GetCompositeWeaponAnimName()
{
	// End:0x2E
	if(__NFUN_342__(GetWeaponAnimReq(WeaponState), 'None'))
	{
		return __NFUN_344__(GetWeaponAnimName(), GetWeaponAnimReq(WeaponState));		
	}
	else
	{
		return 'None';
	}
	return;
}

simulated function SetWeaponState(byte NewWeaponState)
{
	local name AnimState;
	local byte byForceReset;

	// End:0x33
	if(bDebugWeapon)
	{
		__NFUN_355__(__NFUN_303__(__NFUN_302__(string(self), "SetWeaponState"), string(__NFUN_365__(Enum'EWeaponState', int(NewWeaponState)))));
	}
	WeaponState = NewWeaponState;
	// End:0x53
	if(__NFUN_173__(int(Role), int(ROLE_Authority)))
	{
		__NFUN_184__(WeaponStateImpulse);
	}
	// End:0xD9
	if(__NFUN_148__(__NFUN_340__(Instigator, none), __NFUN_150__(__NFUN_339__(Instigator.Weapon, self), AllowWeaponStateOverride(NewWeaponState))))
	{
		Instigator.UpdateWeaponAnimationState(self, WeaponState);
		AnimState = GetWeaponAnimReq(NewWeaponState, byForceReset);
		// End:0xCE
		if(__NFUN_170__(int(byForceReset), 0))
		{
			SetWeaponAnimState(AnimState, true);			
		}
		else
		{
			SetWeaponAnimState(AnimState);
		}
	}
	return;
}

simulated function bool AllowWeaponStateOverride(byte NewWeaponState)
{
	return false;
	return;
}

simulated function SetWeaponAnimState(name NewWeaponAnimState, optional bool bForceReset)
{
	// End:0x12
	if(__NFUN_341__(NewWeaponAnimState, 'None'))
	{
		return;
	}
	// End:0x3C
	if(__NFUN_340__(AnimationController, none))
	{
		AnimationController.SetAnimState(NewWeaponAnimState, bForceReset);		
	}
	else
	{
		BroadcastLog(__NFUN_302__(__NFUN_302__(__NFUN_302__(string(self), ".SetWeaponAnimState(): has no valid AnimationControllerEx reference! (target state: '"), string(NewWeaponAnimState)), "')"));
	}
	return;
}

// Export UWeapon::execGetWeaponAnimName(FFrame&, void* const)
native(1074) simulated function name GetWeaponAnimName();

simulated function name GetWeaponAnimReq(byte WeaponStateReq, optional out byte byForceReset)
{
	switch(WeaponStateReq)
	{
		// End:0x13
		case 1:
			return 'Activate';
		// End:0x1E
		case 2:
			return 'Deactivate';
		// End:0x31
		case 8:
			byForceReset = 1;
			return 'ReloadStart';
		// End:0x44
		case 7:
			byForceReset = 1;
			return 'Reload';
		// End:0x57
		case 9:
			byForceReset = 1;
			return 'ReloadStop';
		// End:0x8E
		case 5:
			byForceReset = byte(WeaponConfig.default.bForceResetFireStart);
			return WeaponConfig.default.MuzzleInfo[MuzzleFireIndex].MuzzleFireStartAnim;
		// End:0xC5
		case 4:
			byForceReset = byte(WeaponConfig.default.bForceResetFire);
			return WeaponConfig.default.MuzzleInfo[MuzzleFireIndex].MuzzleFireAnim;
		// End:0xFC
		case 6:
			byForceReset = byte(WeaponConfig.default.bForceResetFireStop);
			return WeaponConfig.default.MuzzleInfo[MuzzleFireIndex].MuzzleFireStopAnim;
		// End:0x11C
		case 10:
			byForceReset = 1;
			return __NFUN_343__(__NFUN_302__(string('Melee'), string(LastMeleeIndex)));
		// End:0xFFFF
		default:
			return 'None';
			break;
	}
	return;
}

simulated function WpnActivate()
{
	SetWeaponState(1);
	AttachSupportActors();
	return;
}

simulated function WpnDeactivate()
{
	SetWeaponState(2);
	return;
}

simulated function WpnFireStart()
{
	// End:0x2B
	if(bDebugWeapon)
	{
		__NFUN_355__(__NFUN_302__("Starting WeaponFire for ", string(self)));
	}
	SetWeaponState(5);
	return;
}

simulated function WpnFire()
{
	// End:0x2D
	if(bDebugWeapon)
	{
		__NFUN_355__(__NFUN_302__("Continuing WeaponFire for ", string(self)));
	}
	SetWeaponState(4);
	bWeaponFireLockout = true;
	__NFUN_607__(WeaponConfig.default.LockoutFireTime, false, 'ClearLockout');
	return;
}

simulated function ClearLockout()
{
	bWeaponFireLockout = false;
	// End:0x34
	if(__NFUN_148__(__NFUN_145__(WeaponConfig.default.bFireInterruptFiring), __NFUN_341__(__NFUN_399__(), 'idle')))
	{
		global.AttemptFire(true);
	}
	return;
}

simulated function WpnFireStop()
{
	// End:0x0B
	if(bAttemptWeaponDown)
	{
		return;
	}
	SetWeaponState(6);
	return;
}

simulated function WpnMelee()
{
	LastMeleeIndex = __NFUN_187__(WeaponConfig.default.NumMeleeAttacks);
	SetWeaponState(10);
	return;
}

simulated function WpnReloadStart()
{
	SetWeaponState(8);
	return;
}

simulated function WpnReload()
{
	SetWeaponState(7);
	return;
}

simulated function WpnReloadStop()
{
	SetWeaponState(9);
	return;
}

simulated function WpnIdle()
{
	SetWeaponState(3);
	SetWeaponAnimState('idle');
	return;
}

simulated function KillSuccessAnim()
{
	return;
}

simulated function bool TryState(name NewState)
{
	// End:0x63
	if(bDebugWeapon)
	{
		__NFUN_355__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_302__(string(self), ":TryState - NewState:"), string(NewState)), "Instigator.CanDoThings():"), string(Instigator.CanDoThings())));
	}
	// End:0x7A
	if(__NFUN_145__(Instigator.CanDoThings()))
	{
		return false;
	}
	__NFUN_397__(NewState);
	return true;
	return;
}

k2call simulated function WeaponCallback_Activated()
{
	return;
}

simulated function bool CanDeactivate()
{
	return bDeactivationAllowed;
	return;
}

simulated function DoneDeactivating()
{
	return;
}

simulated function DoneActivating()
{
	return;
}

state Firing
{
	simulated function bool AttemptFire(optional bool bContinueFire)
	{
		// End:0x20
		if(WeaponConfig.default.bFireInterruptFiring)
		{
			return global.AttemptFire(bContinueFire);
		}
		return;
	}

	function bool Reload()
	{
		// End:0x1A
		if(WeaponConfig.default.bReloadInterruptFiring)
		{
			return global.Reload();
		}
		bAttemptWeaponReload = true;
		return false;
		return;
	}

	simulated function bool CanMelee()
	{
		return __NFUN_148__(WeaponConfig.default.bMeleeInterruptFiring, global.CanMelee());
		return;
	}

	event Unfire()
	{
		// End:0x0F
		if(HasUnfire())
		{
			WpnFireStop();
		}
		global.Unfire();
		return;
	}

	k2call simulated function WeaponCallback_MaybeDoneFiring()
	{
		// End:0x3F
		if(bDebugWeapon)
		{
			__NFUN_355__(__NFUN_302__(__NFUN_302__(__NFUN_302__(string(self), ":"), string(__NFUN_399__())), ":WeaponCallback_MaybeDoneFiring"));
		}
		// End:0xD2
		if(__NFUN_145__(global.AttemptFire(true)))
		{
			// End:0x96
			if(__NFUN_148__(__NFUN_148__(__NFUN_340__(Owner, none), Owner.bIsPlayerPawn), PlayerPawn(Owner).IsLocallyControlled()))
			{
				StopWeaponViewKick(PlayerPawn(Owner));
			}
			// End:0xCC
			if(__NFUN_148__(__NFUN_148__(WeaponConfig.default.bHasFireStop, __NFUN_145__(bAttemptWeaponReload)), __NFUN_145__(GottaReload())))
			{
				WpnFireStop();				
			}
			else
			{
				WeaponCallback_DefinitelyDoneFiring();
			}
		}
		return;
	}

	k2call simulated function WeaponCallback_DefinitelyDoneFiring()
	{
		// End:0x44
		if(bDebugWeapon)
		{
			__NFUN_355__(__NFUN_302__(__NFUN_302__(__NFUN_302__(string(self), ":"), string(__NFUN_399__())), ":WeaponCallback_DefinitelyDoneFiring"));
		}
		TryState('idle');
		return;
	}

	simulated function EndState()
	{
		StopClientSideEffects();
		// End:0x51
		if(__NFUN_148__(__NFUN_148__(__NFUN_340__(Owner, none), Owner.bIsPlayerPawn), PlayerPawn(Owner).IsLocallyControlled()))
		{
			StopWeaponViewKick(PlayerPawn(Owner));
		}
		return;
	}
	stop;
}

state MeleeAttack
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		Instigator.__NFUN_577__('AnimationValues', 'MeleeScalar', WeaponConfig.default.MeleeMovementSpeedScale,, 0.25);
		return;
	}

	simulated event EndState()
	{
		Instigator.__NFUN_577__('AnimationValues', 'MeleeScalar', 1,, 0.25);
		super(Object).EndState();
		return;
	}

	simulated event bool AttemptMelee()
	{
		return;
	}

	function bool Reload()
	{
		bAttemptWeaponReload = true;
		return false;
		return;
	}

	simulated function bool CanReload()
	{
		return false;
		return;
	}

	k2call simulated function WeaponCallback_MeleeComplete()
	{
		global.WeaponCallback_MeleeComplete();
		// End:0x1C
		if(__NFUN_145__(global.AttemptMelee()))
		{
			TryState('idle');
		}
		return;
	}

	simulated event float GetBaseDamage(Actor Victim, optional Pawn DamageInstigator, optional class<DamageType> DamageType, optional Vector HitDirection, optional Vector HitPosition, optional name BoneName, optional Vector SourceTraceOrigin)
	{
		return __NFUN_195__(__NFUN_226__(WeaponConfig.default.MeleeHitDamageBase, WeaponConfig.default.MeleeHitDamageVariance), DamageInstigator.MeleeDamageMultiplier);
		return;
	}
	stop;
}

state Reloading
{
	simulated function BeginState()
	{
		// End:0x1A
		if(__NFUN_340__(InsertingClip, none))
		{
			InsertingClip.__NFUN_590__(true);
		}
		// End:0x34
		if(__NFUN_340__(EjectingClip, none))
		{
			EjectingClip.__NFUN_590__(false);
		}
		// End:0xA1
		if(__NFUN_148__(__NFUN_148__(__NFUN_170__(WeaponConfig.default.ReloadCount, 0), __NFUN_169__(AmmoLoaded, WeaponConfig.default.ReloadCount)), __NFUN_201__(Ammo.Charge, float(0))))
		{
			// End:0x98
			if(WeaponConfig.default.bHasReloadStart)
			{
				WpnReloadStart();				
			}
			else
			{
				WpnReload();
			}			
		}
		else
		{
			WeaponCallback_DefinitelyDoneReloading();
		}
		// End:0xC3
		if(__NFUN_340__(Instigator, none))
		{
			Instigator.NotifyReloadingBegin();
		}
		return;
	}

	simulated function EndState()
	{
		// End:0x1A
		if(__NFUN_340__(InsertingClip, none))
		{
			InsertingClip.__NFUN_590__(true);
		}
		// End:0x34
		if(__NFUN_340__(EjectingClip, none))
		{
			EjectingClip.__NFUN_590__(false);
		}
		// End:0x50
		if(__NFUN_340__(Instigator, none))
		{
			Instigator.NotifyReloadingEnd();
		}
		return;
	}

	simulated function bool CanMelee()
	{
		return __NFUN_148__(WeaponConfig.default.bMeleeInterruptReloading, global.CanMelee());
		return;
	}

	k2call simulated function WeaponCallback_MaybeDoneReloading()
	{
		// End:0x12
		if(CanReload())
		{
			WpnReload();			
		}
		else
		{
			WpnReloadStop();
		}
		return;
	}

	k2call simulated function WeaponCallback_DefinitelyDoneReloading()
	{
		TryState('idle');
		return;
	}
	stop;
}

state Activating
{
	simulated function bool PutDown()
	{
		bAttemptWeaponDown = true;
		DoneActivating();
		return true;
		return;
	}

	function bool Reload()
	{
		bAttemptWeaponReload = true;
		return true;
		return;
	}

	simulated function BeginState()
	{
		Instigator.WeaponPreActivate(self);
		bDumbMesh = false;
		AnimToggleState = 0;
		bAttemptWeaponDown = false;
		bAttemptWeaponReload = false;
		bNoNativeTick = false;
		TickStyle = 2;
		__NFUN_361__('Tick');
		bActive = true;
		// End:0x68
		if(__NFUN_173__(int(ChangeSpeed), int(0)))
		{
			WpnActivate();			
		}
		else
		{
			AttachSupportActors();
			DoneActivating();
		}
		return;
	}

	simulated function DoneActivating()
	{
		// End:0x2F
		if(bDebugWeapon)
		{
			__NFUN_355__(__NFUN_302__(__NFUN_302__(__NFUN_302__(string(self), ":"), string(__NFUN_399__())), ":DoneActivating"));
		}
		Instigator.WeaponPostActivate(self);
		// End:0x56
		if(bAttemptWeaponDown)
		{
			TryState('Deactivating');
			return;
		}
		TryState(WeaponConfig.default.DoneActivatingStateTransition);
		return;
	}

	k2call simulated function WeaponCallback_Activated()
	{
		DoneActivating();
		return;
	}
	stop;
}

state Deactivating
{
	simulated function BeginState()
	{
		Instigator.WeaponPreDeactivate(self);
		// End:0x28
		if(__NFUN_173__(int(ChangeSpeed), int(0)))
		{
			WpnDeactivate();			
		}
		else
		{
			DoneDeactivating();
		}
		__NFUN_362__('Tick');
		return;
	}

	simulated function bool PutDown()
	{
		return true;
		return;
	}

	simulated function bool Reload()
	{
		return false;
		return;
	}

	simulated function WpnIdle()
	{
		return;
	}

	simulated function Destroyed()
	{
		// End:0x41
		if(__NFUN_148__(__NFUN_148__(IsMP(), __NFUN_340__(Instigator, none)), __NFUN_169__(int(Instigator.Role), int(ROLE_Authority))))
		{
			Instigator.FinishWeaponChange();
		}
		super(Inventory).Destroyed();
		OnDestroyed();
		return;
	}

	simulated function DoneDeactivating()
	{
		local PlayerPawn Player;

		DetachSupportActors();
		Instigator.WeaponPostDeactivate(self);
		Player = PlayerPawn(Instigator);
		// End:0x9C
		if(__NFUN_340__(Player, none))
		{
			// End:0x9C
			if(__NFUN_148__(__NFUN_148__(__NFUN_172__(int(Player.Role), int(ROLE_AutonomousProxy)), __NFUN_148__(Player.bToggleZoom, __NFUN_145__(Player.bDontAllowToggleZoom))), Player.bIZoom))
			{
				Player.ZoomUp();
			}
		}
		bNoNativeTick = true;
		TickStyle = 0;
		bActive = false;
		TryState('Waiting');
		bAttemptWeaponDown = false;
		Instigator.FinishWeaponChange();
		return;
	}

	k2call simulated function WeaponCallback_Deactivated()
	{
		DoneDeactivating();
		return;
	}
	stop;
}

state idle
{
	simulated event BeginState()
	{
		// End:0x16
		if(__NFUN_148__(bAttemptWeaponDown, PutDown()))
		{
			return;
		}
		// End:0x2C
		if(__NFUN_148__(bAttemptWeaponReload, Reload()))
		{
			return;
		}
		// End:0x42
		if(__NFUN_150__(AttemptFire(), AttemptMelee()))
		{
			return;
		}
		// End:0x58
		if(__NFUN_148__(bAttemptWeaponDown, PutDown()))
		{
			return;
		}
		// End:0x86
		if(Instigator.IsLocallyControlled())
		{
			// End:0x86
			if(GottaReload())
			{
				Instigator.Reload();
				return;
			}
		}
		WpnIdle();
		return;
	}
	stop;
}

state Waiting
{
	simulated function BeginState()
	{
		// End:0x49
		if(__NFUN_148__(__NFUN_174__(WeaponConfig.default.ReloadCount, 0), __NFUN_148__(__NFUN_340__(Ammo, none), __NFUN_204__(Ammo.Charge, float(0)))))
		{
			__NFUN_607__(3, true, 'DoIdleReload');
		}
		WpnIdle();
		return;
	}

	simulated function EndState()
	{
		__NFUN_608__('DoIdleReload');
		return;
	}

	function DoIdleReload()
	{
		ReloadAmmo(WeaponConfig.default.ReloadCount, true);
		// End:0x37
		if(__NFUN_173__(AmmoLoaded, WeaponConfig.default.ReloadCount))
		{
			__NFUN_608__('DoIdleReload');
		}
		return;
	}
	stop;
}

state WaitingForReplication
{
	simulated function CheckForReplication()
	{
		// End:0x11
		if(__NFUN_145__(IncompleteReplication()))
		{
			ClientMaybeWeaponSwitch();
		}
		return;
	}

	simulated function BeginState()
	{
		__NFUN_607__(0.05, true, 'CheckForReplication');
		return;
	}

	simulated function EndState()
	{
		__NFUN_608__('CheckForReplication');
		return;
	}
	stop;
}

defaultproperties
{
	bPlayActivateSound=true
	bDeactivationAllowed=true
	bAutoSwitchOnPickup=true
	WeaponConfig='WeaponConfig'
	AmmoLoaded=1
	DOFWeapDist=6
	DOFWeapDistDelta=1.5
	UserInsertClipMount=(bDontActuallyMount=false,bHideable=true,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=true,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=true,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=1.293258E-41,Y=3.079134E-17,Z=0),Z=0)
	WeaponClipMount=(bDontActuallyMount=false,bHideable=true,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=true,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=true,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=1.293258E-41,Y=3.079134E-17,Z=0),Z=0)
	FireHitEffectSystemSizeScaleScale=1
	FireHitEffectLifetimeScale=1
	MinTimeBetweenShellCasings=0.2
	bActivatable=true
	bActivationRequiresHands=true
	ChargeDisplayType=3
	MultiplePickupBehavior=3
	bIsWeapon=true
	bNoNativeTick=true
	bTickOnlyWhenOwnerShould=true
	bHasPostMountUpdate=true
	bReplicateTicking=false
	Mass=15
	MountType=2
	MountMeshItem=mount_handright
	DrawType=2
	TransientSoundVolume=0.85
	TransientSoundRadius=2048
	TransientSoundInnerRadius=512
}