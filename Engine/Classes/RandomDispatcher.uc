/*******************************************************************************
 * RandomDispatcher generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class RandomDispatcher extends Triggers
	collapsecategories
	notplaceable
	hidecategories(Filter,Interactivity,Karma,Lighting,Networking,Sound,Collision,Interactivity,Karma,Lighting,Mounting,movement,Sound,Filter,Networking,Interpolation);

var() noexport deprecated array<name> OutEvents "Random events to pick from.";
var() noexport bool OnlyPickOnce "Only pick each event once.";
var() noexport bool ResetOnEmpty "Reset when all triggers have been picked once. Only has meaning when OnlyPickOnce is true. Ignored by RepeatPattern.";
var() noexport bool RepeatPattern "When the dispatcher starts up, it generates a random pattern and uses that everytime over and over.";
var array<byte> OutEventUsed;
var int PatternIndex;

function bool VerifySelf()
{
	local int i;

	i = __NFUN_166__(string(OutEvents), 1);
	J0x0F:

	// End:0x46 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x3C
		if(__NFUN_341__(OutEvents[i], 'None'))
		{
			OutEvents.Remove(i, 1);
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x0F;
	}
	// End:0xD6
	if(__NFUN_173__(string(OutEvents), 0))
	{
		InvalidAlert(__NFUN_302__(__NFUN_302__(__NFUN_302__(__NFUN_302__("Warning: ", string(self)), " had 0 OutEvents and realized his life wasn't worth living. "), string(self)), " has left the game with -1 frags."));
		return false;
	}
	// End:0xE8
	if(RepeatPattern)
	{
		GeneratePatternList();		
	}
	else
	{
		// End:0xFE
		if(OnlyPickOnce)
		{
			OutEventUsed.Insert(0, string(OutEvents));
		}
	}
	return super(Actor).VerifySelf();
	return;
}

final function GeneratePatternList()
{
	local int i;
	local array<name> TempEventList;

	OnlyPickOnce = true;
	OutEventUsed.Insert(0, string(OutEvents));
	TempEventList.Insert(0, string(OutEvents));
	i = 0;
	J0x29:

	// End:0x55 [Loop If]
	if(__NFUN_169__(i, string(OutEvents)))
	{
		TempEventList[i] = PickOutEvent();
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x29;
	}
	OutEvents = TempEventList;
	OutEventUsed.Empty();
	return;
}

event Trigger(Actor Other, Pawn EventInstigator)
{
	// End:0x22
	if(RepeatPattern)
	{
		GlobalTrigger(PickPatternEvent(), EventInstigator, Other);		
	}
	else
	{
		GlobalTrigger(PickOutEvent(), EventInstigator, Other);
	}
	return;
}

final function ClearUsedList()
{
	local int i;

	i = 0;
	J0x07:

	// End:0x2F [Loop If]
	if(__NFUN_169__(i, string(OutEventUsed)))
	{
		OutEventUsed[i] = 0;
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

final function name FoundOutEvent(int Index)
{
	// End:0x17
	if(OnlyPickOnce)
	{
		OutEventUsed[Index] = 1;
	}
	return OutEvents[Index];
	return;
}

final function name PickOutEvent()
{
	local int i, TestValue;

	TestValue = __NFUN_187__(string(OutEvents));
	// End:0x25
	if(__NFUN_145__(OnlyPickOnce))
	{
		return FoundOutEvent(TestValue);
	}
	J0x25:

	// End:0x6E [Loop If]
	if(__NFUN_148__(__NFUN_169__(i, string(OutEvents)), bool(OutEventUsed[TestValue])))
	{
		__NFUN_184__(i);
		__NFUN_184__(TestValue);
		// End:0x6B
		if(__NFUN_173__(TestValue, string(OutEvents)))
		{
			TestValue = 0;
		}
		// [Loop Continue]
		goto J0x25;
	}
	// End:0x8A
	if(__NFUN_169__(i, string(OutEvents)))
	{
		return FoundOutEvent(TestValue);
	}
	// End:0xA8
	if(ResetOnEmpty)
	{
		ClearUsedList();
		return FoundOutEvent(__NFUN_187__(string(OutEvents)));
	}
	__NFUN_614__();
	return;
}

final function name PickPatternEvent()
{
	__NFUN_184__(PatternIndex);
	// End:0x1E
	if(__NFUN_173__(PatternIndex, string(OutEvents)))
	{
		PatternIndex = 0;
	}
	return OutEvents[PatternIndex];
	return;
}

defaultproperties
{
	Texture=Texture'S_RandomDispatch'
}