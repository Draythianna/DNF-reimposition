/*******************************************************************************
 * LCDHelper generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class LCDHelper extends Object
	native;

cpptext
{
// Stripped
}

struct SChapterEntry
{
	var string URL;
	var array<Object.EEgoAwardID> Awards;
};

var() array<SChapterEntry> Chapters;
var() array<string> SPMapNames;
var transient string EgoString;
var transient string DigsUnlockString;
var transient string ChangeRoomUnlockString;
var transient string HeadString;
var transient string FaceString;
var transient string ShirtString;
var transient string TitleString;
var transient string PlayersString;
var transient string LevelString;
var transient string ScoreString;
var transient string PingString;
var transient string KillsString;
var transient string DeathsString;
var transient string KDRatioString;
var transient string CachedServerName;
var transient int CachedLevel;
var transient int CachedScore;
var transient int CachedPing;
var transient int CachedKills;
var transient int CachedDeaths;
var transient int CachedNumPlayers;
var transient float CachedXPPercent;
var transient int CachedXPCurrent;
var transient int CachedXPNeeded;
var transient float NextMPTickUpdate;
var float MPTickUpdateRateSeconds;
var localized string PieceOfCakeDifficultyString;
var localized string LetsRockDifficultyString;
var localized string ComeGetSomeDifficultyString;
var localized string DamnImGoodDifficultyString;

// Export ULCDHelper::execAddMPMapName(FFrame&, void* const)
native function AddMPMapName(int id, string MapName)
{
	//native.id;
	//native.MapName;	
}

// Export ULCDHelper::execNotifyLoading(FFrame&, void* const)
native function NotifyLoading(bool bLoading)
{
	//native.bLoading;	
}

// Export ULCDHelper::execSPSetMap(FFrame&, void* const)
native function SPSetMap(string Text)
{
	//native.Text;	
}

// Export ULCDHelper::execSPSetEgo(FFrame&, void* const)
native function SPSetEgo(string Text)
{
	//native.Text;	
}

// Export ULCDHelper::execSPSetEgoAwardsForLevel(FFrame&, void* const)
native function SPSetEgoAwardsForLevel(string MapName)
{
	//native.MapName;	
}

// Export ULCDHelper::execSPSetCheat(FFrame&, void* const)
native function SPSetCheat(string Text)
{
	//native.Text;	
}

// Export ULCDHelper::execSPSetGodMode(FFrame&, void* const)
native function SPSetGodMode(string Text, bool Enabled)
{
	//native.Text;
	//native.Enabled;	
}

// Export ULCDHelper::execSPSetInfiniteAmmo(FFrame&, void* const)
native function SPSetInfiniteAmmo(string Text, bool Enabled)
{
	//native.Text;
	//native.Enabled;	
}

// Export ULCDHelper::execSPSetInstaGib(FFrame&, void* const)
native function SPSetInstaGib(string Text, bool Enabled)
{
	//native.Text;
	//native.Enabled;	
}

// Export ULCDHelper::execSPMirrorMode(FFrame&, void* const)
native function SPMirrorMode(string Text, bool Enabled)
{
	//native.Text;
	//native.Enabled;	
}

// Export ULCDHelper::execSPGrayscaleMode(FFrame&, void* const)
native function SPGrayscaleMode(string Text, bool Enabled)
{
	//native.Text;
	//native.Enabled;	
}

// Export ULCDHelper::execSPGameSpeed(FFrame&, void* const)
native function SPGameSpeed(string Text, bool DefaultValue)
{
	//native.Text;
	//native.DefaultValue;	
}

// Export ULCDHelper::execSPHeadScale(FFrame&, void* const)
native function SPHeadScale(string Text, bool DefaultValue)
{
	//native.Text;
	//native.DefaultValue;	
}

// Export ULCDHelper::execSPClassicFreezeRay(FFrame&, void* const)
native function SPClassicFreezeRay(string Text, bool Enabled)
{
	//native.Text;
	//native.Enabled;	
}

// Export ULCDHelper::execSPUse4Weapons(FFrame&, void* const)
native function SPUse4Weapons(string Text, bool Enabled)
{
	//native.Text;
	//native.Enabled;	
}

// Export ULCDHelper::execMPSetMap(FFrame&, void* const)
native function MPSetMap(string Text)
{
	//native.Text;	
}

// Export ULCDHelper::execDigsSetUnlocks(FFrame&, void* const)
native function DigsSetUnlocks(int Unlocked, int Locked)
{
	//native.Unlocked;
	//native.Locked;	
}

// Export ULCDHelper::execChangeRoomSetUnlocks(FFrame&, void* const)
native function ChangeRoomSetUnlocks(int NumHatsUnlocked, int NumHatsLocked, int NumSunglassesUnlocked, int NumSunglassesLocked, int NumShirtsUnlocked, int NumShirtsLocked, int NumTitlesUnlocked, int NumTitlesLocked)
{
	//native.NumHatsUnlocked;
	//native.NumHatsLocked;
	//native.NumSunglassesUnlocked;
	//native.NumSunglassesLocked;
	//native.NumShirtsUnlocked;
	//native.NumShirtsLocked;
	//native.NumTitlesUnlocked;
	//native.NumTitlesLocked;	
}

event bool HasDiscoveredEgoAward(int AwardID)
{
	local int Found;

	__NFUN_354__(__NFUN_148__(__NFUN_172__(AwardID, 0), __NFUN_171__(AwardID, 255)));
	__NFUN_378__("EgoAwards", string(__NFUN_365__(Enum'EEgoAwardID', AwardID)), Found, "Progress.ini");
	return __NFUN_174__(Found, 0);
	return;
}
