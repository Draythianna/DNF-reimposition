/*******************************************************************************
 * TriggerSpawn generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class TriggerSpawn extends Triggers
	collapsecategories
	notplaceable
	hidecategories(Filter,Interactivity,Karma,Lighting,Networking,Sound);

var() class<Actor> actorType;
var() array< class<Actor> > actorTypes;
var() name ActorTag;
var() deprecated name actorEvent;
var() bool NewbHidden;
var() bool AssignHidden;
var() bool AssignLifeSpan;
var() float NewLifeSpan;
var() bool AssignDrawScale;
var() float NewDrawscale;
var() bool AssignPhysics;
var() Object.EPhysics NewPhysics;
var() noexport bool InheritVelocity "If true, will add velocity from the highest MountParent or from this Actor if no MountParent is specified.";
var() bool AssignVelocity;
var() Vector NewVelocity;
var() bool AssignAcceleration;
var() Vector NewAcceleration;
var() bool AssignSpeed;
var() float NewSpeed;
var() bool AssignAccelerationSpeed;
var() float NewAccelerationSpeed;
var() Vector VelocityVariance;
var() noexport deprecated TriggerAssign AutoAssignActor "When this is set, this TriggerAssign will be automatically executed on any actor that is spawned via this TriggerSpawn.";
var() Object.EFloatModifier MassModifier;
var() float MassValue;
var(CollisionAssign) bool AssignCollisionRadius;
var(CollisionAssign) float NewCollisionRadius;
var(CollisionAssign) bool AssignCollisionHeight;
var(CollisionAssign) float NewCollisionHeight;
var(CollisionAssign) bool AssignbCollideActors;
var(CollisionAssign) const bool NewbCollideActors;
var(CollisionAssign) bool AssignbCollideWorld;
var(CollisionAssign) bool NewbCollideWorld;
var(CollisionAssign) bool AssignbBlockActors;
var(CollisionAssign) bool NewbBlockActors;
var(CollisionAssign) bool AssignbBlockPlayers;
var(CollisionAssign) bool NewbBlockPlayers;
var(CollisionAssign) bool AssignbTraceUsable;
var(CollisionAssign) bool NewbTraceUsable;
var(CollisionAssign) Object.EBitModifier bCollisionAssumeValidModifier;
var() name SpawnWhenInCollisionRadius;
var() noexport float SpawnDelay "How long to delay before actually spawning stuff.";
var() noexport float SpawnDelayVariance "Variance to apply to the spawn delay.";
var() float DelayToNextSpawn;
var() name TargetActorName;
var() bool TargetNearestPawn;
var() bool DestroyAfterSpawn;
var float LastSpawn;

function PostVerifySelf()
{
	super(Actor).PostVerifySelf();
	// End:0x1D
	if(__NFUN_342__(SpawnWhenInCollisionRadius, 'None'))
	{
		__NFUN_621__(true);		
	}
	else
	{
		__NFUN_621__(false);
	}
	return;
}

final function DoSpawnWrapper()
{
	DoSpawn();
	return;
}

function Actor DoSpawn()
{
	local Actor A, a2, velActor;
	local name velBone;
	local array<Actor> Targets;

	// End:0x22
	if(__NFUN_201__(__NFUN_198__(LastSpawn, DelayToNextSpawn), Level.GameTimeSeconds))
	{
		return none;
	}
	LastSpawn = Level.GameTimeSeconds;
	// End:0x57
	if(__NFUN_170__(string(actorTypes), 0))
	{
		actorType = actorTypes[__NFUN_187__(string(actorTypes))];
	}
	// End:0x552
	if(__NFUN_340__(actorType, none))
	{
		A = __NFUN_615__(actorType,, ActorTag,,,, true);
		// End:0xCE
		if(__NFUN_339__(A, none))
		{
			__NFUN_355__(__NFUN_302__(__NFUN_302__(__NFUN_302__(string(self), ": spawn error: "), string(actorType)), " didn't survive being spawned."));
			return none;
		}
		// End:0xEF
		if(__NFUN_340__(AutoAssignActor, none))
		{
			AutoAssignActor.DoAssign(A);
		}
		A.Event = actorEvent;
		// End:0x120
		if(AssignHidden)
		{
			A.__NFUN_590__(NewbHidden);
		}
		// End:0x13E
		if(AssignLifeSpan)
		{
			A.LifeSpan = NewLifeSpan;
		}
		// End:0x159
		if(AssignPhysics)
		{
			A.__NFUN_642__(NewPhysics);
		}
		// End:0x177
		if(AssignVelocity)
		{
			A.Velocity = NewVelocity;
		}
		// End:0x195
		if(AssignAcceleration)
		{
			A.Acceleration = NewAcceleration;
		}
		// End:0x1BB
		if(AssignSpeed)
		{
			A.Velocity = __NFUN_234__(Vector(Rotation), NewSpeed);
		}
		// End:0x1E1
		if(AssignAccelerationSpeed)
		{
			A.Acceleration = __NFUN_234__(Vector(Rotation), NewAccelerationSpeed);
		}
		// End:0x1FC
		if(AssignDrawScale)
		{
			A.__NFUN_591__(NewDrawscale);
		}
		__NFUN_209__(A.Velocity.X, __NFUN_195__(VelocityVariance.X, __NFUN_222__()));
		__NFUN_209__(A.Velocity.Y, __NFUN_195__(VelocityVariance.Y, __NFUN_222__()));
		__NFUN_209__(A.Velocity.Z, __NFUN_195__(VelocityVariance.Z, __NFUN_222__()));
		// End:0x292
		if(AssignCollisionRadius)
		{
			A.__NFUN_620__(NewCollisionRadius, A.CollisionHeight);
		}
		// End:0x2BC
		if(AssignCollisionHeight)
		{
			A.__NFUN_620__(A.CollisionRadius, NewCollisionHeight);
		}
		// End:0x2DB
		if(AssignbCollideActors)
		{
			A.__NFUN_621__(NewbCollideActors);
		}
		// End:0x2FA
		if(AssignbBlockActors)
		{
			A.__NFUN_621__(, bBlockActors);
		}
		// End:0x319
		if(AssignbBlockPlayers)
		{
			A.__NFUN_621__(,, bBlockPlayers);
		}
		// End:0x339
		if(AssignbCollideWorld)
		{
			A.__NFUN_621__(,,,, NewbCollideWorld);
		}
		// End:0x359
		if(AssignbTraceUsable)
		{
			A.bTraceUsable = NewbTraceUsable;
		}
		A.bCollisionAssumeValid = __NFUN_346__(bCollisionAssumeValidModifier, A.bCollisionAssumeValid);
		A.__NFUN_639__(__NFUN_348__(MassModifier, A.Mass, MassValue));
		// End:0x3D7
		if(TargetNearestPawn)
		{
			A.Target = Pawn(FindAnyActor(class'Pawn'));			
		}
		else
		{
			// End:0x43B
			if(__NFUN_342__(TargetActorName, 'None'))
			{
				// End:0x410
				foreach __NFUN_747__(class'Actor', a2, TargetActorName)
				{
					Targets[Targets.Add(1)] = a2;					
				}				
				// End:0x43B
				if(__NFUN_170__(string(Targets), 0))
				{
					A.Target = Targets[__NFUN_187__(string(Targets))];
				}
			}
		}
		// End:0x546
		if(InheritVelocity)
		{
			velActor = self;
			velBone = 'None';
			J0x456:

			// End:0x4BF [Loop If]
			if(__NFUN_340__(velActor.MountParent, none))
			{
				// End:0x49C
				if(__NFUN_173__(int(velActor.MountType), int(2)))
				{
					velBone = velActor.MountMeshItem;					
				}
				else
				{
					velBone = 'None';
				}
				velActor = velActor.MountParent;
				// [Loop Continue]
				goto J0x456;
			}
			// End:0x526
			if(__NFUN_148__(velActor.bIsKarmaActor, __NFUN_173__(int(velActor.Physics), int(18))))
			{
				__NFUN_249__(A.Velocity, KarmaActor(velActor).__NFUN_798__(A.Location, velBone));				
			}
			else
			{
				__NFUN_249__(A.Velocity, velActor.Velocity);
			}
		}
		// End:0x552
		if(DestroyAfterSpawn)
		{
			__NFUN_614__();
		}
	}
	return A;
	return;
}

event Touch(Actor Other)
{
	super(Actor).Touch(Other);
	// End:0x2B
	if(__NFUN_341__(Other.Tag, SpawnWhenInCollisionRadius))
	{
		DoSpawn();
	}
	return;
}

event Trigger(Actor Other, Pawn EventInstigator)
{
	super(Actor).Trigger(Other, EventInstigator);
	// End:0x36
	if(__NFUN_201__(SpawnDelay, float(0)))
	{
		__NFUN_607__(__NFUN_226__(SpawnDelay, SpawnDelayVariance), false, 'DoSpawnWrapper', true, false);		
	}
	else
	{
		DoSpawn();
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	local int i;

	PrecacheIndex.__NFUN_1266__(actorType);
	i = __NFUN_166__(string(actorTypes), 1);
	J0x21:

	// End:0x4E [Loop If]
	if(__NFUN_172__(i, 0))
	{
		PrecacheIndex.__NFUN_1266__(actorTypes[i]);
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x21;
	}
	return;
}

defaultproperties
{
	bDirectional=true
	Texture=Texture'S_TriggerSpawn'
}