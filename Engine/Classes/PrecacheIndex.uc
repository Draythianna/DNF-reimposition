/*******************************************************************************
 * PrecacheIndex generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PrecacheIndex extends Object
	native;

struct AttenuationMapInfo
{
	var() Texture Texture;
	var() bool bBoxMode;
};

struct BumpMapInfo
{
	var() Texture NormalMap;
	var() Texture HeightMap;
	var() Texture SpecularMap;
	var() float BumpScale;
	var() float SpecularScale;
	var() bool bInvertBumps;
	var() bool bEMBM;
};

struct AnimationControllerInfo
{
	var() class<AnimationControllerEx> Controller;
	var() array<Mesh> Meshes;
};

struct SMapInfo
{
	var() name Map;
	var() array<string> Weapons;
	var() bool bIsMP;
	var() bool bPlayerCanBeShrunk;
};

var() array<StaticMesh> StaticMeshes;
var() array<Mesh> Meshes;
var() array<Texture> Textures;
var() array<AttenuationMapInfo> AttenuationMaps;
var() array<BumpMapInfo> BumpMaps;
var() array<Cubemap> CubeMaps;
var() array<Sound> Sounds;
var() array<string> Music;
var() array< class<DamageType> > DamageTypes;
var() array< class<Material> > MaterialClasses;
var() array<Object.EFootstepCategory> FootstepCategories;
var Level Level;
var bool bIsMP;
var bool bPlayerCanBeShrunk;
var string MapName;
var array< class<Actor> > ActorClasses;
var array<MaterialEx> Materials;
var array<name> PawnAnimations;
var array<AnimationControllerInfo> AnimationControllers;
var array<string> AnimationResources;
var array< class<Weapon> > WeaponClasses;
var array<Object> ProcessedObjects;
var class<Actor> CorpseClass;
var array<SMapInfo> MapInfo;

// Export UPrecacheIndex::execRegisterActorClass(FFrame&, void* const)
native(1266) final function RegisterActorClass(class<Actor> ActorClass)
{
	//native.ActorClass;	
}

// Export UPrecacheIndex::execRegisterRenderObject(FFrame&, void* const)
native(1267) final function RegisterRenderObject(Primitive RenderObject, optional Actor Owner)
{
	//native.RenderObject;
	//native.Owner;	
}

// Export UPrecacheIndex::execRegisterMountedActorPrefab(FFrame&, void* const)
native(1268) final function RegisterMountedActorPrefab(SMountedActorPrefab MountedActorPrefab)
{
	//native.MountedActorPrefab;	
}

// Export UPrecacheIndex::execRegisterMaterialEx(FFrame&, void* const)
native(1269) final function RegisterMaterialEx(MaterialEx MaterialEx)
{
	//native.MaterialEx;	
}

// Export UPrecacheIndex::execRegisterTexture(FFrame&, void* const)
native(1270) final function RegisterTexture(Texture Texture)
{
	//native.Texture;	
}

// Export UPrecacheIndex::execRegisterAttenuationMap(FFrame&, void* const)
native(1271) final function RegisterAttenuationMap(Texture Texture, bool bBoxMode)
{
	//native.Texture;
	//native.bBoxMode;	
}

// Export UPrecacheIndex::execRegisterBumpMap(FFrame&, void* const)
native(1272) final function RegisterBumpMap(Texture NormalMap, Texture HeightMap, Texture SpecularMap, float BumpScale, float SpecularScale, optional bool bInvertBumps, optional bool bEMBM)
{
	//native.NormalMap;
	//native.HeightMap;
	//native.SpecularMap;
	//native.BumpScale;
	//native.SpecularScale;
	//native.bInvertBumps;
	//native.bEMBM;	
}

// Export UPrecacheIndex::execRegisterCubeMap(FFrame&, void* const)
native(1273) final function RegisterCubeMap(Cubemap Cubemap)
{
	//native.Cubemap;	
}

// Export UPrecacheIndex::execRegisterSound(FFrame&, void* const)
native(1274) final function RegisterSound(Sound Sound)
{
	//native.Sound;	
}

// Export UPrecacheIndex::execRegisterAmbientSoundInfo(FFrame&, void* const)
native(1275) final function RegisterAmbientSoundInfo(SAmbientSoundInfo SoundInfo)
{
	//native.SoundInfo;	
}

// Export UPrecacheIndex::execRegisterSoundInfo(FFrame&, void* const)
native(1276) final function RegisterSoundInfo(SSoundInfo SoundInfo)
{
	//native.SoundInfo;	
}

// Export UPrecacheIndex::execRegisterVoicePackEntry(FFrame&, void* const)
native(1277) final function RegisterVoicePackEntry(class<CharacterVoicePack> VoicePack, name EntryName)
{
	//native.VoicePack;
	//native.EntryName;	
}

// Export UPrecacheIndex::execRegisterMusic(FFrame&, void* const)
native(1278) final function RegisterMusic(string Music)
{
	//native.Music;	
}

// Export UPrecacheIndex::execRegisterDamageType(FFrame&, void* const)
native(1279) final function RegisterDamageType(class<DamageType> DamageType)
{
	//native.DamageType;	
}

// Export UPrecacheIndex::execRegisterMaterialClass(FFrame&, void* const)
native(1280) final function RegisterMaterialClass(class<Material> MaterialClass)
{
	//native.MaterialClass;	
}

// Export UPrecacheIndex::execRegisterPawnAnimation(FFrame&, void* const)
native(1281) final function RegisterPawnAnimation(name AnimationName)
{
	//native.AnimationName;	
}

// Export UPrecacheIndex::execRegisterAnimationController(FFrame&, void* const)
native(1282) final function RegisterAnimationController(class<AnimationControllerEx> AnimationController, Mesh AssociatedMesh)
{
	//native.AnimationController;
	//native.AssociatedMesh;	
}

// Export UPrecacheIndex::execRegisterAnimationControllerEntry(FFrame&, void* const)
native(1283) final function RegisterAnimationControllerEntry(name EntryName, class<AnimationControllerEx> AnimationController, Mesh AssociatedMesh)
{
	//native.EntryName;
	//native.AnimationController;
	//native.AssociatedMesh;	
}

// Export UPrecacheIndex::execRegisterAnimation(FFrame&, void* const)
native(1284) final function RegisterAnimation(Mesh Mesh, name AnimationName)
{
	//native.Mesh;
	//native.AnimationName;	
}

// Export UPrecacheIndex::execWeaponIsUsableByPlayer(FFrame&, void* const)
native(1285) final function bool WeaponIsUsableByPlayer(Weapon Weapon)
{
	//native.Weapon;	
}

// Export UPrecacheIndex::execWeaponClassIsUsableByPlayer(FFrame&, void* const)
native(1286) final function bool WeaponClassIsUsableByPlayer(class<Weapon> WeaponClass)
{
	//native.WeaponClass;	
}

// Export UPrecacheIndex::execMapHasCoverType(FFrame&, void* const)
native(1287) final function bool MapHasCoverType(ActionPoint.ECoverType CoverType)
{
	//native.CoverType;	
}

// Export UPrecacheIndex::execLogWarning(FFrame&, void* const)
native(1288) final function LogWarning(coerce string Message)
{
	//native.Message;	
}

defaultproperties
{
	CorpseClass='Corpse'
}