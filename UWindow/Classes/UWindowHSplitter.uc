/*******************************************************************************
 * UWindowHSplitter generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UWindowHSplitter extends UWindowWindow;

var UWindowWindow LeftClientWindow;
var UWindowWindow RightClientWindow;
var bool bSizing;
var float SplitPos;
var float MinWinWidth;
var float OldWinWidth;
var float MaxSplitPos;
var bool bRightGrow;
var bool bSizable;

function Created()
{
	super.Created();
	bAlwaysBehind = true;
	SplitPos = __NFUN_196__(WinWidth, float(2));
	MinWinWidth = 24;
	OldWinWidth = WinWidth;
	return;
}

function Paint(Canvas C, float X, float Y)
{
	DrawStretchedTexture(C, SplitPos, 0, 7, WinHeight, class'BlackTexture', 1);
	// End:0xB3
	if(__NFUN_148__(__NFUN_148__(bSizable, __NFUN_203__(X, SplitPos)), __NFUN_202__(X, __NFUN_198__(SplitPos, float(7)))))
	{
		C.Style = 1;
		C.DrawColor.R = 255;
		C.DrawColor.G = 255;
		C.DrawColor.B = 255;		
	}
	else
	{
		C.Style = 1;
		C.DrawColor.R = 150;
		C.DrawColor.G = 150;
		C.DrawColor.B = 150;
	}
	DrawStretchedTexture(C, __NFUN_198__(SplitPos, float(3)), 0, 2, WinHeight, class'WhiteTexture', 1);
	return;
}

function BeforePaint(Canvas C, float X, float Y)
{
	local float NewW, NewH;

	// End:0x35
	if(__NFUN_148__(__NFUN_206__(OldWinWidth, WinWidth), __NFUN_145__(bRightGrow)))
	{
		SplitPos = __NFUN_199__(__NFUN_198__(SplitPos, WinWidth), OldWinWidth);
	}
	SplitPos = __NFUN_227__(SplitPos, MinWinWidth, __NFUN_199__(__NFUN_199__(WinWidth, float(7)), MinWinWidth));
	// End:0x7B
	if(__NFUN_206__(MaxSplitPos, float(0)))
	{
		SplitPos = __NFUN_227__(SplitPos, 0, MaxSplitPos);
	}
	NewW = SplitPos;
	NewH = WinHeight;
	// End:0xDF
	if(__NFUN_150__(__NFUN_206__(NewH, LeftClientWindow.WinHeight), __NFUN_206__(NewW, LeftClientWindow.WinWidth)))
	{
		LeftClientWindow.SetSize(NewW, NewH);
	}
	LeftClientWindow.WinTop = 0;
	LeftClientWindow.WinLeft = 0;
	NewW = __NFUN_199__(__NFUN_199__(WinWidth, SplitPos), float(7));
	// End:0x16E
	if(__NFUN_150__(__NFUN_206__(NewH, RightClientWindow.WinHeight), __NFUN_206__(NewW, RightClientWindow.WinWidth)))
	{
		RightClientWindow.SetSize(NewW, NewH);
	}
	RightClientWindow.WinTop = 0;
	RightClientWindow.WinLeft = __NFUN_198__(SplitPos, float(7));
	OldWinWidth = WinWidth;
	return;
}

function LMouseDown(float X, float Y)
{
	super.LMouseDown(X, Y);
	// End:0x58
	if(__NFUN_148__(__NFUN_148__(bSizable, __NFUN_203__(X, SplitPos)), __NFUN_202__(X, __NFUN_198__(SplitPos, float(7)))))
	{
		bSizing = true;
		Root.CaptureMouse();
	}
	return;
}

function MouseMove(float X, float Y)
{
	// End:0x48
	if(__NFUN_148__(__NFUN_148__(bSizable, __NFUN_203__(X, SplitPos)), __NFUN_202__(X, __NFUN_198__(SplitPos, float(7)))))
	{
		cursor = Root.HSplitCursor;		
	}
	else
	{
		cursor = Root.NormalCursor;
	}
	// End:0x7F
	if(__NFUN_148__(bSizing, bMouseDown))
	{
		SplitPos = X;		
	}
	else
	{
		bSizing = false;
	}
	return;
}

defaultproperties
{
	bSizable=true
}