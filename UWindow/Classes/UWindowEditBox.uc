/*******************************************************************************
 * UWindowEditBox generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UWindowEditBox extends UWindowDialogControl
	dependson(UWindowEditBoxHistory);

var string Value;
var string Value2;
var int CaretOffset;
var int MaxLength;
var float LastDrawTime;
var bool bShowCaret;
var float Offset;
var UWindowDialogControl NotifyOwner;
var bool bNumericOnly;
var bool bAlphaOnly;
var bool bNumericFloat;
var bool bCanEdit;
var bool bAllSelected;
var bool bSelectOnFocus;
var bool bDelayedNotify;
var bool bChangePending;
var bool bControlDown;
var bool bShiftDown;
var bool bHistory;
var bool bKeyDown;
var bool bTextYSet;
var bool bNoShrinkFont;
var UWindowEditBoxHistory HistoryList;
var UWindowEditBoxHistory CurrentHistory;
var bool bProtectValue;
var string ProtectedValue;
var bool bComboBox;

function Created()
{
	super.Created();
	bCanEdit = true;
	bControlDown = false;
	bShiftDown = false;
	MaxLength = 255;
	CaretOffset = 0;
	Offset = 0;
	LastDrawTime = GetLevel().TimeSeconds;
	return;
}

function SetHistory(bool bInHistory)
{
	bHistory = bInHistory;
	// End:0x4D
	if(__NFUN_148__(bHistory, __NFUN_339__(HistoryList, none)))
	{
		HistoryList = new (none) class'UWindowEditBoxHistory';
		HistoryList.SetupSentinel();
		CurrentHistory = none;		
	}
	else
	{
		// End:0x74
		if(__NFUN_148__(__NFUN_145__(bHistory), __NFUN_340__(HistoryList, none)))
		{
			HistoryList = none;
			CurrentHistory = none;
		}
	}
	return;
}

function SetEditable(bool bEditable)
{
	bCanEdit = bEditable;
	return;
}

function SetValue(string NewValue, optional string NewValue2)
{
	Value = NewValue;
	Value2 = NewValue2;
	// End:0x36
	if(__NFUN_170__(CaretOffset, __NFUN_314__(Value)))
	{
		CaretOffset = __NFUN_314__(Value);
	}
	Notify(1);
	return;
}

function Clear()
{
	CaretOffset = 0;
	Value = "";
	Value2 = "";
	bAllSelected = false;
	// End:0x33
	if(bDelayedNotify)
	{
		bChangePending = true;		
	}
	else
	{
		Notify(1);
	}
	return;
}

function SelectAll()
{
	// End:0x36
	if(__NFUN_148__(bCanEdit, __NFUN_309__(Value, "")))
	{
		CaretOffset = __NFUN_314__(Value);
		bAllSelected = true;
		bShowCaret = true;
	}
	return;
}

function string GetValue()
{
	return Value;
	return;
}

function string GetValue2()
{
	return Value2;
	return;
}

function BuildProtectedValue()
{
	local int i;

	ProtectedValue = "";
	i = 0;
	J0x0F:

	// End:0x3C [Loop If]
	if(__NFUN_169__(i, __NFUN_314__(Value)))
	{
		ProtectedValue = __NFUN_302__(ProtectedValue, "*");
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x0F;
	}
	return;
}

function Notify(byte E)
{
	local int i, j;

	// End:0x1D
	if(__NFUN_148__(__NFUN_173__(int(E), 1), bProtectValue))
	{
		BuildProtectedValue();
	}
	// End:0x41
	if(__NFUN_340__(NotifyOwner, none))
	{
		NotifyOwner.Notify(E);		
	}
	else
	{
		super.Notify(E);
	}
	return;
}

function InsertText(string Text)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x3B [Loop If]
	if(__NFUN_169__(i, __NFUN_314__(Text)))
	{
		Insert(byte(__NFUN_322__(__NFUN_316__(Text, i, 1))));
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

function bool Insert(byte C)
{
	local string NewValue;

	NewValue = __NFUN_302__(__NFUN_302__(__NFUN_317__(Value, CaretOffset), __NFUN_321__(int(C))), __NFUN_316__(Value, CaretOffset));
	// End:0x43
	if(__NFUN_170__(__NFUN_314__(NewValue), MaxLength))
	{
		return false;
	}
	__NFUN_184__(CaretOffset);
	Value = NewValue;
	// End:0x69
	if(bDelayedNotify)
	{
		bChangePending = true;		
	}
	else
	{
		Notify(1);
	}
	return true;
	return;
}

function bool Backspace()
{
	local string NewValue;

	// End:0x0D
	if(__NFUN_173__(CaretOffset, 0))
	{
		return false;
	}
	NewValue = __NFUN_302__(__NFUN_317__(Value, __NFUN_166__(CaretOffset, 1)), __NFUN_316__(Value, CaretOffset));
	__NFUN_185__(CaretOffset);
	Value = NewValue;
	// End:0x59
	if(bDelayedNotify)
	{
		bChangePending = true;		
	}
	else
	{
		Notify(1);
	}
	return true;
	return;
}

function bool Delete()
{
	local string NewValue;

	// End:0x14
	if(__NFUN_173__(CaretOffset, __NFUN_314__(Value)))
	{
		return false;
	}
	NewValue = __NFUN_302__(__NFUN_317__(Value, CaretOffset), __NFUN_316__(Value, __NFUN_165__(CaretOffset, 1)));
	Value = NewValue;
	Notify(1);
	return true;
	return;
}

function bool WordLeft()
{
	J0x00:
	// End:0x31 [Loop If]
	if(__NFUN_148__(__NFUN_170__(CaretOffset, 0), __NFUN_308__(__NFUN_316__(Value, __NFUN_166__(CaretOffset, 1), 1), " ")))
	{
		__NFUN_185__(CaretOffset);
		// [Loop Continue]
		goto J0x00;
	}
	J0x31:

	// End:0x62 [Loop If]
	if(__NFUN_148__(__NFUN_170__(CaretOffset, 0), __NFUN_309__(__NFUN_316__(Value, __NFUN_166__(CaretOffset, 1), 1), " ")))
	{
		__NFUN_185__(CaretOffset);
		// [Loop Continue]
		goto J0x31;
	}
	LastDrawTime = GetLevel().TimeSeconds;
	bShowCaret = true;
	return true;
	return;
}

function bool MoveLeft()
{
	// End:0x0D
	if(__NFUN_173__(CaretOffset, 0))
	{
		return false;
	}
	__NFUN_185__(CaretOffset);
	LastDrawTime = GetLevel().TimeSeconds;
	bShowCaret = true;
	return true;
	return;
}

function bool MoveRight()
{
	// End:0x14
	if(__NFUN_173__(CaretOffset, __NFUN_314__(Value)))
	{
		return false;
	}
	__NFUN_184__(CaretOffset);
	LastDrawTime = GetLevel().TimeSeconds;
	bShowCaret = true;
	return true;
	return;
}

function bool WordRight()
{
	J0x00:
	// End:0x35 [Loop If]
	if(__NFUN_148__(__NFUN_169__(CaretOffset, __NFUN_314__(Value)), __NFUN_309__(__NFUN_316__(Value, CaretOffset, 1), " ")))
	{
		__NFUN_184__(CaretOffset);
		// [Loop Continue]
		goto J0x00;
	}
	J0x35:

	// End:0x6A [Loop If]
	if(__NFUN_148__(__NFUN_169__(CaretOffset, __NFUN_314__(Value)), __NFUN_308__(__NFUN_316__(Value, CaretOffset, 1), " ")))
	{
		__NFUN_184__(CaretOffset);
		// [Loop Continue]
		goto J0x35;
	}
	LastDrawTime = GetLevel().TimeSeconds;
	bShowCaret = true;
	return true;
	return;
}

function bool MoveHome()
{
	CaretOffset = 0;
	LastDrawTime = GetLevel().TimeSeconds;
	bShowCaret = true;
	return true;
	return;
}

function bool MoveEnd()
{
	CaretOffset = __NFUN_314__(Value);
	LastDrawTime = GetLevel().TimeSeconds;
	bShowCaret = true;
	return true;
	return;
}

function EditCopy()
{
	// End:0x2C
	if(__NFUN_150__(bAllSelected, __NFUN_145__(bCanEdit)))
	{
		GetPlayerOwner().CopyToClipboard(Value);
	}
	return;
}

function EditPaste()
{
	// End:0x2F
	if(bCanEdit)
	{
		// End:0x18
		if(bAllSelected)
		{
			Clear();
		}
		InsertText(GetPlayerOwner().PasteFromClipboard());
	}
	return;
}

function EditCut()
{
	// End:0x39
	if(bCanEdit)
	{
		// End:0x36
		if(bAllSelected)
		{
			GetPlayerOwner().CopyToClipboard(Value);
			bAllSelected = false;
			Clear();
		}		
	}
	else
	{
		EditCopy();
	}
	return;
}

function KeyType(int Key, float MouseX, float MouseY)
{
	local PlayerPawn P;

	P = GetPlayerOwner();
	// End:0x1BC
	if(bCanEdit)
	{
		// End:0x1BC
		if(__NFUN_145__(bControlDown))
		{
			// End:0x2F
			if(bAllSelected)
			{
				Clear();
			}
			bAllSelected = false;
			// End:0x90
			if(__NFUN_148__(bNumericOnly, bAlphaOnly))
			{
				// End:0x8D
				if(__NFUN_150__(__NFUN_148__(__NFUN_172__(Key, 48), __NFUN_171__(Key, 57)), __NFUN_148__(__NFUN_172__(Key, 64), __NFUN_169__(Key, 128))))
				{
					Insert(byte(Key));
				}				
			}
			else
			{
				// End:0xC2
				if(bNumericOnly)
				{
					// End:0xBF
					if(__NFUN_148__(__NFUN_172__(Key, 48), __NFUN_171__(Key, 57)))
					{
						Insert(byte(Key));
					}					
				}
				else
				{
					// End:0x110
					if(bAlphaOnly)
					{
						// End:0x10D
						if(__NFUN_150__(__NFUN_148__(__NFUN_170__(Key, 64), __NFUN_171__(Key, 90)), __NFUN_148__(__NFUN_170__(Key, 96), __NFUN_171__(Key, 122))))
						{
							Insert(byte(Key));
						}						
					}
					else
					{
						// End:0x139
						if(__NFUN_148__(__NFUN_172__(Key, 32), __NFUN_169__(Key, 128)))
						{
							Insert(byte(Key));							
						}
						else
						{
							// End:0x17C
							if(__NFUN_173__(Key, int(P.8)))
							{
								// End:0x171
								if(bCanEdit)
								{
									// End:0x16B
									if(bAllSelected)
									{
										Clear();										
									}
									else
									{
										Backspace();
									}
								}
								bAllSelected = false;								
							}
							else
							{
								// End:0x1BC
								if(__NFUN_173__(Key, int(P.46)))
								{
									// End:0x1B4
									if(bCanEdit)
									{
										// End:0x1AE
										if(bAllSelected)
										{
											Clear();											
										}
										else
										{
											Delete();
										}
									}
									bAllSelected = false;
								}
							}
						}
					}
				}
			}
		}
	}
	return;
}

function KeyUp(int Key, float X, float Y)
{
	local PlayerPawn P;

	bKeyDown = false;
	P = GetPlayerOwner();
	switch(Key)
	{
		// End:0x37
		case int(P.17):
			bControlDown = false;
			// End:0x55
			break;
		// End:0x52
		case int(P.16):
			bShiftDown = false;
			// End:0x55
			break;
		// End:0xFFFF
		default:
			break;
	}
	return;
}

function KeyDown(int Key, float X, float Y)
{
	local PlayerPawn P;

	bKeyDown = true;
	P = GetPlayerOwner();
	switch(Key)
	{
		// End:0x37
		case int(P.17):
			bControlDown = true;
			// End:0x409
			break;
		// End:0x52
		case int(P.16):
			bShiftDown = true;
			// End:0x409
			break;
		// End:0x65
		case int(P.27):
			// End:0x409
			break;
		// End:0xDF
		case int(P.13):
			// End:0xDC
			if(bCanEdit)
			{
				// End:0xD4
				if(bHistory)
				{
					// End:0xC9
					if(__NFUN_309__(Value, ""))
					{
						CurrentHistory = UWindowEditBoxHistory(HistoryList.Insert(class'UWindowEditBoxHistory'));
						CurrentHistory.HistoryText = Value;
					}
					CurrentHistory = HistoryList;
				}
				Notify(7);
			}
			// End:0x409
			break;
		// End:0x103
		case int(P.236):
			// End:0x100
			if(bCanEdit)
			{
				Notify(14);
			}
			// End:0x409
			break;
		// End:0x127
		case int(P.237):
			// End:0x124
			if(bCanEdit)
			{
				Notify(15);
			}
			// End:0x409
			break;
		// End:0x163
		case int(P.39):
			// End:0x158
			if(bCanEdit)
			{
				// End:0x152
				if(bControlDown)
				{
					WordRight();					
				}
				else
				{
					MoveRight();
				}
			}
			bAllSelected = false;
			// End:0x409
			break;
		// End:0x19F
		case int(P.37):
			// End:0x194
			if(bCanEdit)
			{
				// End:0x18E
				if(bControlDown)
				{
					WordLeft();					
				}
				else
				{
					MoveLeft();
				}
			}
			bAllSelected = false;
			// End:0x409
			break;
		// End:0x227
		case int(P.38):
			// End:0x224
			if(__NFUN_148__(bCanEdit, bHistory))
			{
				bAllSelected = false;
				// End:0x224
				if(__NFUN_148__(__NFUN_340__(CurrentHistory, none), __NFUN_340__(CurrentHistory.Next, none)))
				{
					CurrentHistory = UWindowEditBoxHistory(CurrentHistory.Next);
					SetValue(CurrentHistory.HistoryText);
					MoveEnd();
				}
			}
			// End:0x409
			break;
		// End:0x2AF
		case int(P.40):
			// End:0x2AC
			if(__NFUN_148__(bCanEdit, bHistory))
			{
				bAllSelected = false;
				// End:0x2AC
				if(__NFUN_148__(__NFUN_340__(CurrentHistory, none), __NFUN_340__(CurrentHistory.Prev, none)))
				{
					CurrentHistory = UWindowEditBoxHistory(CurrentHistory.Prev);
					SetValue(CurrentHistory.HistoryText);
					MoveEnd();
				}
			}
			// End:0x409
			break;
		// End:0x2D9
		case int(P.36):
			// End:0x2CE
			if(bCanEdit)
			{
				MoveHome();
			}
			bAllSelected = false;
			// End:0x409
			break;
		// End:0x303
		case int(P.35):
			// End:0x2F8
			if(bCanEdit)
			{
				MoveEnd();
			}
			bAllSelected = false;
			// End:0x409
			break;
		// End:0x313
		case int(P.190):
		// End:0x33C
		case int(P.110):
			// End:0x339
			if(bNumericFloat)
			{
				Insert(byte(__NFUN_322__(".")));
			}
			// End:0x409
			break;
		// End:0xFFFF
		default:
			// End:0x3C3
			if(bControlDown)
			{
				// End:0x370
				if(__NFUN_150__(__NFUN_173__(Key, __NFUN_322__("c")), __NFUN_173__(Key, __NFUN_322__("C"))))
				{
					EditCopy();
				}
				// End:0x398
				if(__NFUN_150__(__NFUN_173__(Key, __NFUN_322__("v")), __NFUN_173__(Key, __NFUN_322__("V"))))
				{
					EditPaste();
				}
				// End:0x3C0
				if(__NFUN_150__(__NFUN_173__(Key, __NFUN_322__("x")), __NFUN_173__(Key, __NFUN_322__("X"))))
				{
					EditCut();
				}				
			}
			else
			{
				// End:0x3F1
				if(__NFUN_340__(NotifyOwner, none))
				{
					NotifyOwner.KeyDown(Key, X, Y);					
				}
				else
				{
					super.KeyDown(Key, X, Y);
				}
			}
			// End:0x409
			break;
			break;
	}
	return;
}

function Click(float X, float Y)
{
	Notify(2);
	return;
}

function LMouseDown(float X, float Y)
{
	super(UWindowWindow).LMouseDown(X, Y);
	Notify(10);
	return;
}

function Paint(Canvas C, float X, float Y)
{
	local float W, h, TextY, YOff;
	local string OriginalValue;

	C.Font = Root.GetFont(Font, C);
	TextSize(C, "A", W, h);
	// End:0x64
	if(__NFUN_145__(bTextYSet))
	{
		TextY = __NFUN_196__(__NFUN_199__(WinHeight, h), float(2));
	}
	// End:0x8A
	if(bProtectValue)
	{
		TextSize(C, ProtectedValue, W, h);		
	}
	else
	{
		TextSize(C, Value, W, h);
	}
	// End:0x14C
	if(__NFUN_148__(__NFUN_148__(__NFUN_201__(W, WinWidth), __NFUN_169__(Font, 6)), __NFUN_145__(bNoShrinkFont)))
	{
		C.Font = Root.GetFont(6, C);
		// End:0x11B
		if(bProtectValue)
		{
			TextSize(C, ProtectedValue, W, h);			
		}
		else
		{
			TextSize(C, Value, W, h);
		}
		TextY = __NFUN_196__(__NFUN_199__(WinHeight, h), float(2));
	}
	// End:0x17A
	if(bProtectValue)
	{
		TextSize(C, __NFUN_317__(ProtectedValue, CaretOffset), W, h);		
	}
	else
	{
		TextSize(C, __NFUN_317__(Value, CaretOffset), W, h);
	}
	C.DrawColor.R = 255;
	C.DrawColor.G = 255;
	C.DrawColor.B = 255;
	// End:0x201
	if(__NFUN_200__(__NFUN_198__(W, Offset), float(0)))
	{
		Offset = __NFUN_194__(W);
	}
	// End:0x24A
	if(__NFUN_201__(__NFUN_198__(W, Offset), __NFUN_199__(WinWidth, float(2))))
	{
		Offset = __NFUN_199__(__NFUN_199__(WinWidth, float(2)), W);
		// End:0x24A
		if(__NFUN_201__(Offset, float(0)))
		{
			Offset = 0;
		}
	}
	C.DrawColor = LookAndFeel.GetTextColor(self);
	// End:0x359
	if(bAllSelected)
	{
		C.Style = GetPlayerOwner().2;
		DrawStretchedTexture(C, __NFUN_198__(Offset, float(1)), __NFUN_199__(__NFUN_198__(TextY, YOff), float(1)), W, h, class'WhiteTexture', 1);
		C.DrawColor.R = byte(__NFUN_176__(int(255), int(C.DrawColor.R)));
		C.DrawColor.G = byte(__NFUN_176__(int(255), int(C.DrawColor.G)));
		C.DrawColor.B = byte(__NFUN_176__(int(255), int(C.DrawColor.B)));
	}
	// End:0x38A
	if(bProtectValue)
	{
		ClipText(C, __NFUN_198__(Offset, float(1)), __NFUN_198__(TextY, YOff), ProtectedValue);		
	}
	else
	{
		ClipText(C, __NFUN_198__(Offset, float(1)), __NFUN_198__(TextY, YOff), Value);
	}
	// End:0x3D2
	if(__NFUN_150__(__NFUN_145__(bHasKeyboardFocus), __NFUN_145__(bCanEdit)))
	{
		bShowCaret = false;		
	}
	else
	{
		// End:0x434
		if(__NFUN_150__(__NFUN_201__(GetLevel().TimeSeconds, __NFUN_198__(LastDrawTime, 0.3)), __NFUN_200__(GetLevel().TimeSeconds, LastDrawTime)))
		{
			LastDrawTime = GetLevel().TimeSeconds;
			bShowCaret = __NFUN_145__(bShowCaret);
		}
	}
	// End:0x467
	if(bShowCaret)
	{
		ClipText(C, __NFUN_199__(__NFUN_198__(Offset, W), float(1)), __NFUN_198__(TextY, YOff), "|");
	}
	return;
}

function Close(optional bool bByParent)
{
	// End:0x19
	if(bChangePending)
	{
		bChangePending = false;
		Notify(1);
	}
	bKeyDown = false;
	super(UWindowWindow).Close(bByParent);
	return;
}

function FocusOtherWindow(UWindowWindow W)
{
	// End:0x19
	if(bChangePending)
	{
		bChangePending = false;
		Notify(1);
	}
	// End:0x3D
	if(__NFUN_340__(NotifyOwner, none))
	{
		NotifyOwner.FocusOtherWindow(W);		
	}
	else
	{
		super(UWindowWindow).FocusOtherWindow(W);
	}
	return;
}

function KeyFocusEnter()
{
	// End:0x1C
	if(__NFUN_148__(bSelectOnFocus, __NFUN_145__(bHasKeyboardFocus)))
	{
		SelectAll();
	}
	super.KeyFocusEnter();
	return;
}

function DoubleClick(float X, float Y)
{
	super(UWindowWindow).DoubleClick(X, Y);
	SelectAll();
	return;
}

function KeyFocusExit()
{
	bAllSelected = false;
	super.KeyFocusExit();
	return;
}

function SetValueProtection(bool bValue)
{
	bProtectValue = bValue;
	BuildProtectedValue();
	return;
}
