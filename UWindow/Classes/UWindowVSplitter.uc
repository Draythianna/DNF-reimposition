/*******************************************************************************
 * UWindowVSplitter generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UWindowVSplitter extends UWindowWindow;

var UWindowWindow TopClientWindow;
var UWindowWindow BottomClientWindow;
var bool bSizing;
var float SplitPos;
var float MinWinHeight;
var float MaxSplitPos;
var float OldWinHeight;
var bool bBottomGrow;
var bool bSizable;

function Created()
{
	super.Created();
	bAlwaysBehind = true;
	SplitPos = __NFUN_196__(WinHeight, float(2));
	MinWinHeight = 24;
	OldWinHeight = WinHeight;
	return;
}

function Paint(Canvas C, float X, float Y)
{
	DrawStretchedTexture(C, 0, SplitPos, WinWidth, 7, class'BlackTexture', 1);
	C.Style = 1;
	// End:0xB3
	if(__NFUN_148__(__NFUN_148__(bSizable, __NFUN_203__(Y, SplitPos)), __NFUN_202__(Y, __NFUN_198__(SplitPos, float(7)))))
	{
		C.DrawColor.R = 200;
		C.DrawColor.G = 200;
		C.DrawColor.B = 200;		
	}
	else
	{
		C.DrawColor.R = 150;
		C.DrawColor.G = 150;
		C.DrawColor.B = 150;
	}
	DrawStretchedTexture(C, 0, __NFUN_198__(SplitPos, float(3)), WinWidth, 2, class'WhiteTexture', 1);
	return;
}

function BeforePaint(Canvas C, float X, float Y)
{
	local float NewW, NewH;

	// End:0x35
	if(__NFUN_148__(__NFUN_206__(OldWinHeight, WinHeight), __NFUN_145__(bBottomGrow)))
	{
		SplitPos = __NFUN_199__(__NFUN_198__(SplitPos, WinHeight), OldWinHeight);
	}
	SplitPos = __NFUN_227__(SplitPos, MinWinHeight, __NFUN_199__(__NFUN_199__(WinHeight, float(7)), MinWinHeight));
	// End:0x7B
	if(__NFUN_206__(MaxSplitPos, float(0)))
	{
		SplitPos = __NFUN_227__(SplitPos, 0, MaxSplitPos);
	}
	NewW = WinWidth;
	NewH = SplitPos;
	// End:0xDF
	if(__NFUN_150__(__NFUN_206__(NewW, TopClientWindow.WinWidth), __NFUN_206__(NewH, TopClientWindow.WinHeight)))
	{
		TopClientWindow.SetSize(NewW, NewH);
	}
	NewH = __NFUN_199__(__NFUN_199__(WinHeight, SplitPos), float(7));
	// End:0x144
	if(__NFUN_150__(__NFUN_206__(NewW, BottomClientWindow.WinWidth), __NFUN_206__(NewH, BottomClientWindow.WinHeight)))
	{
		BottomClientWindow.SetSize(NewW, NewH);
	}
	BottomClientWindow.WinTop = __NFUN_198__(SplitPos, float(7));
	BottomClientWindow.WinLeft = 0;
	OldWinHeight = WinHeight;
	return;
}

function LMouseDown(float X, float Y)
{
	super.LMouseDown(X, Y);
	// End:0x58
	if(__NFUN_148__(__NFUN_148__(bSizable, __NFUN_203__(Y, SplitPos)), __NFUN_202__(Y, __NFUN_198__(SplitPos, float(7)))))
	{
		bSizing = true;
		Root.CaptureMouse();
	}
	return;
}

function MouseMove(float X, float Y)
{
	// End:0x48
	if(__NFUN_148__(__NFUN_148__(bSizable, __NFUN_203__(Y, SplitPos)), __NFUN_202__(Y, __NFUN_198__(SplitPos, float(7)))))
	{
		cursor = Root.VSplitCursor;		
	}
	else
	{
		cursor = Root.NormalCursor;
	}
	// End:0x7F
	if(__NFUN_148__(bSizing, bMouseDown))
	{
		SplitPos = Y;		
	}
	else
	{
		bSizing = false;
	}
	return;
}

defaultproperties
{
	bSizable=true
}