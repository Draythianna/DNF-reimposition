/*******************************************************************************
 * UWindowHScrollbar generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UWindowHScrollbar extends UWindowWindow
	dependson(UWindowSBLeftButton)
	dependson(UWindowSBRightButton);

var UWindowSBLeftButton LeftButton;
var UWindowSBRightButton RightButton;
var bool bDisabled;
var float MinPos;
var float MaxPos;
var float MaxVisible;
var float pos;
var float ThumbStart;
var float ThumbWidth;
var float NextClickTime;
var float DragX;
var bool bDragging;
var float ScrollAmount;

function Show(float P)
{
	// End:0x0E
	if(__NFUN_200__(P, float(0)))
	{
		return;
	}
	// End:0x26
	if(__NFUN_201__(P, __NFUN_198__(MaxPos, MaxVisible)))
	{
		return;
	}
	J0x26:

	// End:0x4B [Loop If]
	if(__NFUN_200__(P, pos))
	{
		// End:0x48
		if(__NFUN_145__(Scroll(-1)))
		{
			// [Explicit Break]
			goto J0x4B;
		}
		// [Loop Continue]
		goto J0x26;
	}
	J0x4B:

	// End:0x7B [Loop If]
	if(__NFUN_201__(__NFUN_199__(P, pos), __NFUN_199__(MaxVisible, float(1))))
	{
		// End:0x78
		if(__NFUN_145__(Scroll(1)))
		{
			// [Explicit Break]
			goto J0x7B;
		}
		// [Loop Continue]
		goto J0x4B;
	}
	J0x7B:

	return;
}

function bool Scroll(float Delta)
{
	local float OldPos;

	OldPos = pos;
	pos = __NFUN_198__(pos, Delta);
	CheckRange();
	return __NFUN_204__(pos, __NFUN_198__(OldPos, Delta));
	return;
}

function SetRange(float NewMinPos, float NewMaxPos, float NewMaxVisible, optional float NewScrollAmount)
{
	// End:0x17
	if(__NFUN_204__(NewScrollAmount, float(0)))
	{
		NewScrollAmount = 1;
	}
	ScrollAmount = NewScrollAmount;
	MinPos = NewMinPos;
	MaxPos = __NFUN_199__(NewMaxPos, NewMaxVisible);
	MaxVisible = NewMaxVisible;
	CheckRange();
	return;
}

function CheckRange()
{
	// End:0x1D
	if(__NFUN_200__(pos, MinPos))
	{
		pos = MinPos;		
	}
	else
	{
		// End:0x37
		if(__NFUN_201__(pos, MaxPos))
		{
			pos = MaxPos;
		}
	}
	bDisabled = __NFUN_202__(MaxPos, MinPos);
	LeftButton.bDisabled = bDisabled;
	RightButton.bDisabled = bDisabled;
	// End:0x8F
	if(bDisabled)
	{
		pos = 0;		
	}
	else
	{
		ThumbStart = __NFUN_196__(__NFUN_195__(__NFUN_199__(pos, MinPos), __NFUN_199__(WinWidth, float(__NFUN_162__(2, LookAndFeel.SBPosIndicator.W)))), __NFUN_199__(__NFUN_198__(MaxPos, MaxVisible), MinPos));
		ThumbWidth = float(LookAndFeel.SBPosIndicator.h);
		// End:0x12D
		if(__NFUN_200__(ThumbWidth, float(LookAndFeel.SBPosIndicator.W)))
		{
			ThumbWidth = float(LookAndFeel.SBPosIndicator.W);
		}
		// End:0x18B
		if(__NFUN_201__(__NFUN_198__(ThumbWidth, ThumbStart), __NFUN_199__(WinWidth, float(__NFUN_162__(2, LookAndFeel.SBPosIndicator.W)))))
		{
			ThumbStart = __NFUN_199__(__NFUN_199__(WinWidth, float(__NFUN_162__(2, LookAndFeel.SBPosIndicator.W))), ThumbWidth);
		}
		ThumbStart = __NFUN_198__(ThumbStart, float(LookAndFeel.SBPosIndicator.h));
	}
	return;
}

function Created()
{
	super.Created();
	LeftButton = UWindowSBLeftButton(CreateWindow(class'UWindowSBLeftButton', 0, 0, float(LookAndFeel.SBLeftUp.W), float(LookAndFeel.SBLeftUp.h)));
	RightButton = UWindowSBRightButton(CreateWindow(class'UWindowSBRightButton', __NFUN_199__(WinWidth, float(10)), 0, float(LookAndFeel.SBRightUp.W), float(LookAndFeel.SBRightUp.h)));
	return;
}

function BeforePaint(Canvas C, float X, float Y)
{
	LeftButton.WinTop = 1;
	LeftButton.WinLeft = -1;
	RightButton.WinTop = 1;
	RightButton.WinLeft = __NFUN_198__(__NFUN_199__(WinWidth, float(LookAndFeel.SBRightUp.W)), float(1));
	CheckRange();
	return;
}

function Paint(Canvas C, float X, float Y)
{
	LookAndFeel.SB_HDraw(self, C);
	return;
}

function LMouseDown(float X, float Y)
{
	super.LMouseDown(X, Y);
	// End:0x1B
	if(bDisabled)
	{
		return;
	}
	// End:0x5A
	if(__NFUN_200__(X, ThumbStart))
	{
		Scroll(__NFUN_194__(__NFUN_199__(MaxVisible, float(1))));
		NextClickTime = __NFUN_198__(GetLevel().TimeSeconds, 0.5);
		return;
	}
	// End:0x9E
	if(__NFUN_201__(X, __NFUN_198__(ThumbStart, ThumbWidth)))
	{
		Scroll(__NFUN_199__(MaxVisible, float(1)));
		NextClickTime = __NFUN_198__(GetLevel().TimeSeconds, 0.5);
		return;
	}
	// End:0xF1
	if(__NFUN_148__(__NFUN_203__(X, ThumbStart), __NFUN_202__(X, __NFUN_198__(ThumbStart, ThumbWidth))))
	{
		DragX = __NFUN_199__(X, ThumbStart);
		bDragging = true;
		Root.CaptureMouse();
		return;
	}
	return;
}

function Tick(float Delta)
{
	local bool bLeft, bRight;
	local float X, Y;

	// End:0x0B
	if(bDragging)
	{
		return;
	}
	bLeft = false;
	bRight = false;
	// End:0x61
	if(bMouseDown)
	{
		GetMouseXY(X, Y);
		bLeft = __NFUN_200__(X, ThumbStart);
		bRight = __NFUN_201__(X, __NFUN_198__(ThumbStart, ThumbWidth));
	}
	// End:0xCD
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(bMouseDown, __NFUN_201__(NextClickTime, float(0))), __NFUN_200__(NextClickTime, GetLevel().TimeSeconds)), bLeft))
	{
		Scroll(__NFUN_194__(__NFUN_199__(MaxVisible, float(1))));
		NextClickTime = __NFUN_198__(GetLevel().TimeSeconds, 0.1);
	}
	// End:0x137
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(bMouseDown, __NFUN_201__(NextClickTime, float(0))), __NFUN_200__(NextClickTime, GetLevel().TimeSeconds)), bRight))
	{
		Scroll(__NFUN_199__(MaxVisible, float(1)));
		NextClickTime = __NFUN_198__(GetLevel().TimeSeconds, 0.1);
	}
	// End:0x167
	if(__NFUN_150__(__NFUN_145__(bMouseDown), __NFUN_148__(__NFUN_145__(bLeft), __NFUN_145__(bRight))))
	{
		NextClickTime = 0;
	}
	return;
}

function MouseMove(float X, float Y)
{
	// End:0x8E
	if(__NFUN_148__(__NFUN_148__(bDragging, bMouseDown), __NFUN_145__(bDisabled)))
	{
		J0x21:

		// End:0x56 [Loop If]
		if(__NFUN_148__(__NFUN_200__(X, __NFUN_198__(ThumbStart, DragX)), __NFUN_201__(pos, MinPos)))
		{
			Scroll(-1);
			// [Loop Continue]
			goto J0x21;
		}
		J0x56:

		// End:0x8B [Loop If]
		if(__NFUN_148__(__NFUN_201__(X, __NFUN_198__(ThumbStart, DragX)), __NFUN_200__(pos, MaxPos)))
		{
			Scroll(1);
			// [Loop Continue]
			goto J0x56;
		}		
	}
	else
	{
		bDragging = false;
	}
	return;
}
