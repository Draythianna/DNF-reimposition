/*******************************************************************************
 * AssaultTrooper_Captain generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AssaultTrooper_Captain extends AIActor
	config
	collapsecategories
	dependson(dnAssaultTrooperJetpackEffect)
	dependson(FakeAIWeapon);

const UninitialisedContactTime = -99.0f;
const ChanceIdleSound = 0.25f;
const MaxVelWobble = 30.0f;
const MinWobbleInterval = 0.1f;
const RndWobbleInterval = 0.2f;
const HeightThresh = 150;
const MinContactTime = 0.6f;
const ChanceRoar = 0.1f;
const ChanceRollInsteadOfPain = 0.4f;
const MinRoarHealthPercentage = 0.8f;
const BackFireMinInterval = 0.4f;
const BackFireRndInterval = 0.1f;

var private bool DoWobble;
var private float StartContactTime;
var private Engine.BaseAI.EAIArcSector DodgeSector;
var private dnAssaultTrooperJetpackEffect JetPackEffect[2];
var private SMountPrefab JetPackEffectMount[2];
var private class<SoftParticleSystem> JetPackBackFireFXClass;
var private class<SoftParticleSystem> JetPackSmokeTrailFXClass;
var private int LastGotoOpRef;
var private int MinRoarHealth;
var private float ChanceCloak;
var private class<dnMuzzleFX_Spawners> MuzzleFlashClass;
var private dnMuzzleFX_Spawners MuzzleFlash;
var private class<Weapon_LightEx> MuzzleLightClass;
var private Weapon_LightEx MuzzleLight;
var private class<BeamSystem> TracerClass;
var private class<SoftParticleSystem> WaterTracerClass;
var name FiringSound;
var private int MinBulletDamage;
var private int RndBulletDamage;
var int ReloadCountDown;
var int FireCount;
var SoftParticleSystem JetPackExplode;
var SoftParticleSystem HaywireSmokeParticleSystem;
var() noexport float FlyGate "Min time after taking off that we spend in the air. Must editdefactor to change this property at runtime.";
var() noexport float JumpGate "Min time after taking off that we spend in the air. Must editdefactor to change this property at runtime.";
var() noexport float LandGate "Min time after taking off that we spend in the air. Must editdefactor to change this property at runtime.";
var() noexport float TeleportGate "Min time after teleporting before teleporting again. Must editdefactor to change this property at runtime.";
var() noexport float ChanceTeleport_ActionPoint "Chance to teleport while in the wild when we are at an action point";
var() noexport float ChanceTeleport_Reaction "Chance to teleport while in the wild when we are being shot at";
var() float ChanceRoamSound;
var() noexport float ChanceIdleInAir "After reaching AP, chance to idle for MinIdleTime + RndIdleTime (while in air only)";
var Projectile IncomingProjectile;
var float DamageSinceTeleport;
var() bool AllowQuickTeleports;
var private bool bHeadKnockedOff;
var class<FakeAIWeapon> WeaponClass;
var FakeAIWeapon MyWeapon;

function PreInit()
{
	// End:0x11
	if(__NFUN_202__(ChanceFly, 0))
	{
		return;
	}
	// End:0x45
	if(__NFUN_150__(__NFUN_173__(int(ForceStartJetpack), int(1)), __NFUN_148__(__NFUN_174__(int(ForceStartJetpack), int(2)), InAir(150))))
	{
		StartupJetpack();
	}
	return;
}

simulated function ModifyAllowQuickTeleports(Engine.Object.EBitModifier bAllowQuickTeleportsModifier)
{
	AllowQuickTeleports = __NFUN_346__(bAllowQuickTeleportsModifier, AllowQuickTeleports);
	return;
}

k2call function StartupJetpack()
{
	SetAnimController(8);
	NotifyTakeOff();
	return;
}

k2call function StopJetpack()
{
	SetAnimController(5);
	NotifyLand();
	return;
}

event ExpandingDeath(Pawn DeathInstigator)
{
	// End:0x16
	if(__NFUN_145__(IsFlying()))
	{
		super.ExpandingDeath(DeathInstigator);
	}
	return;
}

function GetPickupSpawnLocationRotation(Weapon DropWeapon, out Vector SpawnLocation, out Rotator SpawnRotation)
{
	SpawnLocation = MyWeapon.Location;
	SpawnRotation = MyWeapon.Rotation;
	return;
}

simulated function TripMineAttached(Actor TripMineActor, float AutoDetonateTime)
{
	local LaserMine TripMine;

	// End:0x31
	if(__NFUN_173__(int(CurrentOp), int(138)))
	{
		TripMine = LaserMine(TripMineActor);
		TripMine.Disarm();		
	}
	else
	{
		// End:0x94
		if(IsFlying())
		{
			bForceHaywire = true;
			CanUseOp(80);
			HaywireParms.HitNormal = Vector(TripMineActor.Rotation);
			CurrentOpMustFinish = false;
			SuspendExecutive(true);
			SuspendWeaponTargetEvaluation(true);
			SuspendLookTargetEvaluation(true);
			ExecuteOp(80);
			bForceHaywire = false;
			return;
		}
	}
	super.TripMineAttached(TripMineActor, AutoDetonateTime);
	return;
}

function UpdateShrinkScale(float ShrinkSizeScale)
{
	super.UpdateShrinkScale(ShrinkSizeScale);
	// End:0x40
	if(__NFUN_340__(JetPackEffect[0], none))
	{
		JetPackEffect[0].__NFUN_591__(__NFUN_195__(ShrinkSizeScale, JetPackEffect[0].default.DrawScale));
	}
	// End:0x75
	if(__NFUN_340__(JetPackEffect[1], none))
	{
		JetPackEffect[1].__NFUN_591__(__NFUN_195__(ShrinkSizeScale, JetPackEffect[1].default.DrawScale));
	}
	return;
}

event PostBeginPlay()
{
	super.PostBeginPlay();
	SetupWeapon();
	SetupWeaponFX();
	__NFUN_605__(2, false, 'RndStuff');
	MinRoarHealth = int(__NFUN_195__(Health, 0.8));
	HaywireSmokeParticleSystem = SoftParticleSystem(FindMountedActor('HaywireSmokeFX', class'SoftParticleSystem'));
	// End:0x6C
	if(__NFUN_340__(HaywireSmokeParticleSystem, none))
	{
		HaywireSmokeParticleSystem.Enabled = false;
	}
	TeleportParms.StartLight = __NFUN_615__(class'AssaultTrooper_Captain_TeleportLight', self,, Location);
	TeleportParms.EndLight = __NFUN_615__(class'AssaultTrooper_Captain_TeleportLight', self,, Location);
	return;
}

function SetRefPose()
{
	return;
}

event Destroyed()
{
	JetStop();
	// End:0x2C
	if(__NFUN_340__(JetPackEffect[0], none))
	{
		JetPackEffect[0].__NFUN_614__();
		JetPackEffect[0] = none;
	}
	// End:0x52
	if(__NFUN_340__(JetPackEffect[1], none))
	{
		JetPackEffect[1].__NFUN_614__();
		JetPackEffect[1] = none;
	}
	// End:0x6B
	if(__NFUN_340__(MuzzleFlash, none))
	{
		MuzzleFlash.__NFUN_614__();
	}
	// End:0x84
	if(__NFUN_340__(MuzzleLight, none))
	{
		MuzzleLight.__NFUN_614__();
	}
	// End:0x9D
	if(__NFUN_340__(MyWeapon, none))
	{
		MyWeapon.__NFUN_614__();
	}
	super.Destroyed();
	return;
}

function RndStuff()
{
	// End:0xA0
	if(__NFUN_148__(DoJetPackWobble, __NFUN_173__(int(AnimCtrl.m_eController), int(8))))
	{
		// End:0xA0
		if(__NFUN_145__(__NFUN_398__('GotoX')))
		{
			Velocity.X = __NFUN_198__(Velocity.X, __NFUN_195__(__NFUN_199__(__NFUN_222__(), 0.5), 30));
			Velocity.Y = __NFUN_198__(Velocity.Y, __NFUN_195__(__NFUN_199__(__NFUN_222__(), 0.5), 30));
			Velocity.Z = __NFUN_198__(Velocity.Z, __NFUN_195__(__NFUN_199__(__NFUN_222__(), 0.5), 30));
		}
	}
	__NFUN_605__(__NFUN_198__(0.1, __NFUN_195__(__NFUN_222__(), 0.2)), false, 'RndStuff');
	return;
}

event Engine.Object.EDialog GetEnemySpottedDialog()
{
	// End:0x0C
	if(IsFlying())
	{
		return 11;
	}
	return super(Pawn).GetEnemySpottedDialog();
	return;
}

function Anim_MoveTo_StrafeLeft(Engine.BaseAI.EAIMoveSpeed MoveSpeed)
{
	// End:0x1C
	if(__NFUN_173__(int(MoveSpeed), int(1)))
	{
		PlayAnim('Anim_SidestepLeftSlow');		
	}
	else
	{
		PlayAnim('Anim_SidestepLeft');
	}
	// End:0x3B
	if(IsFlying())
	{
		FindSoundAndSpeak('Sound_JetPackBoost');
	}
	return;
}

function Anim_MoveTo_StrafeRight(Engine.BaseAI.EAIMoveSpeed MoveSpeed)
{
	// End:0x1C
	if(__NFUN_173__(int(MoveSpeed), int(1)))
	{
		PlayAnim('Anim_SidestepRightSlow');		
	}
	else
	{
		PlayAnim('Anim_SidestepRight');
	}
	// End:0x3B
	if(IsFlying())
	{
		FindSoundAndSpeak('Sound_JetPackBoost');
	}
	return;
}

function Anim_MoveTo(Engine.BaseAI.EAIMoveSpeed MoveSpeed)
{
	super.Anim_MoveTo(MoveSpeed);
	// End:0x1F
	if(IsFlying())
	{
		FindSoundAndSpeak('Sound_JetPackBoost');
	}
	return;
}

function Anim_MoveTo_BackUp(Engine.BaseAI.EAIMoveSpeed MoveSpeed)
{
	super.Anim_MoveTo_BackUp(MoveSpeed);
	// End:0x1F
	if(IsFlying())
	{
		FindSoundAndSpeak('Sound_JetPackBoost');
	}
	return;
}

k2call simulated function WeaponFire(optional EventInfo AnimEventInfo)
{
	ShouldFire = true;
	return;
}

function bool GetCurrentWeapon(out class<Weapon> OutWeaponClass, out int OutLoadedAmmo, out int OutTotalAmmo)
{
	OutWeaponClass = class'IntegratedWeapon';
	OutLoadedAmmo = 99;
	OutTotalAmmo = 99;
	return true;
	return;
}

function name GetWeaponAnimName(class<Weapon> WeaponClass)
{
	return 'AssaultTrooperGun';
	return;
}

function Weapon GetWeapon()
{
	return none;
	return;
}

event name AIActor_Weapon_GetName()
{
	return 'AssaultTrooperGun';
	return;
}

function bool AIActor_Weapon_Fire()
{
	PlayAnim('Anim_Shoot');
	// End:0x23
	if(__NFUN_340__(PopUp, none))
	{
		__NFUN_184__(PopUpState.ShotsFired);
	}
	return true;
	return;
}

event bool AIActor_Weapon_Reload()
{
	return true;
	return;
}

function bool AIActor_Weapon_GiveAmmo()
{
	return true;
	return;
}

function AIActor_Weapon_Holster(RenderActor MyWeapon)
{
	return;
}

simulated event Vector GetProjectileFireLocation()
{
	local Vector SpawnPos;
	local Rotator SpawnRot;

	// End:0x2C
	if(__NFUN_340__(MyWeapon, none))
	{
		MyWeapon.GetMuzzlePos(SpawnPos, SpawnRot);
		return SpawnPos;
	}
	return super.GetProjectileFireLocation();
	return;
}

event FireWeapon()
{
	local GearboxEngineGlobals Globals;

	Globals = __NFUN_404__();
	// End:0x80
	if(__NFUN_148__(__NFUN_340__(Globals, none), Globals.AssaultCaptainCanFireRealShotNow(self)))
	{
		// End:0x7D
		if(__NFUN_340__(FireProjectile('None', ProjectileClass, CalcLeadTime(ProjectileClass.default.MaxSpeed), false), none))
		{
			StartWeaponFX();
			NotifyFired();
			FindSoundAndSpeak(FiringSound);
			__NFUN_185__(ReloadCountDown);
			__NFUN_185__(FireCount);
		}		
	}
	else
	{
		StartWeaponFX();
		NotifyFired();
		__NFUN_185__(ReloadCountDown);
		__NFUN_185__(FireCount);
	}
	return;
}

simulated event float GetBaseDamage(Actor Victim, optional Pawn Instigator, optional class<DamageType> DamageType, optional Vector HitDirection, optional Vector HitLocation, optional name BoneName, optional Vector SourceTraceOrigin)
{
	return float(__NFUN_165__(MinBulletDamage, __NFUN_187__(RndBulletDamage)));
	return;
}

simulated event PerformTraceFireEffects(class<TraceDamageType> TraceDamageType, Vector TraceStart, Vector TraceEnd, Actor HitActor)
{
	local BeamSystem Beam;

	super(Actor).PerformTraceFireEffects(TraceDamageType, TraceStart, TraceEnd, HitActor);
	SpawnWeaponTracer(TraceStart, TraceEnd, 0.5, TracerClass, WaterTracerClass, HitActor);
	return;
}

function NotifyEndWeaponFireAnim()
{
	StopWeaponFX();
	super.NotifyEndWeaponFireAnim();
	return;
}

function SetupWeapon()
{
	MyWeapon = __NFUN_615__(WeaponClass, self);
	// End:0x50
	if(__NFUN_340__(MyWeapon, none))
	{
		MyWeapon.MountType = 2;
		MyWeapon.MountMeshItem = 'mount_carryitem';
		MyWeapon.__NFUN_635__(self);
	}
	return;
}

function SetupWeaponFX()
{
	MuzzleLight = __NFUN_615__(MuzzleLightClass, MyWeapon);
	// End:0x97
	if(__NFUN_340__(MuzzleLight, none))
	{
		MuzzleLight.LightStyle = 0;
		MuzzleLight.MountType = 2;
		MuzzleLight.MountMeshItem = MyWeapon.MuzzleBones[0];
		MuzzleLight.MountOrigin = __NFUN_232__(1, 0, 0);
		MuzzleLight.__NFUN_635__(MyWeapon);
	}
	MuzzleFlash = __NFUN_615__(MuzzleFlashClass, MyWeapon);
	// End:0x11C
	if(__NFUN_340__(MuzzleFlash, none))
	{
		MuzzleFlash.MountType = 2;
		MuzzleFlash.MountMeshItem = MyWeapon.MuzzleBones[0];
		MuzzleFlash.MountOrigin = __NFUN_232__(1, 0, 0);
		MuzzleFlash.__NFUN_635__(MyWeapon);
	}
	return;
}

function StartWeaponFX()
{
	// End:0x2E
	if(__NFUN_340__(MuzzleLight, none))
	{
		MuzzleLight.__NFUN_591__(DrawScale);
		MuzzleLight.Flash();
	}
	// End:0x60
	if(__NFUN_340__(MuzzleFlash, none))
	{
		MuzzleFlash.SystemSizeScale = DrawScale;
		MuzzleFlash.ExecuteEffect(true);
	}
	return;
}

function StopWeaponFX()
{
	// End:0x1C
	if(__NFUN_340__(MuzzleFlash, none))
	{
		MuzzleFlash.StopEffect();
	}
	return;
}

k2call simulated function JetStart(optional EventInfo AnimEventInfo)
{
	// End:0x0E
	if(__NFUN_202__(Health, float(0)))
	{
		return;
	}
	// End:0x75
	if(__NFUN_339__(JetPackEffect[0], none))
	{
		JetPackEffect[0] = __NFUN_615__(class'dnAssaultTrooperJetpackEffect');
		// End:0x75
		if(__NFUN_340__(JetPackEffect[0], none))
		{
			JetPackEffect[0].__NFUN_590__(false);
			JetPackEffect[0].TickStyle = 2;
			JetPackEffect[0].__NFUN_633__(JetPackEffectMount[0], self);
		}
	}
	// End:0xDC
	if(__NFUN_339__(JetPackEffect[1], none))
	{
		JetPackEffect[1] = __NFUN_615__(class'dnAssaultTrooperJetpackEffect');
		// End:0xDC
		if(__NFUN_340__(JetPackEffect[1], none))
		{
			JetPackEffect[1].__NFUN_590__(false);
			JetPackEffect[1].TickStyle = 2;
			JetPackEffect[1].__NFUN_633__(JetPackEffectMount[1], self);
		}
	}
	FindSoundAndSpeak('Sound_JetpackOn');
	HaywireChance = 1;
	return;
}

k2call simulated function JetStop(optional EventInfo AnimEventInfo)
{
	// End:0x41
	if(__NFUN_340__(JetPackEffect[0], none))
	{
		JetPackEffect[0].__NFUN_590__(true);
		JetPackEffect[0].TickStyle = 0;
		JetPackEffect[0].__NFUN_631__();
	}
	// End:0x82
	if(__NFUN_340__(JetPackEffect[1], none))
	{
		JetPackEffect[1].__NFUN_590__(true);
		JetPackEffect[1].TickStyle = 0;
		JetPackEffect[1].__NFUN_631__();
	}
	__NFUN_701__(none);
	// End:0x9A
	if(IsFlying())
	{
		FindSoundAndSpeak('Sound_JetPackOff');
	}
	HaywireChance = 0;
	return;
}

k2call simulated function JetGo(optional EventInfo AnimEventInfo)
{
	__NFUN_209__(Velocity.Z, float(__NFUN_165__(100, __NFUN_187__(200))));
	return;
}

function StartBackFire()
{
	local SoftParticleSystem JetpackSmoke;

	// End:0x0E
	if(__NFUN_340__(JetPackExplode, none))
	{
		return;
	}
	JetpackSmoke = __NFUN_615__(JetPackSmokeTrailFXClass, self);
	// End:0x96
	if(__NFUN_340__(JetpackSmoke, none))
	{
		JetpackSmoke.MountType = 2;
		JetpackSmoke.MountMeshItem = 'spine2';
		JetpackSmoke.MountOrigin = __NFUN_232__(-5, 0, 0);
		JetpackSmoke.__NFUN_635__(self, false, false, false, true, false);
		JetpackSmoke.DestroyOnDismount = false;
	}
	JetPackExplode = __NFUN_615__(JetPackBackFireFXClass, self);
	// End:0x112
	if(__NFUN_340__(JetPackExplode, none))
	{
		JetPackExplode.MountType = 2;
		JetPackExplode.MountMeshItem = 'spine2';
		JetPackExplode.MountOrigin = __NFUN_232__(-5, 0, 0);
		JetPackExplode.__NFUN_635__(self, false, false, false, true, false);
		BackFire();
	}
	return;
}

function BackFire()
{
	// End:0x1E
	if(__NFUN_340__(JetPackExplode, none))
	{
		JetPackExplode.Trigger(self, none);
	}
	__NFUN_605__(__NFUN_198__(0.4, __NFUN_195__(__NFUN_222__(), 0.1)), false, 'BackFire');
	return;
}

event Engine.BaseAI.EAICode COND_ShouldCloakAttack()
{
	// End:0x0F
	if(__NFUN_201__(__NFUN_222__(), ChanceCloak))
	{
		return 25;
	}
	// End:0x1F
	if(__NFUN_145__(SetGoal(11)))
	{
		return 53;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldDoAttackPain()
{
	// End:0x0E
	if(__NFUN_145__(IsCloaked()))
	{
		return 0;
	}
	return 49;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldRoarInsteadOfPain()
{
	// End:0x13
	if(__NFUN_145__(DamageInfo.Valid))
	{
		return 43;
	}
	// End:0x32
	if(__NFUN_200__(__NFUN_198__(Health, DamageInfo.Damage), float(MinRoarHealth)))
	{
		return 45;
	}
	// End:0x3E
	if(IsCloaked())
	{
		return 49;
	}
	// End:0x4D
	if(__NFUN_201__(__NFUN_222__(), 0.1))
	{
		return 25;
	}
	// End:0x59
	if(IsCloaked())
	{
		return 49;
	}
	// End:0x84
	if(__NFUN_148__(__NFUN_174__(int(AnimCtrl.m_eController), int(1)), __NFUN_174__(int(AnimCtrl.m_eController), int(5))))
	{
		return 39;
	}
	// End:0x9C
	if(__NFUN_145__(PrimaryTarget.IsValidTarget()))
	{
		return 4;
	}
	// End:0xC3
	if(__NFUN_150__(__NFUN_174__(int(CheckCondition(41)), int(0)), __NFUN_173__(int(CheckCondition(59)), int(0))))
	{
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldRollInsteadOfPain()
{
	// End:0x13
	if(__NFUN_145__(DamageInfo.Valid))
	{
		return 43;
	}
	// End:0x29
	if(__NFUN_173__(int(AnimCtrl.m_eController), int(8)))
	{
		return 51;
	}
	// End:0x35
	if(IsCloaked())
	{
		return 49;
	}
	// End:0x44
	if(__NFUN_201__(__NFUN_222__(), 0.4))
	{
		return 25;
	}
	// End:0xA9
	if(__NFUN_148__(DamageInfo.Valid, __NFUN_200__(__NFUN_222__(), 0.5)))
	{
		// End:0x8D
		if(__NFUN_148__(__NFUN_200__(__NFUN_222__(), 0.5), __NFUN_173__(int(CheckCondition(73)), int(0))))
		{
			DodgeSector = 2;
			return 0;			
		}
		else
		{
			// End:0xA9
			if(__NFUN_173__(int(CheckCondition(74)), int(0)))
			{
				DodgeSector = 3;
				return 0;
			}
		}
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldRollLeft()
{
	// End:0x11
	if(__NFUN_173__(int(DodgeSector), int(2)))
	{
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldTakeOff()
{
	local float HeightDelta;

	// End:0x26
	if(__NFUN_150__(__NFUN_145__(PrimaryTarget.IsValidTarget()), __NFUN_339__(PrimaryTargetActor, none)))
	{
		return 4;
	}
	// End:0x3A
	if(__NFUN_173__(int(CheckCondition(56)), int(0)))
	{
		return 51;
	}
	HeightDelta = __NFUN_199__(PrimaryTarget.GetPos().Z, Location.Z);
	__NFUN_209__(HeightDelta, __NFUN_199__(CollisionHeight, PrimaryTargetActor.CollisionHeight));
	// End:0x90
	if(__NFUN_200__(HeightDelta, 100))
	{
		return 21;
	}
	// End:0xA0
	if(__NFUN_145__(SetGoal(9)))
	{
		return 53;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_NeedToLand()
{
	local Engine.BaseAI.EAIOp MyOp;
	local float HeightDelta;

	// End:0x26
	if(__NFUN_150__(__NFUN_145__(PrimaryTarget.IsValidTarget()), __NFUN_339__(PrimaryTargetActor, none)))
	{
		return 4;
	}
	MyOp = GetCurrentOp();
	HeightDelta = __NFUN_199__(PrimaryTargetActor.Location.Z, Location.Z);
	__NFUN_209__(HeightDelta, __NFUN_199__(CollisionHeight, PrimaryTargetActor.CollisionHeight));
	// End:0xE9
	if(__NFUN_148__(__NFUN_148__(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_173__(int(MyOp), int(85)), __NFUN_173__(int(MyOp), int(145))), __NFUN_173__(int(MyOp), int(86))), __NFUN_173__(int(MyOp), int(17))), __NFUN_173__(int(MyOp), int(34))), __NFUN_202__(HeightDelta, 10)), __NFUN_145__(InAir(80))))
	{
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_SetLandGoal()
{
	// End:0x0E
	if(SetGoal(12))
	{
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldGotoAirAttack()
{
	// End:0x50
	if(__NFUN_148__(__NFUN_148__(__NFUN_173__(int(CheckCondition(56)), int(0)), __NFUN_150__(__NFUN_201__(PrimaryTarget.GetTimeSinceSeen(), TryGotoAttackTime), __NFUN_173__(int(CheckCondition(25)), int(0)))), SetGoal(9)))
	{
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_GotoAttackInPosition()
{
	local Engine.BaseAI.EAICode Code;

	Code = CheckCondition(61);
	// End:0x30
	if(__NFUN_174__(int(Code), int(0)))
	{
		StartContactTime = -99;
		return Code;		
	}
	else
	{
		// End:0x57
		if(__NFUN_204__(StartContactTime, -99))
		{
			StartContactTime = Level.GameTimeSeconds;			
		}
		else
		{
			// End:0x85
			if(__NFUN_203__(__NFUN_199__(Level.GameTimeSeconds, StartContactTime), 0.6))
			{
				StartContactTime = -99;
				return 0;
			}
		}
		return 1;
	}
	return;
}

event Engine.BaseAI.EAICode COND_ShouldGuardAttackMelee()
{
	local Engine.BaseAI.EAICode Code;

	Code = CheckCondition(57);
	// End:0x22
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	return super.COND_ShouldGuardAttackMelee();
	return;
}

event Engine.BaseAI.EAICode COND_ShouldFire()
{
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldFireDelay()
{
	// End:0x19
	if(__NFUN_171__(ReloadCountDown, 0))
	{
		ReloadCountDown = default.ReloadCountDown;
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_BeginFire()
{
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldMoveAround()
{
	return super.COND_ShouldMoveAround();
	return;
}

event Engine.BaseAI.EAICode COND_ShouldStandCombat()
{
	local Engine.BaseAI.EAICode Code;

	Code = CheckCondition(40);
	// End:0x22
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	Code = CheckCondition(38);
	// End:0x44
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	Code = CheckCondition(32);
	// End:0x66
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldAttackAirAP()
{
	return 1;
	return;
}

function Engine.BaseAI.EAICode COND_CrouchForSmallEnemy()
{
	// End:0x0F
	if(__NFUN_339__(PrimaryTargetActor, none))
	{
		return 4;
	}
	// End:0x43
	if(__NFUN_201__(PrimaryTargetActor.Location.Z, __NFUN_198__(Location.Z, __NFUN_195__(CollisionHeight, 0.3))))
	{
		return 1;
	}
	return 0;
	return;
}

event PrioritizePopups(Engine.BaseAI.EAIPopUpType PopupType)
{
	local array<PopUpCfg> Entrys;

	Entrys = Popups[int(PopupType)].Entrys;
	super.PrioritizePopups(PopupType);
	return;
}

function UpdateGates()
{
	JumpGate = __NFUN_198__(Level.GameTimeSeconds, default.JumpGate);
	FlyGate = __NFUN_198__(Level.GameTimeSeconds, default.FlyGate);
	LandGate = __NFUN_198__(Level.GameTimeSeconds, default.LandGate);
	return;
}

event NotifyTakeOff()
{
	super.NotifyTakeOff();
	JetStart();
	UpdateGates();
	return;
}

event NotifyLand()
{
	super.NotifyLand();
	JetStop();
	UpdateGates();
	COND_ReleaseActionPoint();
	return;
}

event NotifyJumpTakeOff()
{
	super.NotifyJumpTakeOff();
	JetStart();
	return;
}

event NotifyJumpLand()
{
	JetStop();
	super.NotifyJumpLand();
	return;
}

event NotifyOpStarted(Engine.BaseAI.EAIOp NewOp, Engine.BaseAI.EAIOp OldOp)
{
	// End:0x5E
	if(__NFUN_173__(int(NewOp), int(80)))
	{
		bSpawnOnDestroyed = true;
		FindSoundAndSpeak('Sound_JetpackHaywire');
		StartBackFire();
		__NFUN_605__(__NFUN_198__(0.15, __NFUN_195__(__NFUN_222__(), 0.15)), false, 'BackFire');
		// End:0x5E
		if(__NFUN_340__(HaywireSmokeParticleSystem, none))
		{
			HaywireSmokeParticleSystem.Enabled = true;
		}
	}
	// End:0x72
	if(__NFUN_173__(int(NewOp), int(90)))
	{
		JetStop();
	}
	// End:0xB8
	if(__NFUN_173__(int(NewOp), int(138)))
	{
		bAcceptMines = false;
		bNoDamage = true;
		bTeleporting = true;
		// End:0xA7
		if(IsFlying())
		{
			JetStop();
		}
		__NFUN_605__(1.5, false, 'TimeoutTeleportAnim');		
	}
	else
	{
		bNoDamage = false;
	}
	return;
}

function NotifyTeleportInProgress()
{
	local int i;

	__NFUN_590__(true);
	i = __NFUN_166__(string(TripMines), 1);
	J0x13:

	// End:0x4E [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x44
		if(__NFUN_340__(TripMines[i], none))
		{
			TripMines[i].__NFUN_590__(true);
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x13;
	}
	return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
	local Engine.BaseAI.EAICode Code;
	local int i;

	bNoDamage = false;
	// End:0x16
	if(__NFUN_173__(int(Op), int(137)))
	{
	}
	// End:0x1C7
	if(__NFUN_173__(int(Op), int(138)))
	{
		bAcceptMines = true;
		bTeleporting = false;
		__NFUN_590__(false);
		DamageSinceTeleport = 0;
		i = __NFUN_166__(string(TripMines), 1);
		J0x52:

		// End:0xA3 [Loop If]
		if(__NFUN_172__(i, 0))
		{
			// End:0x99
			if(__NFUN_340__(TripMines[i], none))
			{
				TripMines[i].__NFUN_590__(false);
				TripMines[i].ArmMineOnPawn();
			}
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x52;
		}
		// End:0x1C7
		if(__NFUN_202__(Health, 0))
		{
			// End:0x110
			if(__NFUN_150__(__NFUN_204__(DeathAnimChance, 0), __NFUN_201__(__NFUN_222__(), DeathAnimChance)))
			{
				Die(DamageInfo.Instigator, int(DamageInfo.Damage), DamageInfo.pos, DamageInfo.Dir, DamageInfo.DamageType, 'None');				
			}
			else
			{
				DeathAnimChance = 1;
				// End:0x16B
				if(IsFlying())
				{
					bForceHaywire = true;
					HaywireParms.HitNormal = __NFUN_255__();
					HaywireParms.HitNormal.Z = __NFUN_211__(HaywireParms.HitNormal.Z);
					Code = ForceDieOp(80);					
				}
				else
				{
					Code = ForceDieOp(23);
				}
				// End:0x1C5
				if(__NFUN_174__(int(Code), int(0)))
				{
					Die(DamageInfo.Instigator, int(DamageInfo.Damage), DamageInfo.pos, DamageInfo.Dir, DamageInfo.DamageType, 'None');
				}
			}
			return;
		}
	}
	return;
}

event NotifyTeleportLocationSet()
{
	super.NotifyTeleportLocationSet();
	// End:0x1D
	if(TeleportParms.bForceJetpackOnFinish)
	{
		StartupJetpack();		
	}
	else
	{
		// End:0x31
		if(TeleportParms.bForceLandOnFinish)
		{
			StopJetpack();
		}
	}
	return;
}

function float CalculateFlyContraintStrengthScalar(float DeltaTime)
{
	// End:0x2F
	if(__NFUN_150__(__NFUN_173__(int(CurrentOp), int(85)), __NFUN_173__(int(CurrentOp), int(86))))
	{
		KLinearDamping = 5;
		return 0;
	}
	// End:0x65
	if(__NFUN_173__(int(CurrentOp), int(96)))
	{
		// End:0x54
		if(__NFUN_921__())
		{
			KLinearDamping = 25;
			return 0;
		}
		KLinearDamping = 0.5;
		return 0;
	}
	// End:0x7E
	if(__NFUN_174__(int(CurrentOp), int(137)))
	{
		KLinearDamping = default.KLinearDamping;
	}
	return super.CalculateFlyContraintStrengthScalar(DeltaTime);
	return;
}

event Engine.BaseAI.EAICode COND_ShouldJumpToAirAP()
{
	// End:0x1C
	if(__NFUN_201__(FlyGate, Level.GameTimeSeconds))
	{
		return 87;
	}
	// End:0x2B
	if(__NFUN_203__(__NFUN_222__(), ChanceFly))
	{
		return 25;
	}
	return super.COND_ShouldJumpToAirAP();
	return;
}

event Engine.BaseAI.EAICode COND_ShouldLand()
{
	// End:0x1C
	if(__NFUN_201__(LandGate, Level.GameTimeSeconds))
	{
		return 87;
	}
	// End:0x2B
	if(__NFUN_203__(__NFUN_222__(), ChanceLand))
	{
		return 25;
	}
	// End:0x39
	if(SetGoal(5))
	{
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldGotoJumpAP()
{
	// End:0x1C
	if(__NFUN_201__(JumpGate, Level.GameTimeSeconds))
	{
		return 87;
	}
	return super.COND_ShouldGotoJumpAP();
	return;
}

event bool ShouldPainImpulse()
{
	// End:0x13
	if(__NFUN_173__(int(CheckCondition(56)), int(0)))
	{
		return true;
	}
	return false;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldMelee()
{
	// End:0x14
	if(__NFUN_173__(int(CheckCondition(56)), int(0)))
	{
		return 51;
	}
	return super.COND_ShouldMelee();
	return;
}

event Engine.BaseAI.EAICode COND_ShouldTeleportToAP()
{
	local int i;
	local ActionPoint NewActionPoint;

	// End:0x0F
	if(__NFUN_202__(Health, float(0)))
	{
		return 1;
	}
	// End:0x2B
	if(__NFUN_201__(TeleportGate, Level.GameTimeSeconds))
	{
		return 87;
	}
	// End:0x3A
	if(__NFUN_201__(__NFUN_222__(), ChanceTeleport_ActionPoint))
	{
		return 25;
	}
	return super.COND_ShouldTeleportToAP();
	return;
}

event NotifyTeleportEnd()
{
	super.NotifyTeleportEnd();
	TeleportGate = __NFUN_198__(Level.GameTimeSeconds, default.TeleportGate);
	return;
}

event Engine.BaseAI.EAICode COND_ShouldTakeoffAvoidDanger()
{
	// End:0x0F
	if(__NFUN_203__(__NFUN_222__(), ChanceFly))
	{
		return 25;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldIdleInAir()
{
	// End:0x0F
	if(__NFUN_203__(__NFUN_222__(), ChanceFly))
	{
		return 25;
	}
	return 0;
	return;
}

function bool CheckSpotForTeleport(Vector Destination)
{
	local STraceFlags Flags;
	local STraceHitResult Result;
	local Actor HitActor;
	local Vector TraceStart, TraceEnd, Extent, NextPathPos;
	local int FinalDest;

	TraceStart = __NFUN_238__(Destination, __NFUN_232__(0, 0, __NFUN_194__(__NFUN_199__(CollisionHeight, 1))));
	TraceEnd = __NFUN_238__(Destination, __NFUN_232__(0, 0, __NFUN_199__(CollisionHeight, 1)));
	Extent = __NFUN_232__(CollisionRadius, CollisionRadius, 1);
	Flags.bTraceActors = true;
	Flags.bMeshAccurate = false;
	Flags.bShotTrace = true;
	Flags.bTraceTexture = false;
	Flags.bIgnoreAITransparent = false;
	Flags.bKarmaOnly = false;
	HitActor = __NFUN_736__(TraceStart, TraceEnd, Flags, Result, Extent);
	// End:0x10F
	if(__NFUN_339__(HitActor, none))
	{
		// End:0x10F
		if(__NFUN_173__(int(CanGotoPos(Destination, none, 1, CollisionHeight, 1, NextPathPos, FinalDest)), int(0)))
		{
			return true;
		}
	}
	return false;
	return;
}

function Engine.BaseAI.EAICode FindQuickTeleportSpot()
{
	local STraceFlags Flags;
	local STraceHitResult Result;
	local Actor HitActor;
	local Vector TraceStart, TraceEnd, Dest;

	// End:0x33
	if(__NFUN_150__(__NFUN_150__(__NFUN_145__(PrimaryTarget.IsValidTarget()), __NFUN_339__(PrimaryTargetActor, none)), __NFUN_145__(AllowQuickTeleports)))
	{
		return 4;
	}
	TeleportParms.bForceLandOnFinish = false;
	TeleportParms.bForceJetpackOnFinish = false;
	Dest = __NFUN_239__(PrimaryTargetActor.Location, __NFUN_234__(Vector(PrimaryTargetActor.Rotation), __NFUN_195__(__NFUN_198__(PrimaryTargetActor.CollisionRadius, CollisionRadius), 2)));
	// End:0x101
	if(CheckSpotForTeleport(Dest))
	{
		TeleportParms.Destination = Dest;
		TeleportParms.DestinationRotation = PrimaryTargetActor.Rotation;
		TeleportParms.bValid = true;
		TeleportParms.EndAnimName = 'None';
		// End:0xFE
		if(IsFlying())
		{
			TeleportParms.bForceLandOnFinish = true;
		}
		return 0;
	}
	Dest = __NFUN_238__(PrimaryTargetActor.Location, __NFUN_234__(Vector(PrimaryTargetActor.Rotation), __NFUN_195__(__NFUN_198__(PrimaryTargetActor.CollisionRadius, CollisionRadius), 2)));
	// End:0x1B5
	if(CheckSpotForTeleport(Dest))
	{
		TeleportParms.Destination = Dest;
		TeleportParms.DestinationRotation = PrimaryTargetActor.Rotation;
		TeleportParms.bValid = true;
		TeleportParms.EndAnimName = 'None';
		// End:0x1B2
		if(IsFlying())
		{
			TeleportParms.bForceLandOnFinish = true;
		}
		return 0;
	}
	// End:0x234
	if(__NFUN_148__(__NFUN_340__(LastActionPoint, none), __NFUN_173__(int(FindTeleportAP(LastActionPoint)), int(0))))
	{
		// End:0x204
		if(__NFUN_148__(LastActionPoint.bFlyer, __NFUN_145__(IsFlying())))
		{
			TeleportParms.bForceJetpackOnFinish = true;
		}
		// End:0x231
		if(__NFUN_148__(__NFUN_145__(LastActionPoint.bFlyer), IsFlying()))
		{
			TeleportParms.bForceLandOnFinish = true;
		}
		return 0;
	}
	return 1;
	return;
}

function TimeoutTeleportAnim()
{
	return;
}

function Engine.BaseAI.EAICode COND_ShouldAvoidTarget()
{
	local Engine.BaseAI.EAICode Code;

	Code = super.COND_ShouldAvoidTarget();
	// End:0x1D
	if(__NFUN_173__(int(Code), int(53)))
	{
		return 0;
	}
	return Code;
	return;
}

function NotifyOtherTouched(Actor TouchedActor, Actor TouchingActor)
{
	local Projectile Proj;

	// End:0xC8
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_201__(ChanceTeleport_Reaction, __NFUN_222__()), __NFUN_340__(TKShield, none)), __NFUN_339__(TouchedActor, TKShield)), __NFUN_173__(int(GetExecutive()), int(2))))
	{
		Proj = Projectile(TouchingActor);
		// End:0xC8
		if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_340__(Proj, none), __NFUN_340__(Proj.Instigator, none)), Proj.Instigator.bIsPlayerPawn), __NFUN_145__(__NFUN_357__(Proj.Class, class'LaserMine'))))
		{
			IncomingProjectile = Proj;
			__NFUN_607__(1E-05, false, 'PerformQuickTeleport', true);
		}
	}
	return;
}

function NotifyDamage(Pawn aInstigator, int nDamage, Vector vDamagePos, Vector vDamageDir, class<DamageType> DamageClass)
{
	__NFUN_209__(DamageSinceTeleport, float(nDamage));
	// End:0x37
	if(__NFUN_148__(__NFUN_201__(ChanceTeleport_Reaction, __NFUN_222__()), __NFUN_201__(DamageSinceTeleport, float(15))))
	{
		__NFUN_607__(1E-05, false, 'PerformQuickTeleport', true);
	}
	return;
}

final function PerformQuickTeleport()
{
	// End:0x92
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_201__(Health, 0), __NFUN_174__(int(CurrentOp), int(138))), __NFUN_145__(HasTripMineAttached())), __NFUN_173__(int(FrozenState), int(0))), __NFUN_173__(int(GetExecutive()), int(2))))
	{
		// End:0x92
		if(__NFUN_173__(int(FindQuickTeleportSpot()), int(0)))
		{
			CanUseOp(138);
			CurrentOpMustFinish = false;
			bAcceptMines = false;
			ExecuteOp(138);
			CurrentOpMustFinish = true;
			SuspendExecutive(true);
			SuspendExecutive(false);
		}
	}
	return;
}

final simulated function KnockOffHelmet()
{
	local Destructible_Armor Helmet;

	Helmet = Destructible_Armor(FindMountedActor('Helmet', class'Destructible_Armor'));
	// End:0x67
	if(__NFUN_340__(Helmet, none))
	{
		Helmet.Destroyed();
		Helmet.__NFUN_820__(__NFUN_235__(50, __NFUN_233__(Vector(Rotation))), Helmet.Location, 'None');
	}
	return;
}

final simulated function KnockOffHead()
{
	bHeadKnockedOff = true;
	bDisableSounds = true;
	ExpandingBoneName = 'None';
	return;
}

simulated event bool OnEvalBonesHelper()
{
	// End:0x37
	if(__NFUN_148__(bHeadKnockedOff, __NFUN_340__(__NFUN_568__(), none)))
	{
		__NFUN_568__().__NFUN_539__('neck', __NFUN_232__(0.001, 0.001, 0.001), true);
	}
	return true;
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(Pawn).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(WeaponClass);
	PrecacheIndex.__NFUN_1266__(MuzzleLightClass);
	PrecacheIndex.__NFUN_1266__(MuzzleFlashClass);
	PrecacheIndex.__NFUN_1266__(TracerClass);
	PrecacheIndex.__NFUN_1266__(WaterTracerClass);
	PrecacheIndex.__NFUN_1266__(class'dnAssaultTrooperJetpackEffect');
	PrecacheIndex.__NFUN_1266__(TeleportParms.StartParticleSystem);
	PrecacheIndex.__NFUN_1266__(TeleportParms.EndParticleSystem);
	PrecacheIndex.__NFUN_1269__(TeleportParms.StartOverlay);
	PrecacheIndex.__NFUN_1266__(class'AssaultTrooper_Captain_TeleportLight');
	PrecacheIndex.__NFUN_1277__(VoicePack, FiringSound);
	PrecacheIndex.__NFUN_1277__(VoicePack, TeleportParms.StartSound);
	PrecacheIndex.__NFUN_1277__(VoicePack, TeleportParms.EndSound);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_JetPackBoost');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_JetpackOn');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_JetPackOff');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_JetpackHaywire');
	PrecacheIndex.__NFUN_1277__(VoicePack, HaywireParms.ExplosionSoundName);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Melee');
	// End:0x2DC
	if(__NFUN_310__(PrecacheIndex.MapName, "Map02"))
	{
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_ArmWhoosh');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_ClawSwipe');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_HollowMetalImpact');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_BigValve');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_MetalGibExplosion');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'SCR_ThumpMetal');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_MetalImpact');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'SCR_RipFloor');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'SCR_RipFloor');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_SplitDoorNudge');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_SplitDoorRoar');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_ElevatorOpen');
	}
	RegisterAIAnimationControllerEntry(PrecacheIndex, TeleportParms.StartAnimName);
	RegisterAIAnimationControllerEntry(PrecacheIndex, TeleportParms.EndAnimName);
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Idle');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Fire');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_FireDelay');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_FireTurnLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_FireTurnRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Walk');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_WalkBackwards');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Run');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RunBackwards');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnLeft45');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnLeft180');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnRight45');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnRight180');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepLeftSlow');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepRightSlow');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_DodgeLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_DodgeRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Attack');
	// End:0x469
	if(PrecacheIndex.bPlayerCanBeShrunk)
	{
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_AttackShrunk');
	}
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Roar');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Jump0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Fall0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Land0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_HeavyLand0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Jump1');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Fall1');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Land1');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_HeavyLand1');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StartFall0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Shoot');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StandCombat');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StandScared');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Crouch');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_JetPack');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainShort');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_DieFinishMe');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_FinishMeIdle');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_FinishRevival');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ExpanderStart');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ExpanderIdle');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ExitDropship');
	// End:0x60C
	if(PrecacheIndex.bPlayerCanBeShrunk)
	{
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Stomp');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Stubfoot');
	}
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFront');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontHead');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontLeftLeg');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontLeftDodge');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontRightLeg');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontRightDodge');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainBack');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainBackLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainBackRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontHeadBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontLeftBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontLeftLegBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontRightBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainFrontRightLegBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainBackBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainBackLeftBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainBackRightBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MeleePainFront');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MeleePainFrontLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MeleePainFrontRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MeleePainBack');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MeleePainFrontBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MeleePainFrontLeftBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MeleePainFrontRightBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MeleePainBackBig');
	return;
}

event EnumerateUsableAnimationControllers(PrecacheIndex PrecacheIndex, out array<Engine.BaseAI.EAIAnimController> UsableControllers)
{
	UsableControllers[string(UsableControllers)] = 2;
	UsableControllers[string(UsableControllers)] = 5;
	// End:0x69
	if(__NFUN_145__(__NFUN_310__(PrecacheIndex.MapName, "Map00")))
	{
		UsableControllers[string(UsableControllers)] = 9;
		// End:0x69
		if(__NFUN_201__(ChanceFly, 0))
		{
			UsableControllers[string(UsableControllers)] = 8;
		}
	}
	// End:0x94
	if(__NFUN_310__(PrecacheIndex.MapName, "Map02"))
	{
		UsableControllers[string(UsableControllers)] = 10;
	}
	return;
}

state GotoX
{
	event BeginState()
	{
		super.BeginState();
		return;
	}

	event EndState()
	{
		super.EndState();
		return;
	}
	stop;
}

state AnimX
{
	event BeginState()
	{
		super.BeginState();
		return;
	}

	function TimeoutTeleportAnim()
	{
		// End:0x3E
		if(__NFUN_148__(__NFUN_173__(int(GetCurrentOp()), int(138)), __NFUN_173__(TeleportParms.Mode, 0)))
		{
			ExitAIState(2, "Teleport timed out.");
		}
		return;
	}
	stop;
}

defaultproperties
{
	DoWobble=true
	JetPackEffectMount[0]=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=true,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=mount_jetengine1,MountOrigin=(X=-2.332567E-17,Y=3.78925E-17,Z=-0.184),Z=-0.116)
	JetPackEffectMount[1]=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=true,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=mount_jetengine2,MountOrigin=(X=-1.119868E+24,Y=3.789248E-17,Z=-0.198),Z=-0.019)
	JetPackBackFireFXClass='p_Creatures.AssaultTrooper_JetPackFX.AssaultTrooper_JetPackFX_Explosion_Spawner'
	JetPackSmokeTrailFXClass='p_Creatures.AssaultTrooper_JetPackFX.AssaultTrooper_JetPackFX_Explosion_SmokeTrail'
	LastGotoOpRef=-1
	ChanceCloak=0.2
	MuzzleFlashClass='dnParticles.dnMuzzleFX_Spawner_AssTroopCaptain'
	MuzzleLightClass='dnGame.Weapon_LightEx_AssTroopCaptain'
	TracerClass='dnGame.dnTracerFX_BeamSegment'
	WaterTracerClass='p_Weapons.Generic.WaterBubblesTracer'
	FiringSound=Sound_FireWeapon
	MinBulletDamage=5
	RndBulletDamage=3
	ReloadCountDown=6
	FlyGate=1
	JumpGate=5
	LandGate=10
	TeleportGate=5
	ChanceTeleport_ActionPoint=0.2
	ChanceTeleport_Reaction=1
	ChanceRoamSound=0.5
	ChanceIdleInAir=1
	AllowQuickTeleports=true
	WeaponClass='AssaultTrooper_Captain_Weapon'
	
	Cond=0
	A=0
}