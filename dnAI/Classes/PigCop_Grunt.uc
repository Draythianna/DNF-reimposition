/*******************************************************************************
 * PigCop_Grunt generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PigCop_Grunt extends AIActor
	config
	collapsecategories
	dependson(dnControl_PigCop_Grapple);

const UninitialisedContactTime = -99.0f;
const ChanceIdleSound = 0.25f;
const ChancePursuitSound = 0.25f;
const MinContactTime = 0.6f;
const ChanceGotoCover = 0.25f;
const MaxGotoCoverTime = 8.0f;
const MaxThreatTimeSinceSeen = 2.0f;
const ChanceCrouch = 0.45f;
const ChanceProne = 0.25f;
const MinSafeReloadTime = 6.0f;
const BezerkHealthThresh = 0.45f;
const SkinIndex = 0;
const BloodIndex = 1;
const BezerkColourPeriod = 1.0f;

var private float StartContactTime;
var private int BezerkHealth;
var private float BezerkTime;
var private float GotoXStartTime;
var() noexport Color BezerkSkinColor "Colour to turn the skin section when Bezerk";
var() noexport Color BezerkBloodColor "Colour to turn the blood section when Bezerk";
var() noexport class<Actor> BloodSpurt "Particle class to spawn when going Bezerk";
var() noexport int PipeBombDrops "The number of pipebombs to *possibly* drop on death. This is the number of times you roll again PipeBombDropChance, if it passes you drop one, if it doesnt you dont";
var() noexport float PipeBombDropChance "Chance of dropping a pipebomb. from 0.0 - 1.0.";
var(AIBehavior) noexport bool StartBezerk "Start out in Bezerk mode?";
var(AIBehavior) noexport float ChanceBezerk "Chance we'll go bezerk when low on health.";
var() noexport float BerzSpazSoundMinTime "Minimum time between each bezerk space sound.";
var() noexport float BerzSpazSoundRndTime "Random additional time, on top of the min time ";
var() noexport SStompInfo BerzStompInfo "How we stomp when berzerked";
var() noexport float BerzChanceGrapple "Chance of doing berzerk grapple";
var() float BerzGrappleMinInterval;
var float BerzGrappleGate;
var bool Bezerked;
var float BerzSpazGate;
var() float JumpSpeed;
var() float PainSlowDownScale;
var float QuickPipeBombTime;
var PopUpCfg QuickPipeBombCfg;
var() float QuickPipeBombMaxDot;

event PostBeginPlay()
{
	super.PostBeginPlay();
	QuickPipeBombTime = __NFUN_198__(Level.GameTimeSeconds, 5);
	// End:0x7F
	if(__NFUN_150__(__NFUN_150__(StartBezerk, __NFUN_173__(int(AnimCtrl.m_eController), int(6))), __NFUN_173__(int(AttackConstraint), int(3))))
	{
		BezerkHealth = int(Health);
		SetBezerkerDamage();
		__NFUN_601__('Generic0', BezerkSkinColor);
		__NFUN_601__('Generic1', BezerkBloodColor);		
	}
	else
	{
		// End:0x9E
		if(__NFUN_200__(__NFUN_222__(), ChanceBezerk))
		{
			BezerkHealth = int(__NFUN_195__(Health, 0.45));
		}
	}
	return;
}

event KImpact(name SelfBoneName, KarmaActor Other, name OtherBoneName, Vector Position, Vector ImpactVelocity, Vector ImpactNormal)
{
	super.KImpact(SelfBoneName, Other, OtherBoneName, Position, ImpactVelocity, ImpactNormal);
	return;
}

function NotifyToeStubStart()
{
	// End:0x1C
	if(ToeStubInfo.bDropWeapon)
	{
		bAllowWeaponDropsPlayerNotSameSize = true;
		DropCarriedWeapon();
	}
	// End:0x45
	if(__NFUN_148__(ToeStubInfo.bBerzerkAfterStub, AllowBezerk))
	{
		BezerkHealth = int(__NFUN_198__(Health, float(1)));
	}
	return;
}

event Tick(float Secs)
{
	local float Alpha;

	super(Actor).Tick(Secs);
	// End:0xB6
	if(__NFUN_201__(BezerkTime, 0))
	{
		Alpha = __NFUN_227__(__NFUN_196__(__NFUN_199__(Level.GameTimeSeconds, BezerkTime), 1), 0, 1);
		// End:0x96
		if(__NFUN_145__(Bezerked))
		{
			__NFUN_601__('Generic0', __NFUN_338__(Alpha, default.ActorColorList[0].ActorColor, BezerkSkinColor));
			__NFUN_601__('Generic1', __NFUN_338__(Alpha, default.ActorColorList[1].ActorColor, BezerkBloodColor));
		}
		// End:0xB6
		if(__NFUN_203__(Alpha, 1))
		{
			SetBezerkerDamage();
			BezerkTime = 0;
		}
	}
	// End:0x10A
	if(Bezerked)
	{
		// End:0x10A
		if(__NFUN_200__(BerzSpazGate, Level.GameTimeSeconds))
		{
			BerzSpazGate = __NFUN_198__(Level.GameTimeSeconds, __NFUN_198__(BerzSpazSoundMinTime, __NFUN_195__(BerzSpazSoundRndTime, __NFUN_222__())));
			FindSoundAndSpeak('Sound_BerzSpaz');
		}
	}
	return;
}

event NotifySetTargetActor()
{
	super.NotifySetTargetActor();
	return;
}

function SetCurrentWeapon(class<Weapon> NewWeaponClass, optional Weapon NewWeapon)
{
	super.SetCurrentWeapon(NewWeaponClass, NewWeapon);
	// End:0x75
	if(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_357__(WeaponManager.CurrentWeaponClass, class'Shotgun'), __NFUN_357__(WeaponManager.CurrentWeaponClass, class'DualPistol')), __NFUN_357__(WeaponManager.CurrentWeaponClass, class'MachineGun')), __NFUN_357__(WeaponManager.CurrentWeaponClass, class'RPG')))
	{
		UseActionPoints = true;		
	}
	else
	{
		ReleaseActionPoint(false);
		UseActionPoints = false;
	}
	return;
}

k2call simulated function Start_ColorChange(optional EventInfo AnimEventInfo)
{
	BezerkTime = Level.GameTimeSeconds;
	// End:0x4F
	if(__NFUN_340__(BloodSpurt, none))
	{
		__NFUN_615__(BloodSpurt,,, __NFUN_568__().__NFUN_533__('jaw', true), __NFUN_568__().__NFUN_534__('jaw', true), true, true);
	}
	return;
}

event bool ShouldProceduralFire()
{
	local Vector v1, V2;
	local float D;

	// End:0x169
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_145__(CurrentOpMustFinish), __NFUN_202__(QuickPipeBombTime, Level.GameTimeSeconds)), __NFUN_339__(MountParent, none)), __NFUN_174__(NumPipeBombs, 0)), CanProcFire), __NFUN_145__(Bezerked)), __NFUN_173__(int(GetCurrentOp()), int(85))), PrimaryTarget.IsValidTarget()), __NFUN_200__(PrimaryTargetActor.Location.Z, Location.Z)))
	{
		v1 = PrimaryTarget.GetDirTo();
		V2 = v1;
		V2.Z = 0;
		V2 = __NFUN_253__(V2);
		D = __NFUN_244__(v1, V2);
		// End:0x169
		if(__NFUN_148__(__NFUN_200__(D, QuickPipeBombMaxDot), __NFUN_200__(PrimaryTarget.GetDist2D(), __NFUN_195__(CollisionRadius, 60))))
		{
			SetPopUp(QuickPipeBombCfg);
			CanUseOp(100);
			CurrentOpMustFinish = false;
			ExecuteOp(100);
			CurrentOpMustFinish = true;
			SuspendExecutive(true);
			SuspendExecutive(false);
			CurrentOpMustFinish = true;
			return false;
		}
	}
	return super.ShouldProceduralFire();
	return;
}

event bool IsReturningToBerzerk()
{
	return Bezerked;
	return;
}

function Anim_MoveTo(Engine.BaseAI.EAIMoveSpeed MoveSpeed)
{
	super.Anim_MoveTo(MoveSpeed);
	// End:0x30
	if(__NFUN_148__(__NFUN_340__(PrimaryTargetActor, none), __NFUN_200__(__NFUN_222__(), 0.25)))
	{
		FindSoundAndSpeak('Sound_Pursuit');
	}
	return;
}

event Engine.BaseAI.EAICode COND_ShouldEngage()
{
	local Pawn pawnTarget;

	// End:0x0C
	if(IsBezerked())
	{
		return 1;
	}
	// End:0x32
	if(PrimaryTargetActor.bIsPawn)
	{
		pawnTarget = Pawn(PrimaryTargetActor);		
	}
	else
	{
		return 0;
	}
	// End:0x48
	if(__NFUN_145__(IsEnemyTo(pawnTarget)))
	{
		return 4;
	}
	// End:0x5A
	if(__NFUN_173__(int(COND_ShouldRunAway()), int(0)))
	{
		return 37;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldCrouchEngage()
{
	// End:0x27
	if(__NFUN_148__(__NFUN_174__(int(CheckCondition(31)), int(0)), __NFUN_174__(int(CheckCondition(33)), int(0))))
	{
		return 39;
	}
	// End:0x36
	if(__NFUN_201__(__NFUN_222__(), 0.45))
	{
		return 25;
	}
	return CheckCondition(62);
	return;
}

event Engine.BaseAI.EAICode COND_ShouldProneEngage()
{
	local Engine.BaseAI.EAICode Code;

	// End:0x0E
	if(__NFUN_145__(AllowProne))
	{
		return 1;
	}
	// End:0x2B
	if(__NFUN_201__(PrimaryTarget.GetTimeSinceSeen(), 0.1))
	{
		return 55;
	}
	// End:0x52
	if(__NFUN_148__(__NFUN_174__(int(CheckCondition(31)), int(0)), __NFUN_174__(int(CheckCondition(33)), int(0))))
	{
		return 39;
	}
	Code = CheckCondition(42);
	// End:0x74
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	// End:0x91
	if(__NFUN_200__(PrimaryTarget.GetRange2D(), 280))
	{
		return 18;
	}
	// End:0xB3
	if(__NFUN_148__(__NFUN_201__(__NFUN_222__(), 0.25), __NFUN_173__(int(CheckCondition(64)), int(0))))
	{
		return 25;
	}
	return CheckCondition(66);
	return;
}

event Engine.BaseAI.EAICode COND_GotoAttackInPosition()
{
	local Engine.BaseAI.EAICode Code;

	Code = CheckCondition(61);
	// End:0x2D
	if(__NFUN_174__(int(Code), int(0)))
	{
		StartContactTime = -99;
		return Code;
	}
	// End:0x54
	if(__NFUN_204__(StartContactTime, -99))
	{
		StartContactTime = Level.GameTimeSeconds;		
	}
	else
	{
		// End:0x82
		if(__NFUN_203__(__NFUN_199__(Level.GameTimeSeconds, StartContactTime), 0.6))
		{
			StartContactTime = -99;
			return 0;
		}
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldKeepWeaponUp()
{
	// End:0x48
	if(__NFUN_148__(__NFUN_148__(PrimaryTarget.IsValidTarget(), __NFUN_200__(PrimaryTarget.GetTimeSinceSeen(), 8)), __NFUN_200__(PathInfo.TotalDist, 800)))
	{
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldStandUp()
{
	local Engine.BaseAI.EAICode Code;

	Code = CheckCondition(32);
	// End:0x22
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	Code = CheckCondition(39);
	// End:0x44
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	Code = CheckCondition(50);
	// End:0x66
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldStandCombat()
{
	local Engine.BaseAI.EAICode Code;

	Code = CheckCondition(40);
	// End:0x22
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	Code = CheckCondition(38);
	// End:0x44
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	Code = CheckCondition(32);
	// End:0x66
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldGoBezerk()
{
	// End:0x0E
	if(__NFUN_145__(AllowBezerk))
	{
		return 1;
	}
	// End:0x1A
	if(Bezerked)
	{
		return 0;
	}
	// End:0x2D
	if(__NFUN_201__(Health, float(BezerkHealth)))
	{
		return 62;
	}
	SetBezerkerDamage();
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_IsBezerked()
{
	// End:0x0F
	if(IsBezerked())
	{
		return 0;		
	}
	else
	{
		return 1;
	}
	return;
}

event Engine.BaseAI.EAICode COND_ShouldFaceTargetWhileReloading()
{
	// End:0x0F
	if(__NFUN_340__(ActionPoint, none))
	{
		return 1;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_NotBezerking()
{
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldRunAway()
{
	local Engine.BaseAI.EAICode Code;
	local Pawn pawnTarget;

	Code = COND_ShouldAvoidTarget();
	// End:0x20
	if(__NFUN_174__(int(Code), int(0)))
	{
		return Code;
	}
	// End:0x3F
	if(__NFUN_148__(__NFUN_173__(int(COND_SafeFromBiggerEnemy()), int(0)), __NFUN_145__(HasTripMineAttached())))
	{
		return 1;
	}
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldAvoidTarget()
{
	local Engine.BaseAI.EAICode Code;

	Code = super.COND_ShouldAvoidTarget();
	// End:0x1D
	if(__NFUN_173__(int(Code), int(53)))
	{
		return 0;
	}
	return Code;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldFlee()
{
	// End:0x1C
	if(__NFUN_200__(Level.GameTimeSeconds, MoveAroundTime))
	{
		return 60;
	}
	// End:0x2C
	if(__NFUN_145__(SetGoal(13)))
	{
		return 53;
	}
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_GotoActionPointBerzerking()
{
	// End:0x11
	if(__NFUN_145__(SetGoal(2, true)))
	{
		return 53;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldStopGuarding()
{
	// End:0x15
	if(__NFUN_339__(Weapon, none))
	{
		ClearGuard();
		return 0;
	}
	return 1;
	return;
}

function Engine.BaseAI.EAICode COND_TurnTowardsTarget()
{
	local Engine.BaseAI.EAICode Code;
	local Vector D;

	// End:0x0F
	if(__NFUN_339__(PrimaryTargetActor, none))
	{
		return 4;
	}
	D = __NFUN_239__(PrimaryTarget.GetPos(), Location);
	// End:0x46
	if(__NFUN_201__(__NFUN_244__(D, Vector(Rotation)), 0))
	{
		return 9;
	}
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_TargetVisible2()
{
	// End:0x18
	if(__NFUN_145__(PrimaryTarget.IsValidTarget()))
	{
		return 4;
	}
	// End:0x35
	if(__NFUN_200__(PrimaryTarget.GetTimeVisible(), 2))
	{
		return 60;
	}
	return 0;
	return;
}

event bool ShouldUseWeaponActiveMovement()
{
	// End:0x0B
	if(Bezerked)
	{
		return false;
	}
	return super.ShouldUseWeaponActiveMovement();
	return;
}

function SetBezerkerDamage()
{
	WeaponTargetEvalInfo.CanTargetProjectiles = false;
	WeaponTargetEvalInfo.CanAvoidTargetableProjectiles = false;
	HasBoneAimer = false;
	BerzSpazGate = __NFUN_198__(Level.GameTimeSeconds, __NFUN_198__(BerzSpazSoundMinTime, __NFUN_195__(BerzSpazSoundRndTime, __NFUN_222__())));
	Bezerked = true;
	StompInfo.Empty();
	StompInfo[StompInfo.Add(1)] = BerzStompInfo;
	MinPainOpInterval = class'Pigcop_Berzerker'.default.MinPainOpInterval;
	RndPainOpInterval = class'Pigcop_Berzerker'.default.RndPainOpInterval;
	MaxConsecutivePainOp = class'Pigcop_Berzerker'.default.MaxConsecutivePainOp;
	MaxConsecutivePainInterval = class'Pigcop_Berzerker'.default.MaxConsecutivePainInterval;
	MeleeAttackRange = class'Pigcop_Berzerker'.default.MeleeAttackRange;
	MeleeZone = class'Pigcop_Berzerker'.default.MeleeZone;
	AnimControllers[4].m_cClass = class'Pigcop_Berzerker'.default.AnimControllers[4].m_cClass;
	bTryBackupPathingOnFailure = true;
	return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
	super.NotifyOpEnded(Op, Status);
	// End:0x5A
	if(__NFUN_173__(int(Op), int(9)))
	{
		bDontUseAIOPPain = class'Pigcop_Berzerker'.default.bDontUseAIOPPain;
		bNeverFailOnDynamicPath = class'Pigcop_Berzerker'.default.bNeverFailOnDynamicPath;
		bIgnoreTripMines = true;
		DropWeapon();
	}
	return;
}

event bool SetAnimController(Engine.BaseAI.EAIAnimController eController)
{
	local bool bReturnVal;

	bReturnVal = super.SetAnimController(eController);
	// End:0x50
	if(Bezerked)
	{
		// End:0x48
		if(__NFUN_173__(int(AnimCtrl.m_eController), int(6)))
		{
			bDontUseAIOPPain = class'Pigcop_Berzerker'.default.bDontUseAIOPPain;			
		}
		else
		{
			bDontUseAIOPPain = false;
		}
	}
	return bReturnVal;
	return;
}

event bool IsBezerked()
{
	return __NFUN_148__(Bezerked, __NFUN_173__(int(AnimCtrl.m_eController), int(6)));
	return;
}

function ExecuteNonOPPain()
{
	// End:0x10
	if(__NFUN_173__(int(CurrentOp), int(9)))
	{
		return;
	}
	super.ExecuteNonOPPain();
	GroundSpeedScale = PainSlowDownScale;
	return;
}

function EndNonOPPain()
{
	super.EndNonOPPain();
	GroundSpeedScale = 1;
	return;
}

event PrioritizePopups(Engine.BaseAI.EAIPopUpType PopupType)
{
	local array<PopUpCfg> Entrys;

	super.PrioritizePopups(PopupType);
	return;
}

event OverridePopoutHoldTime(out float HoldTime)
{
	return;
}

function DiedActivity(optional Pawn Killer, optional int Damage, optional Vector DamageOrigin, optional Vector DamageDirection, optional class<DamageType> DamageType, optional name HitBoneName)
{
	local bool bShrunk;
	local PipeBombPickup pb;
	local int i;

	bShrunk = IsMostlyShrunk();
	super.DiedActivity(Killer, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName);
	// End:0x6C
	if(__NFUN_148__(__NFUN_340__(Level.__NFUN_1161__(), none), __NFUN_147__(bShrunk, Level.__NFUN_1161__().IsMostlyShrunk())))
	{
		return;
	}
	// End:0x84
	if(__NFUN_150__(__NFUN_173__(NumPipeBombs, 0), bDisableWeaponDrops))
	{
		return;
	}
	i = 0;
	J0x8B:

	// End:0x146 [Loop If]
	if(__NFUN_169__(i, PipeBombDrops))
	{
		// End:0x13C
		if(__NFUN_200__(__NFUN_222__(), __NFUN_227__(PipeBombDropChance, 0, 1)))
		{
			pb = __NFUN_615__(class'PipeBombPickup',,, Location, Rotation);
			// End:0xF8
			if(bShrunk)
			{
				pb.__NFUN_591__(__NFUN_195__(pb.default.DrawScale, 0.25));
			}
			pb.__NFUN_790__(__NFUN_234__(__NFUN_234__(__NFUN_232__(__NFUN_223__(-1, 1), __NFUN_223__(-1, 1), 2), 250), pb.DrawScale));
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x8B;
	}
	return;
}

function AIActor_Weapon_Holster(RenderActor HolsteredWeapon)
{
	local Weapon MyWeapon;

	super.AIActor_Weapon_Holster(HolsteredWeapon);
	// End:0x32
	if(GetHideWhenMultipleHolstered(Weapon(HolsteredWeapon)))
	{
		HideAllWeaponsForHolstering();
		HolsteredWeapon.__NFUN_590__(false);
	}
	MyWeapon = GetWeapon();
	return;
}

static function class<AIActor> GetSpawnClass(AIActorFactory Factory)
{
	Factory.BroadcastLog(__NFUN_302__(__NFUN_303__(__NFUN_302__("Warning: Pigcop_Grunt is deprecated. Please use Pigcop_Machinegn, Pigcop_Shotgun, Pigcop_Grunt_RPG, or Pigcop_DualPistol. Factory: ", string(Factory)), "Tag: "), string(Factory.Tag)));
	return class'PigCop_DualPistol';
	return;
}

event float GetGotoMeleeRange()
{
	// End:0x29
	if(__NFUN_148__(Bezerked, __NFUN_173__(int(CheckCondition(94)), int(0))))
	{
		return __NFUN_199__(MeleeZone, CollisionRadius);
	}
	return 0.1;
	return;
}

event Engine.BaseAI.EAICode COND_NeedHoldFire()
{
	// End:0x0C
	if(WeaponManagerCompletelyOff())
	{
		return 1;
	}
	return 0;
	return;
}

event Engine.BaseAI.EAICode AttemptGrapplePlayer()
{
	local dnControl_PigCop_Grapple GrappleControl;
	local PlayerPawn P;
	local float OffsetZ;
	local Vector TargetPos, Offset2D;
	local int i;
	local array<Actor> BlockingActors;

	// End:0x1C
	if(__NFUN_206__(Level.HeadScaleModifier, 1))
	{
		return 1;
	}
	// End:0x38
	if(__NFUN_201__(BerzGrappleGate, Level.GameTimeSeconds))
	{
		return 1;
	}
	// End:0x5E
	if(__NFUN_201__(Level.BerzerkerGrappleGate, Level.GameTimeSeconds))
	{
		return 1;
	}
	P = Level.__NFUN_1161__();
	// End:0x84
	if(__NFUN_340__(P, PrimaryTargetActor))
	{
		return 1;
	}
	// End:0x364
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(Bezerked, __NFUN_173__(int(FrozenState), int(0))), __NFUN_145__(__NFUN_921__())), __NFUN_340__(P, none)), __NFUN_145__(P.IsDead())), __NFUN_145__(P.bAttachedToUsableSomething)), __NFUN_145__(P.__NFUN_921__())))
	{
		i = __NFUN_166__(string(MountedActorList), 1);
		J0x106:

		// End:0x13A [Loop If]
		if(__NFUN_172__(i, 0))
		{
			// End:0x130
			if(__NFUN_340__(LaserMine(MountedActorList[i].MountedActor), none))
			{
				return 1;
			}
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x106;
		}
		// End:0x364
		if(__NFUN_202__(__NFUN_244__(Vector(P.Rotation), Vector(Rotation)), -0.7))
		{
			TargetPos = __NFUN_239__(__NFUN_239__(class'dnControl_PigCop_Grapple'.default.PigCopMountPrefab.MountOrigin, P.PrePivot), __NFUN_232__(0, 0, P.CollisionHeight));
			TargetPos = __NFUN_238__(P.Location, __NFUN_263__(TargetPos, P.Rotation));
			Offset2D = __NFUN_239__(Location, TargetPos);
			Offset2D.Z = 0;
			OffsetZ = __NFUN_211__(__NFUN_199__(__NFUN_199__(Location.Z, CollisionHeight), __NFUN_199__(P.Location.Z, P.CollisionHeight)));
			// End:0x364
			if(__NFUN_148__(__NFUN_202__(__NFUN_251__(Offset2D), 70), __NFUN_200__(OffsetZ, 15)))
			{
				BlockingActors = __NFUN_637__(TargetPos, Rotation, true, false, CollisionRadius, CollisionHeight);
				// End:0x364
				if(__NFUN_148__(__NFUN_638__(TargetPos, CollisionRadius, CollisionHeight, Rotation), __NFUN_173__(string(BlockingActors), 0)))
				{
					BerzGrappleGate = __NFUN_198__(Level.GameTimeSeconds, BerzGrappleMinInterval);
					// End:0x2C8
					if(__NFUN_200__(BerzChanceGrapple, __NFUN_222__()))
					{
						return 1;
					}
					GrappleControl = dnControl_PigCop_Grapple(FindAnyActor(class'dnControl_PigCop_Grapple'));
					// End:0x2F8
					if(__NFUN_339__(GrappleControl, none))
					{
						GrappleControl = __NFUN_615__(class'dnControl_PigCop_Grapple');
					}
					// End:0x364
					if(GrappleControl.CanBeUsedBy(P))
					{
						GrappleControl.PIGCOP = self;
						GrappleControl.TriggerFunc_ForcePlayerAttach();
						Level.BerzerkerGrappleGate = __NFUN_198__(Level.GameTimeSeconds, Level.BerzerkerGrappleGlobalIntervalMin);
						return 0;
					}
				}
			}
		}
	}
	return 1;
	return;
}

event Vector GetJumpAttackTargetPos(Actor TargetActor)
{
	local Pawn pawnTarget;
	local float LeadTime, Dist;
	local Vector TargetPos;

	// End:0x23
	if(TargetActor.bIsPawn)
	{
		pawnTarget = Pawn(TargetActor);
	}
	// End:0xA7
	if(__NFUN_340__(pawnTarget, none))
	{
		Dist = __NFUN_251__(__NFUN_239__(pawnTarget.Location, Location));
		LeadTime = __NFUN_196__(Dist, JumpSpeed);
		TargetPos = pawnTarget.__NFUN_906__();
		// End:0x9E
		if(__NFUN_206__(LeadTime, 0))
		{
			__NFUN_249__(TargetPos, __NFUN_234__(pawnTarget.Velocity, LeadTime));
		}
		return TargetPos;		
	}
	else
	{
		return __NFUN_238__(TargetActor.Location, __NFUN_232__(0, 0, __NFUN_195__(TargetActor.CollisionHeight, 0.66)));
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(Pawn).RegisterPrecacheComponents(PrecacheIndex);
	// End:0x39
	if(__NFUN_148__(__NFUN_170__(PipeBombDrops, 0), __NFUN_201__(PipeBombDropChance, 0)))
	{
		PrecacheIndex.__NFUN_1266__(class'PipeBombPickup');
	}
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Idle');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_IdleReady');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Walk');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_WalkReady');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_WalkBackwards');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Run');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RunReady');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RunBackwards');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnLeft45');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnLeft180');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnRight45');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnRight180');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StrafeLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StrafeRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Attack');
	// End:0x1AC
	if(PrecacheIndex.bPlayerCanBeShrunk)
	{
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_AttackShrunk');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Stomp');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StompRight');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StompLeft');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Stubfoot');
	}
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ExitDropship');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RappelStart');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RappelIdle');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RappelEnd');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Draw');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Holster');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Reload');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Shoot');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ShootLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ShootRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Holster');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ThrowPipebomb');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StandCombat');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StandCombatReady');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StandPassive');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Crouch');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_CrouchFromReady');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StandScared');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_DieFinishMe');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_FinishMeIdle');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_FinishRevival');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ExpanderStart');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ExpanderIdle');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Jump0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Fall0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Land0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_HeavyLand0');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainBig');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainRef');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PainShort');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PopWaitUpPipeBomb');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PopOutUpPipeBomb');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PopHoldUpPipeBomb');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PopInUpPipeBomb');
	PrecacheIndex.__NFUN_1269__(class'Climbable_Masking');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Falling');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Idle');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Pursuit');
	// End:0x457
	if(__NFUN_339__(Pigcop_Berzerker(self), none))
	{
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_MovingShootIdle');
		PrecacheIndex.__NFUN_1282__(class'acPigCop_Combat', Mesh);
	}
	// End:0x546
	if(__NFUN_150__(__NFUN_340__(Pigcop_Berzerker(self), none), AllowBezerk))
	{
		PrecacheIndex.__NFUN_1266__(BloodSpurt);
		PrecacheIndex.__NFUN_1266__(class'dnControl_PigCop_Grapple');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Bezerk');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Jump1');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Fall1');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_Land1');
		PrecacheIndex.__NFUN_1282__(class'acPigCop_Bezerk', Mesh);
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_ArmWhoosh');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Bezerk');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_BerzScream');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_BerzSpaz');
	}
	// End:0x711
	if(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_310__(PrecacheIndex.MapName, "Map05"), __NFUN_310__(PrecacheIndex.MapName, "Map06")), __NFUN_310__(PrecacheIndex.MapName, "Map11B")), __NFUN_310__(PrecacheIndex.MapName, "Map16")), __NFUN_310__(PrecacheIndex.MapName, "Map21B")))
	{
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_PickupBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_IdleBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_WalkBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_WalkBackwardsBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RunBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_RunBackwardsBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnLeft45Barrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnLeft180Barrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnRight45Barrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_TurnRight180Barrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepLeftBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepRightBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StrafeLeftBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_StrafeRightBarrel');
		RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ThrowBarrel');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'PickupBarrel');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Pickup');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Throw');
	}
	return;
}

event EnumerateUsableAnimationControllers(PrecacheIndex PrecacheIndex, out array<Engine.BaseAI.EAIAnimController> UsableControllers)
{
	// End:0x3A
	if(__NFUN_339__(Pigcop_Berzerker(self), none))
	{
		UsableControllers[string(UsableControllers)] = 2;
		UsableControllers[string(UsableControllers)] = 5;
		UsableControllers[string(UsableControllers)] = 9;
	}
	// End:0x61
	if(__NFUN_150__(__NFUN_340__(Pigcop_Berzerker(self), none), AllowBezerk))
	{
		UsableControllers[string(UsableControllers)] = 6;
	}
	return;
}

event EnumerateWeaponClasses(PrecacheIndex PrecacheIndex, out array< class<Weapon> > WeaponClasses)
{
	WeaponClasses[string(WeaponClasses)] = class'DualPistol_Pigcop';
	return;
}

state AnimX
{
	event BeginState()
	{
		super.BeginState();
		// End:0x3C
		if(__NFUN_148__(__NFUN_148__(__NFUN_339__(PrimaryTargetActor, none), __NFUN_173__(int(GetCurrentOp()), int(85))), __NFUN_200__(__NFUN_222__(), 0.25)))
		{
			FindSoundAndSpeak('Sound_Idle');
		}
		return;
	}
	stop;
}

state Fall
{
	event BeginState()
	{
		super.BeginState();
		FindSoundAndSpeak('Sound_Falling');
		return;
	}
	stop;
}

state GotoX
{
	event name GetWeaponIdleName()
	{
		return 'Anim_MovingShootIdle';
		return;
	}
	stop;
}

defaultproperties
{
	BezerkSkinColor=(B=87,G=5,R=1,A=255)
	BezerkBloodColor=(B=87,G=5,R=1,A=128)
	BloodSpurt='dnParticles.dnBloodFX_BloodChunks'
	PipeBombDrops=2
	PipeBombDropChance=0.25
	ChanceBezerk=0.5
	BerzSpazSoundMinTime=0.75
	BerzSpazSoundRndTime=0.25
	BerzStompInfo=(StompRadius=100,AnimName=Anim_Stomp,BoneName=hand_right_a,StompDamageAmount=50,StompDamageRadius=80,StompDamageVel=200,StompDamageLift=350,bDebug=false,SafeHeight=50,bCanStompShrunk=true,ShakeInfo=(bNoLerp=false,bToggleSign=true,Style=2,Function=1,FalloffActor=none,FalloffDistance=0,ShakeDuration=0.6,ShakeFrequency=0.08,ShakeMagnitude=2500,ShakeFullMagnitude=0,ShakeFullMagnitudeTime=0,ShakeName=CycloidStompShake),ShakeRadius=6000,ParticleEffectClass='p_Impacts.StompImpact.StompImpact_Spawner',AdditionalEffectBones=(StateTableIndex,Ident),hand_left_a=/* Unknown default property type! */,Vector=ObjectProperty'dnControl_PregnatorFaceHump.Pregnator',bNoRemoveAnim=/* Unknown default property type! */)
	BerzChanceGrapple=0.25
	BerzGrappleMinInterval=2
	JumpSpeed=500
	PainSlowDownScale=0.5
	begin object name=PigPopUpCfg_CrouchUpPipeBomb class=PopUpCfg_CrouchUpPipeBomb
		OutMustFinish=true
		HoldMustFinish=true
		AvoidDanger=false
		AllowPain=false
	object end
	// Reference: PopUpCfg_CrouchUpPipeBomb'PigCop_Grunt.PigPopUpCfg_CrouchUpPipeBomb'
	QuickPipeBombCfg=PigPopUpCfg_CrouchUpPipeBomb
	QuickPipeBombMaxDot=0.8
	AllowFrozenExecution=true
}