/*******************************************************************************
 * Enforcer_Shield generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Enforcer_Shield extends Enforcer
	config
	collapsecategories;

var Enforcer_Armor_Shield Shield;

event bool HasShield()
{
	return __NFUN_148__(__NFUN_340__(Shield, none), __NFUN_339__(Shield.MountParent, self));
	return;
}

function Anim_Idle()
{
	super(AIActor).Anim_Idle();
	// End:0x1A
	if(HasShield())
	{
		PlayAnim('Anim_ShieldIdle');
	}
	return;
}

function Anim_MoveTo(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
	// End:0x12
	if(HasShield())
	{
		Anim_Walk();		
	}
	else
	{
		super.Anim_MoveTo(eMoveSpeed);
	}
	return;
}

function Anim_MoveTo_BackUp(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
	// End:0x12
	if(HasShield())
	{
		Anim_WalkBackward();		
	}
	else
	{
		super(AIActor).Anim_MoveTo_BackUp(eMoveSpeed);
	}
	return;
}

function Anim_MoveTo_StrafeLeft(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
	// End:0x17
	if(HasShield())
	{
		PlayAnim('Anim_SidestepLeft');		
	}
	else
	{
		super(AIActor).Anim_MoveTo_StrafeLeft(eMoveSpeed);
	}
	return;
}

function Anim_MoveTo_StrafeRight(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
	// End:0x17
	if(HasShield())
	{
		PlayAnim('Anim_SidestepRight');		
	}
	else
	{
		super(AIActor).Anim_MoveTo_StrafeRight(eMoveSpeed);
	}
	return;
}

event PostBeginPlay()
{
	// End:0x14
	foreach __NFUN_753__(class'Enforcer_Armor_Shield', Shield)
	{
		// End:0x14
		break;		
	}	
	super.PostBeginPlay();
	return;
}

event NotifyArmorLoss(Destructible_Armor Armor)
{
	super(AIActor).NotifyArmorLoss(Armor);
	// End:0x3C
	if(__NFUN_339__(Armor, Shield))
	{
		Shield = none;
		AnimCtrl.m_oController.EmptyAnimChannel('Weapon_Idle');
	}
	return;
}

event name GetMeleeAttackAnimName()
{
	// End:0x0F
	if(HasShield())
	{
		return 'Anim_AttackShield';
	}
	return super(AIActor).GetMeleeAttackAnimName();
	return;
}

event NotifyOpStarted(Engine.BaseAI.EAIOp NewOp, Engine.BaseAI.EAIOp OldOp)
{
	super(AIActor).NotifyOpStarted(NewOp, OldOp);
	// End:0x43
	if(__NFUN_148__(__NFUN_173__(int(NewOp), int(92)), HasShield()))
	{
		AnimCtrl.m_oController.EmptyAnimChannel('Weapon_Idle');
	}
	return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
	super(AIActor).NotifyOpEnded(Op, Status);
	// End:0x34
	if(__NFUN_148__(__NFUN_173__(int(Op), int(92)), HasShield()))
	{
		PlayAnim('Anim_ShieldIdle');
	}
	return;
}

simulated function bool AcceptsShrinkDamage(Vector DamageLocation)
{
	// End:0x30
	if(__NFUN_148__(__NFUN_340__(Shield, none), __NFUN_203__(__NFUN_244__(__NFUN_253__(__NFUN_239__(DamageLocation, Location)), Vector(Rotation)), 0.2)))
	{
		return false;
	}
	return super(Pawn).AcceptsShrinkDamage(DamageLocation);
	return;
}

function OnStartShrink(optional bool bShrunkByPod)
{
	super(AIActor).OnStartShrink(bShrunkByPod);
	// End:0x28
	if(__NFUN_340__(Shield, none))
	{
		Shield.CriticalDamage();
	}
	return;
}

function DiedActivity(optional Pawn Killer, optional int Damage, optional Vector DamageOrigin, optional Vector DamageDirection, optional class<DamageType> DamageType, optional name HitBoneName)
{
	super(AIActor).DiedActivity(Killer, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName);
	// End:0x40
	if(__NFUN_340__(Shield, none))
	{
		Shield.CriticalDamage();
	}
	return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	super(Pawn).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
	// End:0x5B
	if(__NFUN_148__(__NFUN_202__(Health, __NFUN_196__(HealthCap, float(2))), __NFUN_340__(Shield, none)))
	{
		Shield.CriticalDamage();
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ShieldIdle');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepLeft');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_SidestepRight');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_AttackShield');
	RegisterAIAnimationControllerEntry(PrecacheIndex, 'Anim_ShieldFire');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_ShieldBash');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_ShieldLunge');
	return;
}

defaultproperties
{
	MountOnSpawn=/* Array type was not detected. */
}