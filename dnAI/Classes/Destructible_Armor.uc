/*******************************************************************************
 * Destructible_Armor generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Destructible_Armor extends aFinalDecoration
	abstract
	collapsecategories;

var bool bOnCorpse;
var MotionPrefab MotionPrefab;
var Vector DestroyedPrePivot;
var AIActor AIMountParent;
var float HeadScale;

simulated event HiddenChanged()
{
	super(Actor).HiddenChanged();
	__NFUN_621__(__NFUN_145__(bHidden));
	return;
}

simulated event MountParentDestroyed()
{
	bSurviveDeath = false;
	bSilentDestroy = true;
	DestroyOnDismount = true;
	super(Actor).MountParentDestroyed();
	return;
}

simulated event AttachedToMountParent()
{
	super(Actor).AttachedToMountParent();
	bOnCorpse = MountParent.bIsCorpse;
	AIMountParent = AIActor(MountParent);
	HeadScale = 0;
	// End:0x68
	if(__NFUN_148__(__NFUN_340__(AIMountParent, none), __NFUN_341__(AIMountParent.ExpandingBoneName, 'None')))
	{
		bHasPostMountUpdate = false;
	}
	return;
}

simulated event DetachedFromMountParent()
{
	super(Actor).DetachedFromMountParent();
	// End:0x22
	if(__NFUN_148__(bOnCorpse, __NFUN_145__(DecorationIsDead())))
	{
		CriticalDamage();
	}
	bDoOverlayEffect = false;
	// End:0x47
	if(__NFUN_340__(AIMountParent, none))
	{
		AIMountParent.NotifyArmorLoss(self);
	}
	TimeWarp = default.TimeWarp;
	return;
}

simulated function TripMineAttached(Actor TripMineActor, float AutoDetonateTime)
{
	// End:0x26
	if(__NFUN_340__(MountParent, none))
	{
		MountParent.TripMineAttached(TripMineActor, AutoDetonateTime);
	}
	return;
}

simulated function TripMineExplode(Actor TripMineActor)
{
	// End:0x24
	if(__NFUN_340__(MountParent, none))
	{
		MountParent.TripMineExplode(TripMineActor);		
	}
	else
	{
		// End:0x45
		if(__NFUN_340__(AIMountParent, none))
		{
			AIMountParent.TripMineExplode(TripMineActor);
		}
	}
	return;
}

function CopyOwnerProperties()
{
	return;
}

simulated event Engine.Actor.ETraceFireHitResponse TraceFireHit(Actor SourceActor, class<TraceDamageType> TraceDamageType, Vector SourceTraceOrigin, Vector HitLocation, Vector HitNormal, name HitBoneName, bool bExtentTrace)
{
	// End:0x122
	if(__NFUN_148__(__NFUN_340__(MountParent, none), MountParent.bIsPawn))
	{
		// End:0x76
		if(__NFUN_173__(int(Pawn(MountParent).FrozenState), int(2)))
		{
			return MountParent.TraceFireHit(SourceActor, TraceDamageType, SourceTraceOrigin, HitLocation, HitNormal, MountMeshItem, bExtentTrace);			
		}
		else
		{
			// End:0x122
			if(__NFUN_148__(__NFUN_148__(__NFUN_340__(SourceActor, none), __NFUN_340__(SourceActor.Instigator, none)), SourceActor.Instigator.bIsPlayerPawn))
			{
				// End:0x122
				if(__NFUN_148__(PlayerPawn(SourceActor.Instigator).bOnSteroids, __NFUN_357__(TraceDamageType, class'MeleeDamage')))
				{
					return MountParent.TraceFireHit(SourceActor, TraceDamageType, SourceTraceOrigin, HitLocation, HitNormal, MountMeshItem, bExtentTrace);
				}
			}
		}
	}
	return super(KarmaActor).TraceFireHit(SourceActor, TraceDamageType, SourceTraceOrigin, HitLocation, HitNormal, HitBoneName, bExtentTrace);
	return;
}

simulated event Destroyed()
{
	local Vector AdjustedLocation;

	// End:0x0F
	if(__NFUN_340__(MountParent, none))
	{
		__NFUN_631__();
	}
	super(dnDecoration).Destroyed();
	// End:0xBF
	if(bSurviveDeath)
	{
		// End:0x5E
		if(__NFUN_243__(PrePivot, DestroyedPrePivot))
		{
			AdjustedLocation = __NFUN_238__(Location, __NFUN_263__(__NFUN_239__(DestroyedPrePivot, PrePivot), Rotation));
			__NFUN_597__(DestroyedPrePivot);
			__NFUN_645__(AdjustedLocation);
		}
		Level.NoteSpawnedArmorPiece(self);
		__NFUN_835__(self, MotionPrefab, int(ThisFrameDamage.Damage), ThisFrameDamage.DamageOrigin, ThisFrameDamage.DamageDirection, ThisFrameDamage.DamageType);
		// End:0xBF
		if(__NFUN_202__(__NFUN_196__(DrawScale, default.DrawScale), 0.5))
		{
			PhysicsMassType = 0;
		}
	}
	return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	// End:0x1B
	if(__NFUN_339__(Instigator, MountParent))
	{
		Damage = 0;
	}
	super(dnDecoration).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
	return;
}

simulated event PostMountUpdateHelper()
{
	local Vector BoneScaleVector;
	local float BoneScale, OldDrawScale;

	// End:0x100
	if(__NFUN_206__(HeadScale, Level.HeadScaleModifier))
	{
		// End:0x100
		if(__NFUN_148__(__NFUN_148__(__NFUN_340__(MountParent, none), __NFUN_173__(int(MountType), int(2))), __NFUN_340__(MountParent.__NFUN_568__(), none)))
		{
			OldDrawScale = DrawScale;
			BoneScaleVector = MountParent.MeshInstance.__NFUN_535__(MountMeshItem, true, false);
			BoneScale = __NFUN_196__(__NFUN_211__(__NFUN_198__(__NFUN_198__(BoneScaleVector.X, BoneScaleVector.Y), BoneScaleVector.Z)), 3);
			__NFUN_591__(__NFUN_196__(__NFUN_195__(__NFUN_195__(BoneScale, default.DrawScale), MountParent.DrawScale), MountParent.default.DrawScale));
			// End:0x100
			if(__NFUN_206__(OldDrawScale, DrawScale))
			{
				HeadScale = Level.HeadScaleModifier;
			}
		}
	}
	return;
}

defaultproperties
{
	begin object name=MP_DestructibleArmor_FlyOff class=MotionPrefab
		bUseDamageInfo=false
		bUseParentVelocity=false
		bUseParentRotationRate=false
		Velocity=(X=1.298303E-41,Y=3.773024E-17,Z=0)
	object end
	// Reference: MotionPrefab'Destructible_Armor.MP_DestructibleArmor_FlyOff'
	MotionPrefab=MP_DestructibleArmor_FlyOff
	bSurviveDeath=true
	DestroyedActivities=/* Array type was not detected. */
	bLoopAnim=false
	bBlockCamera=false
	bIsDestructibleArmor=true
	bCastStencilShadows=false
	bStepUpAble=false
	bCollideWorld=false
	CollisionRadius=5
	CollisionHeight=5
	Mass=10
	DismountPhysics=18
}