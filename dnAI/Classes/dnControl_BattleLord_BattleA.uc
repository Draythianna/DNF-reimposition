/*******************************************************************************
 * dnControl_BattleLord_BattleA generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_BattleLord_BattleA extends dnControl_TapPowered
	collapsecategories;

var() deprecated BattleLord_Boss Battlelord;
var name GridName;

simulated function PostVerifySelf()
{
	super.PostVerifySelf();
	Battlelord = BattleLord_Boss(Owner);
	return;
}

simulated function AttachPawnSuccess(Pawn Attachee, optional bool bForced)
{
	super(dnControl).AttachPawnSuccess(Attachee, bForced);
	User.TickBefore = Battlelord;
	DestroyOnDismount = false;
	__NFUN_631__();
	// End:0x57
	if(__NFUN_340__(Battlelord, none))
	{
		Battlelord.FadeOverlayEffect(0, 1);
	}
	return;
}

simulated function PlayUserAnim()
{
	super(dnControl).PlayUserAnim();
	// End:0x71
	if(__NFUN_148__(__NFUN_148__(__NFUN_342__(States[CurrentStateIndex].UserAnimName, 'None'), __NFUN_340__(Battlelord, none)), __NFUN_340__(Battlelord.AnimationController, none)))
	{
		Battlelord.AnimationController.SetAnimState(States[CurrentStateIndex].UserAnimName);
	}
	return;
}

simulated function FailTimer()
{
	ControlEvent(, 'Fail');
	return;
}

simulated event Actor GetIKActor(name LimbID)
{
	return Battlelord;
	return;
}

simulated event bool UsableSomething_AIShouldIgnoreUser()
{
	return true;
	return;
}

final simulated function SelfDestruct()
{
	__NFUN_614__();
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_Motion_Generic');
	PrecacheIndex.__NFUN_1281__(GridName);
	return;
}

state() idle
{
	event BeginState()
	{
		__NFUN_607__(Battlelord.StrengthTapTimeout, false, 'FailTimer');
		FindAndPlaySound('STR_Motion_Generic');
		FindAndFadeSound('STR_Motion_Generic', 0, 0.1, 1);
		super(Object).BeginState();
		return;
	}

	event EndState()
	{
		__NFUN_608__('FailTimer');
		FindAndFadeSound('STR_Motion_Generic', 0.5, 0, 1);
		super(Object).EndState();
		return;
	}

	function FullyLifted()
	{
		super(dnControl_TapPowered).FullyLifted();
		ControlEvent(, 'Finish');
		return;
	}

	function UpdateUserLift()
	{
		super(dnControl_TapPowered).UpdateUserLift();
		FindAndFadeSound('STR_Motion_Generic', 0.03, __NFUN_225__(0.1, __NFUN_195__(0.5, __NFUN_198__(UserLiftVal, 1))), 1);
		User.AnimationController.SetAnimGridState(GridName, UserLiftVal);
		// End:0x9E
		if(__NFUN_148__(__NFUN_340__(Battlelord, none), __NFUN_340__(Battlelord.AnimationController, none)))
		{
			Battlelord.AnimationController.SetAnimGridState(GridName, UserLiftVal);
		}
		return;
	}
	stop;
}

state DetachAnimBase
{
	simulated function AnimCallback_UserAnimEnd()
	{
		global.AnimCallback_UserAnimEnd();
		// End:0x23
		if(__NFUN_340__(User, none))
		{
			User.TickBefore = none;
		}
		DetachPawnSuccess(false);
		AnimCallback_UserDetached();
		return;
	}
	stop;
}

state() Fail extends DetachAnimBase
{	stop;
}

state() Finish extends DetachAnimBase
{	stop;
}

state() BattleComplete
{
	event BeginState()
	{
		super(Object).BeginState();
		__NFUN_607__(1, false, 'SelfDestruct');
		return;
	}
	stop;
}

defaultproperties
{
	GridName=BattleLord_BattleA_Grid
	bForceDrop=false
	RateOfGain=0.1
	TapUsePhrase="<?int?dnAI.dnControl_BattleLord_BattleA.TapUsePhrase?>"
	States=/* Array type was not detected. */
}