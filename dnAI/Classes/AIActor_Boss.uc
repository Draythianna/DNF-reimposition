/*******************************************************************************
 * AIActor_Boss generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AIActor_Boss extends AIActor
	config;

var bool bProcAimingEnabled;
var bool bProcAimingEnabledPitch;
var bool bProcAimingEnabledYaw;
var bool bProcAimingPaused;
var bool bProcAimingResetPitch;
var bool bProcAimingResetYaw;
var float ProcAimingStoredYaw;
var float ProcAimingStoredPitch;
var() float ProcAimingVelocityPitch;
var() float ProcAimingVelocityPitchRampTime;
var() float ProcAimingVelocityYaw;
var() float ProcAimingVelocityYawRampTime;
var() float ProcAimingMinPitch;
var() float ProcAimingMaxPitch;
var() float ProcAimingMinYaw;
var() float ProcAimingMaxYaw;
var() bool ProcAimingDebug;
var float FullProcAimingVelocityPitch;
var float FullProcAimingVelocityYaw;

simulated function PostBeginPlay()
{
	super.PostBeginPlay();
	FullProcAimingVelocityPitch = ProcAimingVelocityPitch;
	FullProcAimingVelocityYaw = ProcAimingVelocityYaw;
	// End:0x32
	if(__NFUN_145__(bProcAimingEnabledPitch))
	{
		ProcAimingVelocityPitch = 0;
	}
	// End:0x48
	if(__NFUN_145__(bProcAimingEnabledYaw))
	{
		ProcAimingVelocityYaw = 0;
	}
	return;
}

function Vector GetPitchAimFromLocation()
{
	return Location;
	return;
}

function Vector GetYawAimFromLocation()
{
	return Location;
	return;
}

final simulated function DoProcAiming(float DeltaSeconds)
{
	local Vector UpDir, RightDir, DirToTarget, AimFrom;
	local float DesiredAimYaw, DesiredAimPitch;
	local Rotator DesiredAimRot;
	local int i, NumBones;

	// End:0x1B
	if(__NFUN_150__(__NFUN_145__(bProcAimingEnabled), __NFUN_171__(string(BoneAim), 0)))
	{
		return;
	}
	__NFUN_568__();
	UpDir = __NFUN_232__(0, 0, 1);
	RightDir = __NFUN_245__(Vector(Rotation), UpDir);
	// End:0x244
	if(bProcAimingEnabledPitch)
	{
		AimFrom = GetPitchAimFromLocation();
		// End:0x92
		if(PrimaryTarget.IsValidTarget())
		{
			DirToTarget = __NFUN_253__(__NFUN_239__(PrimaryTarget.GetAimPos(), AimFrom));			
		}
		else
		{
			DirToTarget = Vector(Rotation);
		}
		// End:0xFB
		if(__NFUN_200__(ProcAimingVelocityPitch, FullProcAimingVelocityPitch))
		{
			// End:0xC7
			if(__NFUN_202__(ProcAimingVelocityPitchRampTime, 0))
			{
				ProcAimingVelocityPitchRampTime = 0.0001;
			}
			__NFUN_209__(ProcAimingVelocityPitch, __NFUN_196__(__NFUN_195__(FullProcAimingVelocityPitch, DeltaSeconds), ProcAimingVelocityPitchRampTime));
			// End:0xFB
			if(__NFUN_201__(ProcAimingVelocityPitch, FullProcAimingVelocityPitch))
			{
				ProcAimingVelocityPitch = FullProcAimingVelocityPitch;
			}
		}
		// End:0x127
		if(__NFUN_145__(bProcAimingResetPitch))
		{
			DesiredAimPitch = __NFUN_227__(float(Rotator(DirToTarget).Pitch), ProcAimingMinPitch, ProcAimingMaxPitch);			
		}
		else
		{
			DesiredAimPitch = 0;
		}
		// End:0x164
		if(__NFUN_201__(DesiredAimPitch, ProcAimingStoredPitch))
		{
			DesiredAimPitch = __NFUN_224__(__NFUN_198__(ProcAimingStoredPitch, __NFUN_195__(ProcAimingVelocityPitch, DeltaSeconds)), DesiredAimPitch);			
		}
		else
		{
			DesiredAimPitch = __NFUN_225__(__NFUN_199__(ProcAimingStoredPitch, __NFUN_195__(ProcAimingVelocityPitch, DeltaSeconds)), DesiredAimPitch);
		}
		ProcAimingStoredPitch = DesiredAimPitch;
		NumBones = string(MuzzleBoneAim);
		i = 0;
		J0x1A2:

		// End:0x20F [Loop If]
		if(__NFUN_169__(i, NumBones))
		{
			// End:0x205
			if(__NFUN_201__(MuzzleBoneAim[i].Weight, 0))
			{
				MeshInstance.__NFUN_530__(MuzzleBoneAim[i].BoneName, RightDir, int(__NFUN_195__(DesiredAimPitch, MuzzleBoneAim[i].Weight)));
			}
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x1A2;
		}
		// End:0x244
		if(__NFUN_148__(bProcAimingResetPitch, __NFUN_204__(0, ProcAimingStoredPitch)))
		{
			bProcAimingResetPitch = false;
			bProcAimingEnabledPitch = false;
			ProcAimingVelocityPitch = 0;
		}
	}
	// End:0x4C9
	if(bProcAimingEnabledYaw)
	{
		// End:0x2AA
		if(__NFUN_200__(ProcAimingVelocityYaw, FullProcAimingVelocityYaw))
		{
			// End:0x276
			if(__NFUN_202__(ProcAimingVelocityYawRampTime, 0))
			{
				ProcAimingVelocityYawRampTime = 0.0001;
			}
			__NFUN_209__(ProcAimingVelocityYaw, __NFUN_196__(__NFUN_195__(FullProcAimingVelocityYaw, DeltaSeconds), ProcAimingVelocityYawRampTime));
			// End:0x2AA
			if(__NFUN_201__(ProcAimingVelocityYaw, FullProcAimingVelocityYaw))
			{
				ProcAimingVelocityYaw = FullProcAimingVelocityYaw;
			}
		}
		// End:0x2C1
		if(bProcAimingPaused)
		{
			DesiredAimYaw = ProcAimingStoredYaw;			
		}
		else
		{
			AimFrom = GetYawAimFromLocation();
			// End:0x2F9
			if(PrimaryTarget.IsValidTarget())
			{
				DirToTarget = PrimaryTarget.GetDirTo();				
			}
			else
			{
				DirToTarget = Vector(Rotation);
			}
			DesiredAimRot = __NFUN_283__(__NFUN_276__(Rotator(DirToTarget), Rotation));
			// End:0x347
			if(__NFUN_145__(bProcAimingResetYaw))
			{
				DesiredAimYaw = __NFUN_227__(float(DesiredAimRot.Yaw), ProcAimingMinYaw, ProcAimingMaxYaw);				
			}
			else
			{
				DesiredAimYaw = 0;
			}
			// End:0x392
			if(ProcAimingDebug)
			{
				BroadcastLog(__NFUN_302__(__NFUN_303__(string(self), "ProcAiming Current Yaw to target="), string(DesiredAimYaw)));
			}
			DesiredAimRot = Rotation;
			__NFUN_180__(DesiredAimRot.Yaw, int(DesiredAimYaw));
			// End:0x3E1
			if(__NFUN_201__(DesiredAimYaw, ProcAimingStoredYaw))
			{
				DesiredAimYaw = __NFUN_224__(__NFUN_198__(ProcAimingStoredYaw, __NFUN_195__(ProcAimingVelocityYaw, DeltaSeconds)), DesiredAimYaw);				
			}
			else
			{
				DesiredAimYaw = __NFUN_225__(__NFUN_199__(ProcAimingStoredYaw, __NFUN_195__(ProcAimingVelocityYaw, DeltaSeconds)), DesiredAimYaw);
			}
			ProcAimingStoredYaw = DesiredAimYaw;
		}
		NumBones = string(BoneAim);
		i = 0;
		J0x41F:

		// End:0x48C [Loop If]
		if(__NFUN_169__(i, NumBones))
		{
			// End:0x482
			if(__NFUN_201__(BoneAim[i].Weight, 0))
			{
				MeshInstance.__NFUN_530__(BoneAim[i].BoneName, UpDir, int(__NFUN_195__(DesiredAimYaw, BoneAim[i].Weight)));
			}
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x41F;
		}
		// End:0x4C9
		if(__NFUN_148__(bProcAimingResetYaw, __NFUN_204__(0, ProcAimingStoredYaw)))
		{
			bProcAimingResetYaw = false;
			bProcAimingEnabledYaw = false;
			bProcAimingEnabled = false;
			ProcAimingVelocityYaw = 0;
		}
	}
	return;
}

final function StopProcAiming()
{
	// End:0x11
	if(bProcAimingEnabledYaw)
	{
		bProcAimingResetYaw = true;
	}
	return;
}

final function StartProcAiming()
{
	bProcAimingEnabled = true;
	bProcAimingEnabledYaw = true;
	bProcAimingPaused = false;
	return;
}

animevent simulated function pauseprocaiming(optional EventInfo EventParms)
{
	bProcAimingPaused = true;
	return;
}

animevent simulated function startheadaim(optional EventInfo EventParms)
{
	bProcAimingEnabledPitch = true;
	return;
}

animevent simulated function stopheadaim(optional EventInfo EventParms)
{
	// End:0x11
	if(bProcAimingEnabledPitch)
	{
		bProcAimingResetPitch = true;
	}
	return;
}

defaultproperties
{
	bProcAimingEnabledYaw=true
	ProcAimingVelocityPitch=20000
	ProcAimingVelocityPitchRampTime=1
	ProcAimingVelocityYaw=5000
	ProcAimingVelocityYawRampTime=1
	ProcAimingMinPitch=-32768
	ProcAimingMaxPitch=32768
	ProcAimingMinYaw=-16384
	ProcAimingMaxYaw=16384
	bIsBoss=true
	bShouldCauseKillSound=false
	bCanExistOutOfWorld=false
	bOverlayEffectUsedAsHint=true
	OverlayMaterial='dt_effects.OverlayMaterial.OverlayMaterial_Boss'
}