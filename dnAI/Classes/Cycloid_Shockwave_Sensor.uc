/*******************************************************************************
 * Cycloid_Shockwave_Sensor generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Cycloid_Shockwave_Sensor extends KSphereSensor;

var() float kSquirtFactor;
var() float kDistFactor;
var() bool DebugShockwave;
var() float ExtraLift;
var() noexport float PawnSafeHeight "Damage to apply to pawn";
var() noexport float PawnDamage "Pawn is safe at this height";
var() bool bKnockDown;
var Cycloid_Shockwave Shockwave;
var array<Pawn> DamagedPawns;

simulated function bool VerifySelf()
{
	Shockwave = Cycloid_Shockwave(MountParent);
	// End:0x1E
	if(__NFUN_339__(Shockwave, none))
	{
		return false;
	}
	return super(Actor).VerifySelf();
	return;
}

function CopyOwnerProperties()
{
	return;
}

event BeginSenseObject(KarmaActor Actor)
{
	super(KSensor).BeginSenseObject(Actor);
	return;
}

event EndSenseObject(KarmaActor Actor)
{
	super(KSensor).EndSenseObject(Actor);
	return;
}

simulated event Tick(float DeltaSeconds)
{
	local array<SKarmaInteraction> SensedActors;
	local int i, j;
	local Vector Offset, Direction, HitLocation;
	local float Dist, Intensity, CurrentVel, DesiredVel;
	local KarmaActor KActor;
	local Pawn P;
	local bool bHitPlayerPawn;
	local dnDecoration deco;
	local bool bPawnHasAlreadyBeenDamaged;

	super(Actor).Tick(DeltaSeconds);
	// End:0x32
	if(DebugShockwave)
	{
		__NFUN_674__(Location, SphereSensorRadius, NewColorBytes(255, 0, 0), 1E-06);
	}
	SensedActors = __NFUN_1123__();
	i = __NFUN_166__(string(SensedActors), 1);
	J0x4A:

	// End:0x49C [Loop If]
	if(__NFUN_172__(i, 0))
	{
		KActor = SensedActors[i].Actor;
		// End:0x492
		if(__NFUN_340__(KActor, none))
		{
			// End:0xE9
			if(KActor.bIsdnDecoration)
			{
				deco = dnDecoration(KActor);
				// End:0xE9
				if(__NFUN_150__(__NFUN_173__(int(deco.AIStompedInfo.StompType), int(1)), __NFUN_173__(int(deco.AIStompedInfo.StompType), int(2))))
				{
					deco.CriticalDamage();
					// [Explicit Continue]
					goto J0x492;
				}
			}
			// End:0x125
			if(DebugShockwave)
			{
				__NFUN_676__(Location, SensedActors[i].Actor.Location, NewColorBytes(255, 255, 0), 0.0001);
			}
			Offset = __NFUN_239__(KActor.Location, Location);
			// End:0x165
			if(__NFUN_200__(Offset.Z, 0))
			{
				Offset.Z = 0;
			}
			Dist = __NFUN_251__(Offset);
			Intensity = __NFUN_196__(__NFUN_199__(kDistFactor, __NFUN_227__(__NFUN_196__(Dist, SphereSensorRadius), 0, kDistFactor)), kDistFactor);
			DesiredVel = __NFUN_195__(Intensity, kSquirtFactor);
			Direction = __NFUN_253__(Offset);
			// End:0x3A1
			if(KActor.bIsPawn)
			{
				P = Pawn(KActor);
				// End:0x39E
				if(__NFUN_148__(__NFUN_340__(P, none), __NFUN_340__(P, Shockwave.Instigator)))
				{
					// End:0x24E
					if(DebugShockwave)
					{
						BroadcastLog(__NFUN_302__("DCR Pawn DeltaZ: ", string(__NFUN_199__(P.Location.Z, Location.Z))));
					}
					// End:0x39E
					if(__NFUN_200__(__NFUN_199__(P.Location.Z, Location.Z), PawnSafeHeight))
					{
						bPawnHasAlreadyBeenDamaged = false;
						j = 0;
						J0x287:

						// End:0x2CC [Loop If]
						if(__NFUN_148__(__NFUN_169__(j, string(DamagedPawns)), __NFUN_145__(bPawnHasAlreadyBeenDamaged)))
						{
							// End:0x2C2
							if(__NFUN_339__(DamagedPawns[j], P))
							{
								bPawnHasAlreadyBeenDamaged = true;
							}
							__NFUN_182__(j);
							// [Loop Continue]
							goto J0x287;
						}
						// End:0x354
						if(__NFUN_145__(bPawnHasAlreadyBeenDamaged))
						{
							DamagedPawns[string(DamagedPawns)] = P;
							P.TakeDamage(Shockwave.Instigator, PawnDamage, Location, Offset, class'ExplosionDamage',, Location);
							// End:0x354
							if(bKnockDown)
							{
								P.DoKnockdown(Shockwave.Instigator.Location);
							}
						}
						// End:0x39E
						if(__NFUN_148__(__NFUN_145__(bKnockDown), __NFUN_200__(__NFUN_244__(P.Velocity, Direction), DesiredVel)))
						{
							__NFUN_249__(P.GameplayDesiredPhysicsVelocity, __NFUN_235__(DesiredVel, Direction));
						}
					}
				}
				// [Explicit Continue]
				goto J0x492;
			}
			// End:0x492
			if(__NFUN_145__(__NFUN_357__(KActor.Class, class'Pickup')))
			{
				// End:0x492
				if(__NFUN_200__(__NFUN_244__(KActor.Velocity, Direction), DesiredVel))
				{
					HitLocation = __NFUN_238__(KActor.Location, __NFUN_234__(__NFUN_253__(__NFUN_239__(Location, KActor.Location)), __NFUN_225__(KActor.CollisionRadius, KActor.CollisionHeight)));
					KActor.__NFUN_820__(__NFUN_238__(__NFUN_235__(DesiredVel, Direction), __NFUN_232__(0, 0, ExtraLift)), HitLocation);
					KActor.__NFUN_821__(__NFUN_232__(__NFUN_226__(0, 1), __NFUN_226__(0, 1), __NFUN_226__(0, 1)));
				}
			}
		}
		J0x492:

		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x4A;
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(Actor).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'dnControl_PlayerKnockdown');
	PrecacheIndex.__NFUN_1279__(class'ExplosionDamage');
	return;
}

defaultproperties
{
	kSquirtFactor=3000
	kDistFactor=1.25
	ExtraLift=500
	PawnSafeHeight=60
	PawnDamage=30
	bKnockDown=true
	SphereSensorRadius=75
	PhysicsEntityGroup=EnergyLeechPhysicsEntityGroup
	bTraceShootable=false
	bCollisionAssumeValid=true
	bBlockCamera=false
	bCanExistOutOfWorld=true
	bNoFailMountedMovement=true
	CollisionRadius=75
	CollisionHeight=40
	TickStyle=2
}