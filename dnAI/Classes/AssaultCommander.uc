/*******************************************************************************
 * AssaultCommander generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AssaultCommander extends AIActor
	config
	collapsecategories;

var() float BladeSpinMeleeRange;
var() float BladeMeleeDamage;
var() float ChanceChargeAtActionPoint;
var() bool DoingCharge;
var() float ChanceMovingShot;
var() float MovingShotMinInterval;
var float MovingShotGate;
var class<BeamSystem> TracerBeamClass;
var class<SoftParticleSystem> TracerBubblesClass;
var bool ShouldIdle;
var float TargetTimeWarp;
var bool DamagedPlayer;

k2call simulated function StartScriptedSlowdown()
{
	TargetTimeWarp = 0.45;
	return;
}

k2call simulated function StopScriptedSlowdown()
{
	TargetTimeWarp = 1;
	return;
}

event Tick(float DeltaSeconds)
{
	super(Actor).Tick(DeltaSeconds);
	// End:0x7B
	if(__NFUN_201__(TargetTimeWarp, 0))
	{
		// End:0x4C
		if(__NFUN_201__(TimeWarp, TargetTimeWarp))
		{
			TimeWarp = __NFUN_225__(TargetTimeWarp, __NFUN_199__(TimeWarp, __NFUN_195__(4, DeltaSeconds)));			
		}
		else
		{
			// End:0x7B
			if(__NFUN_200__(TimeWarp, TargetTimeWarp))
			{
				TimeWarp = __NFUN_224__(TargetTimeWarp, __NFUN_198__(TimeWarp, __NFUN_195__(4, DeltaSeconds)));
			}
		}
	}
	return;
}

function dnProjectile FireProjectile(name MuzzleName, class<dnProjectile> ProjClass, float LeadTime, bool CheckLOS)
{
	local Vector Start, End, MuzzleDir, FireDir;
	local Rotator ProjRot;
	local dnProjectile Projectile;
	local Actor HitActor;
	local float HitTime;

	// End:0x169
	if(__NFUN_150__(__NFUN_145__(CheckLOS), __NFUN_148__(__NFUN_340__(PrimaryTargetActor, none), ClearShot(PrimaryTargetActor, Location, PrimaryTarget.GetPos(), 3, 0, DebugLOSChecks))))
	{
		GetFireParms(MuzzleName, Start, End, MuzzleDir, FireDir, LeadTime, true);
		// End:0x132
		if(__NFUN_148__(__NFUN_206__(LeadTime, 0), CheckLOS))
		{
			// End:0x132
			if(__NFUN_150__(__NFUN_145__(CanSeePosFrom(Start, End, false, HitActor, HitTime, false)), __NFUN_200__(HitTime, 0.9)))
			{
				// End:0x11B
				if(DebugGoalSelection)
				{
					__NFUN_672__(Start, NewColorBytes(255, 0, 0, 255), 15);
					__NFUN_672__(End, NewColorBytes(255, 0, 0, 255), 15);
					__NFUN_676__(Start, End, NewColorBytes(255, 0, 0, 255), 15);
				}
				return super.FireProjectile(MuzzleName, ProjClass, 0, false);
			}
		}
		ProjRot = Rotator(FireDir);
		Projectile = __NFUN_615__(ProjClass, self,, Start, ProjRot);
		FindSoundAndSpeak('Sound_RPG');
		return Projectile;
	}
	// End:0x1A3
	if(DebugGoalSelection)
	{
		BroadcastLog("DCR FireProjectile Failed - no clear shot");
	}
	return none;
	return;
}

function DoExtraMeleeEffects(Actor DamagedActor, float DamageAmount, Vector DamageLocation, Vector Direction, Class DamageClass)
{
	local PlayerPawn P;
	local int i;
	local Vector Dir, Variance, Helper;
	local STraceHitResult HitResult;

	// End:0xE7
	if(__NFUN_148__(__NFUN_340__(DamagedActor, none), DamagedActor.bIsPlayerPawn))
	{
		Direction = Vector(DamagedActor.Rotation);
		Variance = __NFUN_232__(1, 1, 1);
		i = 0;
		J0x55:

		// End:0x9A [Loop If]
		if(__NFUN_169__(i, 5))
		{
			Dir = __NFUN_256__(Direction, Variance);
			TraceFireMaterialHit(class'SlicingDamage', self, DamageLocation, Direction, class'Flesh_Alien', false);
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x55;
		}
		P = PlayerPawn(DamagedActor);
		// End:0xDF
		if(__NFUN_150__(__NFUN_145__(IsMostlyShrunk()), P.IsMostlyShrunk()))
		{
			P.DoKnockdown(Location);
		}
		ShouldIdle = false;
	}
	return;
}

simulated event PerformTraceFireEffects(class<TraceDamageType> TraceDamageType, Vector TraceStart, Vector TraceEnd, Actor HitActor)
{
	local BeamSystem Beam;

	super(Actor).PerformTraceFireEffects(TraceDamageType, TraceStart, TraceEnd, HitActor);
	SpawnWeaponTracer(TraceStart, TraceEnd, 0.5, TracerBeamClass, TracerBubblesClass, HitActor);
	return;
}

function bool GetCurrentWeapon(out class<Weapon> OutWeaponClass, out int OutLoadedAmmo, out int OutTotalAmmo)
{
	OutWeaponClass = class'IntegratedWeapon';
	OutLoadedAmmo = 99;
	OutTotalAmmo = 99;
	return true;
	return;
}

function name GetWeaponAnimName(class<Weapon> WeaponClass)
{
	return 'AssGun';
	return;
}

simulated event Vector GetProjectileFireLocation()
{
	return MeshInstance.__NFUN_533__('mount_anus', true, false);
	return;
}

k2call simulated function ShootProjectile(optional EventInfo AnimEventInfo)
{
	FireProjectile(ProjectileMuzzleName, ProjectileClass, CalcLeadTime(ProjectileClass.default.MaxSpeed), false);
	return;
}

event float GetDefaultGotoXRange(float Range)
{
	return 35;
	return;
}

event NotifyOpStarted(Engine.BaseAI.EAIOp NewOp, Engine.BaseAI.EAIOp OldOp)
{
	super.NotifyOpStarted(NewOp, OldOp);
	// End:0x3A
	if(__NFUN_173__(int(NewOp), int(96)))
	{
		__NFUN_589__('Generic0', NewColorBytes(255, 0, 0), 0.005);		
	}
	else
	{
		// End:0x5B
		if(__NFUN_173__(int(NewOp), int(15)))
		{
			FindSoundAndSpeak('Sound_Blades');
			DamagedPlayer = false;
		}
	}
	return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
	super.NotifyOpEnded(Op, Status);
	// End:0x3A
	if(__NFUN_173__(int(Op), int(96)))
	{
		__NFUN_589__('Generic0', NewColorBytes(255, 255, 255), 0.5);		
	}
	else
	{
		// End:0x53
		if(__NFUN_173__(int(Op), int(15)))
		{
			DoingCharge = true;			
		}
		else
		{
			// End:0x69
			if(__NFUN_173__(int(Op), int(14)))
			{
				DoingCharge = false;
			}
		}
	}
	return;
}

function float CalculateFlyContraintStrengthScalar(float DeltaTime)
{
	// End:0x2F
	if(__NFUN_150__(__NFUN_173__(int(CurrentOp), int(96)), __NFUN_173__(int(CurrentOp), int(117))))
	{
		KLinearDamping = 2.5;
		return 0;
	}
	KLinearDamping = default.KLinearDamping;
	return super.CalculateFlyContraintStrengthScalar(DeltaTime);
	return;
}

k2call simulated function BladeDamage()
{
	local Actor ActorDamaged;

	ActorDamaged = DoMeleeDamage(BladeMeleeDamage, class'SlicingDamage', 0, __NFUN_196__(__NFUN_195__(BladeSpinMeleeRange, DrawScale), default.DrawScale), DamagedPlayer);
	// End:0x59
	if(__NFUN_148__(__NFUN_340__(ActorDamaged, none), ActorDamaged.bIsPlayerPawn))
	{
		DamagedPlayer = true;
	}
	return;
}

function Engine.BaseAI.EAICode COND_ShouldBladeChargeFromActionPoint()
{
	// End:0x0F
	if(__NFUN_203__(__NFUN_222__(), ChanceChargeAtActionPoint))
	{
		return 25;
	}
	// End:0x23
	if(__NFUN_174__(int(CheckCondition(91)), int(0)))
	{
		return 75;
	}
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldMelee()
{
	// End:0x11
	if(__NFUN_173__(int(CurrentOp), int(14)))
	{
		return 1;
	}
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldIdle()
{
	// End:0x14
	if(ShouldIdle)
	{
		ShouldIdle = false;
		return 0;
	}
	return 1;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldStopAttacking()
{
	// End:0x14
	if(__NFUN_173__(int(CheckCondition(7)), int(0)))
	{
		return 0;
	}
	// End:0x28
	if(__NFUN_173__(int(CheckCondition(9)), int(0)))
	{
		return 0;
	}
	// End:0x34
	if(ShouldIdle)
	{
		return 0;
	}
	return 1;
	return;
}

function Engine.BaseAI.EAICode COND_MakeMovingShot()
{
	// End:0x1C
	if(__NFUN_200__(Level.GameTimeSeconds, MovingShotGate))
	{
		return 1;
	}
	// End:0x2B
	if(__NFUN_203__(__NFUN_222__(), ChanceMovingShot))
	{
		return 25;
	}
	MovingShotGate = __NFUN_198__(Level.GameTimeSeconds, MovingShotMinInterval);
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_IsCharging()
{
	// End:0x0F
	if(DoingCharge)
	{
		return 0;		
	}
	else
	{
		return 1;
	}
	return;
}

function Engine.BaseAI.EAICode COND_NotCharging()
{
	// End:0x0F
	if(DoingCharge)
	{
		return 1;		
	}
	else
	{
		return 0;
	}
	return;
}

event KImpact(name SelfBoneName, KarmaActor Other, name OtherBoneName, Vector Position, Vector ImpactVelocity, Vector ImpactNormal)
{
	local AIActor AI;

	super.KImpact(SelfBoneName, Other, OtherBoneName, Position, ImpactVelocity, ImpactNormal);
	// End:0x42
	if(__NFUN_150__(__NFUN_174__(int(CurrentOp), int(14)), __NFUN_339__(Other, none)))
	{
		return;
	}
	AI = AIActor(Other);
	// End:0xD1
	if(__NFUN_148__(__NFUN_340__(AI, none), __NFUN_340__(Other.Class, self.Class)))
	{
		AI.bInstaGib = true;
		AI.TakeDamage(self, 99999, Location, __NFUN_239__(Other.Location, Location), class'ExplosionDamage',, Location);		
	}
	else
	{
		// End:0xF7
		if(__NFUN_340__(dnDecoration(Other), none))
		{
			dnDecoration(Other).TryToDestroy();
		}
	}
	return;
}

simulated function SpawnCorpse()
{
	super.SpawnCorpse();
	// End:0x24
	if(__NFUN_340__(MyCorpse, none))
	{
		MyCorpse.__NFUN_639__(8000);
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(Pawn).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(TracerBeamClass);
	PrecacheIndex.__NFUN_1266__(TracerBubblesClass);
	PrecacheIndex.__NFUN_1266__(class'dnControl_PlayerKnockdown');
	PrecacheIndex.__NFUN_1279__(class'ExplosionDamage');
	PrecacheIndex.__NFUN_1279__(class'SlicingDamage');
	PrecacheIndex.__NFUN_1280__(class'Flesh_Alien');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Blades');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_MeleeSwipe');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_RPG');
	// End:0x14B
	if(__NFUN_310__(PrecacheIndex.MapName, "Map06"))
	{
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Fart');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Grab');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Grunt');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_ShakeFlaps');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Swipes');
	}
	PrecacheIndex.__NFUN_1283__('Anim_Idle', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Move', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_MoveBackwards', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Walk', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_WalkBackwards', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Run', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_RunBackwards', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_SidestepLeft', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_SidestepRight', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StrafeLeft', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StrafeRight', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ChargeStart', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ChargeLoop', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ChargeStop', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StartMovement', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StopMovement', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_TurnLeft45', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_TurnLeft180', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_TurnRight45', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_TurnRight180', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Roar', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ShootProjectile', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ShootProjectileEnd', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Attack', class'acAssaultCommander', Mesh);
	// End:0x41A
	if(PrecacheIndex.bPlayerCanBeShrunk)
	{
		PrecacheIndex.__NFUN_1283__('Anim_AttackShrunk', class'acAssaultCommander', Mesh);
	}
	PrecacheIndex.__NFUN_1283__('Anim_PainFront', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainFrontLeft', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainFrontRight', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainBack', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainBackLeft', class'acAssaultCommander', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainBackRight', class'acAssaultCommander', Mesh);
	return;
}

event EnumerateUsableAnimationControllers(PrecacheIndex PrecacheIndex, out array<Engine.BaseAI.EAIAnimController> UsableControllers)
{
	UsableControllers[string(UsableControllers)] = 1;
	return;
}

defaultproperties
{
	BladeSpinMeleeRange=175
	BladeMeleeDamage=30
	ChanceChargeAtActionPoint=0.2
	ChanceMovingShot=0.2
	MovingShotMinInterval=2.5
	TracerBeamClass='dnParticles.AssaultCommander_Beam_ShotEffect'
	TracerBubblesClass='p_Weapons.Generic.WaterBubblesTracer'
	DamageScaleInfo(0)=(Ident='MaleCombat',DamageScale=0,QualifierDamageTypes=(none,class'SensorEnabled',class'PrimaryTarget',class'AimInfo',none,class'ReturnValue',class'Other',class'AnimName',class'TKObj',class'RegisterAIAnimationControllerEntry',class'PrecacheIndex',class'm_aTarget',class'AnimCtrl',class'WeaponClasses',class'FreeMoveParms',class'm_aTarget',none,class'AIActorFactory',class'JumpAttackParms',class'i',class'm_aTarget',none,class'i',class'bSucceedOnFail',class'ReturnValue',class'FinishMeControlType',class'm_aTarget',none,class'AnimIndex',class'bSucceedOnFail',class'ReturnValue',class'PrecacheIndex',class'm_aTarget',none,class'TKObj',class'PrecacheIndex',none,none,none,none,class'DamageInfo',class'PrimaryTarget',class'JumpParms',none,class'PrecacheIndex',class'PrimaryTarget',class'CurrentOp',none,class'TurnToXParms',class'PrecacheIndex',none,none,none,none,class'ReturnValue',class'm_aTarget',class'AnimCtrl',class'UsableControllers',class'FreeMoveParms',class'm_aTarget',none,class'AIActorFactory',class'JumpAttackParms',class'i',class'm_aTarget',none,class'i',class'bSucceedOnFail',class'ReturnValue',class'FinishMeControlType',class'm_aTarget'))
	DamageScaleInfo(1)=(FailFunc=None,Op=0,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(2)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(3)=(CurStateIndex=0)
	DamageScaleInfo(4)=(Ident=Engage,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=0,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(5)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(6)=(CurStateIndex=0)
	DamageScaleInfo(7)=(Ident=EngageAP,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=0,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(8)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(9)=(CurStateIndex=0)
	DamageScaleInfo(10)=(Ident=ChargeAttack,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=0,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(11)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(12)=(CurStateIndex=0)
	DamageScaleInfo(13)=(Ident=Default,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=150,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(14)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(15)=(CurStateIndex=0)
	DamageScaleInfo(16)=(Ident=idle,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=85,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(17)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(18)=(CurStateIndex=0)
	DamageScaleInfo(19)=(Ident=Pain,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=96,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(20)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(21)=(CurStateIndex=0)
	DamageScaleInfo(22)=(Ident=ShootProjectile,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=117,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(23)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(24)=(CurStateIndex=0)
	DamageScaleInfo(25)=(Ident=MovingShot,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=117,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(26)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(27)=(CurStateIndex=0)
}