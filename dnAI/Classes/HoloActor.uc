/*******************************************************************************
 * HoloActor generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class HoloActor extends DukeClone
	config;

var() float HoloLifeTime;
var DukeShades Shades;
var() float SpeakInterval;
var() float SpeakIntervalVariance;

replication
{
	// Pos:0x000
	unreliable if(__NFUN_173__(int(Role), int(ROLE_Authority)))
		HolographicHit;

	// Pos:0x00B
	reliable if(__NFUN_173__(int(Role), int(ROLE_Authority)))
		ClientSetAnimControllers;
}

simulated event PostBeginPlay()
{
	local Actor A;

	// End:0x14
	if(__NFUN_173__(int(Role), int(ROLE_Authority)))
	{
		ClientSetAnimControllers();
	}
	super(AIActor).PostBeginPlay();
	// End:0x26
	if(IsMP())
	{		
	}
	else
	{
		PlayerPawnOwner = PlayerPawn(Owner);
		// End:0x97
		if(__NFUN_339__(PlayerPawnOwner, none))
		{
			BroadcastLog(__NFUN_302__(string(self), ":PostBeginPlay - Error!  POwner for a HoloActor should never be None!!"));
			return;
		}
		PlayerPawnOwner.NotifyHoloDukeStart(self, HoloLifeTime);
	}
	TauntAI();
	Level.PrimaryHoloActor = self;
	// End:0x119
	if(IsMP())
	{
		// End:0x118
		foreach __NFUN_753__(class'Actor', A)
		{
			// End:0x117
			if(A.__NFUN_358__('DukeShades'))
			{
				Shades = DukeShades(A);
				Shades.OverlayMaterial = class'HolographicEffect_FB';
			}			
		}		
	}
	HolographicHit();
	// End:0x156
	if(__NFUN_201__(HoloLifeTime, 0))
	{
		__NFUN_607__(HoloLifeTime, false, 'DestroyHoloActor');
		__NFUN_607__(__NFUN_226__(__NFUN_196__(SpeakInterval, float(2)), SpeakIntervalVariance), false, 'SaySomething');
	}
	return;
}

function InitPlayerReplicationInfo()
{
	super(Pawn).InitPlayerReplicationInfo();
	// End:0x2F
	if(__NFUN_148__(__NFUN_340__(PlayerReplicationInfo, none), IsMP()))
	{
		PlayerReplicationInfo.bIsABot = true;
	}
	return;
}

simulated delegate ClientSetAnimControllers()
{
	local int i;
	local Engine.BaseAI.EAIAnimController ServerCtrler;

	AnimControllers[0].m_eFallback = 0;
	AnimControllers[0].m_cClass = class'acGeneric';
	AnimControllers[0].m_oController = none;
	AnimControllers[1].m_eFallback = 1;
	AnimControllers[1].m_cClass = class'acGeneric_Crouch';
	AnimControllers[1].m_oController = none;
	i = 2;
	J0x66:

	// End:0xB7 [Loop If]
	if(__NFUN_169__(i, 10))
	{
		AnimControllers[i].m_eFallback = 1;
		AnimControllers[i].m_cClass = class'acGeneric_Combat';
		AnimControllers[i].m_oController = none;
		__NFUN_182__(i);
		// [Loop Continue]
		goto J0x66;
	}
	CreateAnimController(1);
	CreateAnimController(2);
	CreateAnimController(3);
	CreateAnimController(4);
	CreateAnimController(5);
	CreateAnimController(6);
	CreateAnimController(7);
	CreateAnimController(8);
	CreateAnimController(9);
	CreateAnimController(10);
	AnimationController = AnimControllers[1].m_oController;
	return;
}

event PostSpawn()
{
	super(AIActor).PostSpawn();
	bNoDamage = true;
	return;
}

event PostInit()
{
	// End:0x3B
	if(IsMP())
	{
		PlayerPawnOwner = PlayerPawn(Owner);
		PlayerPawnOwner.NotifyHoloDukeStart(self, HoloLifeTime);
		bDoOverlayEffect = false;
		__NFUN_641__(none);
	}
	super(AIActor).PostInit();
	GuardActor(PlayerPawnOwner, 224, 768, false, 0, false, true, false);
	return;
}

simulated event Tick(float DeltaTime)
{
	local DukeMultiPlayer dmp;

	super(Actor).Tick(DeltaTime);
	// End:0xA4
	if(IsMP())
	{
		dmp = DukeMultiPlayer(PlayerPawnOwner);
		// End:0xA4
		if(__NFUN_148__(__NFUN_340__(dmp, none), __NFUN_172__(dmp.CustomizationInfo.ShirtColorIndex, 0)))
		{
			// End:0x78
			if(__NFUN_340__(__NFUN_740__(0), dmp.DukeSkin))
			{
				__NFUN_741__(0, dmp.DukeSkin);
			}
			__NFUN_601__('ShirtColour', class'DukeMultiplayerAssets'.default.ShirtColors[dmp.CustomizationInfo.ShirtColorIndex]);
		}
	}
	__NFUN_210__(HoloLifeTime, DeltaTime);
	return;
}

function DiedActivity(optional Pawn Killer, optional int Damage, optional Vector DamageOrigin, optional Vector DamageDirection, optional class<DamageType> DamageType, optional name HitBoneName)
{
	__NFUN_614__();
	return;
}

simulated event Destroyed()
{
	local int i;

	FindAndPlaySound('HoloDuke_Disappear', 3);
	HoloActorEndFlash();
	// End:0x62
	if(__NFUN_174__(int(Level.NetMode), int(NM_Client)))
	{
		PlayerPawnOwner.NotifyHoloDukeEnd();
		// End:0x62
		if(__NFUN_339__(Level.PrimaryHoloActor, self))
		{
			Level.PrimaryHoloActor = none;
		}
	}
	super(AIActor).Destroyed();
	return;
}

final simulated function HoloActorEndFlash()
{
	__NFUN_615__(class'Holoduke_main',,, __NFUN_238__(Location, __NFUN_263__(__NFUN_232__(0, 0, -35), Rotation)));
	return;
}

simulated function DestroyHoloActor()
{
	__NFUN_614__();
	return;
}

simulated function bool IsActiveInGame()
{
	// End:0x0B
	if(IsMP())
	{
		return true;
	}
	return super(Pawn).IsActiveInGame();
	return;
}

final function TauntAI()
{
	local AIActor AI;
	local float W;

	// End:0x74
	foreach __NFUN_747__(class'AIActor', AI)
	{
		W = AI.RelationshipMgr.GetAttitudeTowards(AI, self, "");
		// End:0x73
		if(__NFUN_200__(W, 0))
		{
			AI.SetTarget(false, self);
			AI.PrimaryTarget.ForceContactUpdate();
		}		
	}	
	return;
}

simulated function TurnOffHoloHit()
{
	bDoOverlayEffect = false;
	return;
}

simulated function HolographicHit()
{
	local DukeMultiPlayer dmp;

	// End:0x3F
	if(__NFUN_145__(IsMP()))
	{
		__NFUN_601__('Generic0', NewColorBytes(255, 255, 255, 255));
		__NFUN_589__('Generic0', NewColorBytes(0, 0, 0, 0), 1);		
	}
	else
	{
		dmp = DukeMultiPlayer(PlayerPawnOwner);
		bDoOverlayEffect = true;
		__NFUN_607__(1, false, 'TurnOffHoloHit');
	}
	// End:0x9C
	if(__NFUN_148__(IsMP(), __NFUN_340__(Shades, none)))
	{
		Shades.bDoOverlayEffect = true;
		__NFUN_607__(1.5, false, 'turnGlassesHoloOff');
	}
	return;
}

function turnGlassesHoloOff()
{
	// End:0x1E
	if(__NFUN_340__(Shades, none))
	{
		Shades.bDoOverlayEffect = false;
	}
	return;
}

simulated event Engine.Actor.ETraceFireHitResponse TraceFireHit(Actor SourceActor, class<TraceDamageType> TraceDamageType, Vector SourceTraceOrigin, Vector HitLocation, Vector HitNormal, name HitBoneName, bool bExtentTrace)
{
	HolographicHit();
	return 0;
	return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	HolographicHit();
	super(Pawn).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
	return;
}

event float CalculateGroundConstraintStrengthScalar()
{
	return 1500;
	return;
}

event bool ShouldTargetNoiseMaker(Actor NoiseMaker)
{
	local Pawn NoisyPawn;
	local bool ret;

	NoisyPawn = Pawn(NoiseMaker);
	ret = super(AIActor).ShouldTargetNoiseMaker(NoiseMaker);
	// End:0xD1
	if(__NFUN_148__(ret, __NFUN_340__(NoisyPawn, none)))
	{
		// End:0x54
		if(__NFUN_339__(NoisyPawn, Owner))
		{
			ret = false;			
		}
		else
		{
			// End:0xD1
			if(__NFUN_148__(IsMP(), __NFUN_150__(__NFUN_339__(NoisyPawn, PlayerPawnOwner), __NFUN_148__(Level.Game.bTeamGame, __NFUN_173__(int(NoisyPawn.PlayerReplicationInfo.Team), int(PlayerPawnOwner.PlayerReplicationInfo.Team))))))
			{
				ret = false;
			}
		}
	}
	return ret;
	return;
}

simulated function forceWeapon(class<Weapon> NewWeaponClass)
{
	RandomWeapons.Empty();
	RandomWeapons[RandomWeapons.Add(1)] = NewWeaponClass;
	return;
}

simulated function bool IsFriendly(Pawn Other)
{
	local PlayerReplicationInfo HoloOwnerPRI;
	local DukeMultiPlayer dmp;

	// End:0x0E
	if(__NFUN_339__(Other, none))
	{
		return false;
	}
	// End:0x37
	if(__NFUN_150__(__NFUN_339__(Owner, Other), __NFUN_339__(PlayerPawnOwner, PlayerPawn(Other))))
	{
		return true;
	}
	// End:0x122
	if(__NFUN_148__(__NFUN_340__(Level.GRI, none), Level.GRI.bTeamGame))
	{
		// End:0x92
		if(__NFUN_340__(Owner, none))
		{
			HoloOwnerPRI = PlayerPawn(Owner).PlayerReplicationInfo;
		}
		// End:0xC1
		if(__NFUN_148__(__NFUN_340__(PlayerPawnOwner, none), __NFUN_339__(HoloOwnerPRI, none)))
		{
			HoloOwnerPRI = PlayerPawnOwner.PlayerReplicationInfo;
		}
		// End:0xCF
		if(__NFUN_339__(HoloOwnerPRI, none))
		{
			return false;
		}
		// End:0x122
		if(__NFUN_148__(__NFUN_340__(PlayerPawn(Other).PlayerReplicationInfo, none), __NFUN_173__(int(HoloOwnerPRI.Team), int(PlayerPawn(Other).PlayerReplicationInfo.Team))))
		{
			return true;
		}
	}
	return false;
	return;
}

function SaySomething()
{
	// End:0x18
	if(__NFUN_200__(HoloLifeTime, __NFUN_199__(SpeakInterval, SpeakIntervalVariance)))
	{
		return;
	}
	FindSoundAndSpeak('HoloDuke_Voice');
	// End:0x43
	if(__NFUN_145__(IsDead()))
	{
		__NFUN_607__(__NFUN_226__(SpeakInterval, SpeakIntervalVariance), false, 'SaySomething');
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	local int i;
	local name WeaponAnimName;

	super(MaleCombat).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'Holoduke_main');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'HoloDuke_Disappear');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'HoloDuke_Voice');
	PrecacheIndex.__NFUN_1283__('Anim_Fall0', class'acGeneric_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Land0', class'acGeneric_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_HeavyLand0', class'acGeneric_Combat', Mesh);
	i = __NFUN_166__(string(RandomWeapons), 1);
	J0xAE:

	// End:0x4CF [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x112
		if(__NFUN_340__(RandomWeapons[i], none))
		{
			// End:0xEA
			if(__NFUN_339__(RandomWeapons[i].default.WeaponConfig, none))
			{
				// [Explicit Continue]
				goto J0x4C5;
			}
			WeaponAnimName = RandomWeapons[i].default.WeaponConfig.default.WeaponAnimName;			
		}
		else
		{
			WeaponAnimName = 'None';
		}
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Idle', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Reload', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Shoot', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Crouch', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_CrouchFromReady', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Attack', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Walk', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_WalkBackwards', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Run', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_RunBackwards', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_StrafeLeft', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_StrafeRight', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_SidestepLeft', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_SidestepRight', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_TurnLeft45', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_TurnLeft180', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_TurnRight45', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_TurnRight180', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Jump0', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Fall0', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Land0', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_HeavyLand0', WeaponAnimName), class'acGeneric_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Idle', WeaponAnimName), class'acGeneric_Crouch', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_Reload', WeaponAnimName), class'acGeneric_Crouch', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_StandCombat', WeaponAnimName), class'acGeneric_Crouch', Mesh);
		PrecacheIndex.__NFUN_1283__(__NFUN_344__('Anim_StandCombatReady', WeaponAnimName), class'acGeneric_Crouch', Mesh);
		J0x4C5:

		__NFUN_185__(i);
		// [Loop Continue]
		goto J0xAE;
	}
	return;
}

event EnumerateWeaponClasses(PrecacheIndex PrecacheIndex, out array< class<Weapon> > WeaponClasses)
{
	WeaponClasses[string(WeaponClasses)] = class'MachineGun_HoloDuke';
	WeaponClasses[string(WeaponClasses)] = class'Shotgun_HoloDuke';
	WeaponClasses[string(WeaponClasses)] = class'Pistol_HoloDuke';
	return;
}

state GotoX
{
	event float CalculateGroundConstraintStrengthScalar()
	{
		return 1500;
		return;
	}
	stop;
}

defaultproperties
{
	HoloLifeTime=20
	SpeakInterval=9
	SpeakIntervalVariance=2
	WeaponConfig='WeaponCfg_HoloDuke'
	Weapons(0)=class'm_aTarget'
	Weapons(1)=none
	Weapons(2)=class'ChanceSayPain'
	Weapons(3)=class'DefaultAITickMSGraph'
	Weapons(4)=class'm_aTarget'
	Weapons(5)=class'SpawnedActor'
	Weapons(6)=class'C'
	Weapons(7)=class'MachineGun_HoloDuke'
	Weapons(8)=class'Shotgun_HoloDuke'
	Weapons(9)=class'Pistol_HoloDuke'
	Weapons(10)=class'P'
	Weapons(11)=class'PrecacheIndex'
	Weapons(12)=class'dnPipeBombProjectile_Timed_AI_HoloDuke'
	Weapons(13)=class'i'
	Weapons(14)=class'i'
	Weapons(15)=class'MuzzleFlash'
	Weapons(16)=class'AIActorFactoryListener'
	Weapons(17)=class'PrecacheIndex'
	Weapons(18)=class'AIFactionDuke'
	Weapons(19)=class'Mode'
	Weapons(20)=class'm_aTarget'
	Weapons(21)=class'm_aTarget'
	Weapons(22)=class'C'
	Weapons(23)=class'TickingAIList'
	Weapons(24)=none
	Weapons(25)=none
	Weapons(26)=none
	Weapons(27)=class'acCycloid_Combat'
	Weapons(28)=class'ReturnValue'
	Weapons(29)=class'AIActorFactoryListener'
	Weapons(30)=class'PrecacheIndex'
	Weapons(31)=class'AIFactionHuman'
	Weapons(32)=class'Mode'
	Weapons(33)=class'm_aTarget'
	Weapons(34)=class'AnimXParms'
	Weapons(35)=class'C'
	Weapons(36)=class'TickingAIList'
	Weapons(37)=none
	Weapons(38)=none
	Weapons(39)=none
	Weapons(40)=class'acCycloid_Combat'
	Weapons(41)=class'ReturnValue'
	Weapons(42)=class'AIActorFactoryListener'
	Weapons(43)=class'PrecacheIndex'
	Weapons(44)=class'AIFactionHoloduke'
	Weapons(45)=class'Mode'
	Weapons(46)=class'm_aTarget'
	Weapons(47)=class'AnimXParms'
	Weapons(48)=class'C'
	Weapons(49)=class'TickingAIList'
	Weapons(50)=none
	Weapons(51)=none
	Weapons(52)=none
	Weapons(53)=class'acCycloid_Combat'
	Weapons(54)=class'ReturnValue'
	Weapons(55)=class'AIActorFactoryListener'
	Weapons(56)=class'PrecacheIndex'
	Weapons(57)=class'AIFactionAlien'
	Weapons(58)=class'Mode'
	Weapons(59)=class'm_aTarget'
	Weapons(60)=class'm_aTarget'
	Weapons(61)=class'C'
	Weapons(62)=class'TickingAIList'
	Weapons(63)=none
	Weapons(64)=none
	Weapons(65)=none
	Weapons(66)=class'acCycloid_Combat'
	Weapons(67)=class'ReturnValue'
	Weapons(68)=class'MP_LeechGibs'
	Weapons(69)=class'JumpAttackParms'
	Weapons(70)=class'C'
	Ident=/* Unknown default property type! */
	_a_neutral_pistol_stan=SAnimationFadeBlend
	Anim_PainFrontHeadBig="^?"
	
/* Exception thrown while deserializing Yaw
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at UELib.UnrealPackage.GetIndexName(Int32 nameIndex) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\UnrealPackage.cs:line 1840
   at UELib.UnrealStreamImplementations.ReadName(IUnrealStream stream) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\UnrealStream.cs:line 828
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 574 */
}