/*******************************************************************************
 * BugBall generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class BugBall extends AIActor
	config
	collapsecategories;

var() noexport int KeyID "Only is accepted into wallsockets with same key ID";
var() noexport float WakeTime "Time to wake up from ball mode. If <= 0 then they will never wake up.";
var Bugball_sphere CollisionSphere;
var bool BallMode;
var bool ShouldEnterBallMode;
var bool ShouldEndBallMode;
var float TimeAtRest;
var() float RollSoundVelMax;
var() float RollSoundVelMin;
var() float RollSoundVolMax;
var() float RollSoundVolMin;
var float RollSoundGate;
var bool bFadeDukeVision;

event Tick(float Delta)
{
	local Vector Vel;
	local float V, vol;

	super(Actor).Tick(Delta);
	// End:0x90
	if(__NFUN_148__(BallMode, __NFUN_201__(WakeTime, float(0))))
	{
		CollisionSphere.__NFUN_794__(Vel);
		// End:0x85
		if(__NFUN_200__(__NFUN_252__(Vel), 1))
		{
			__NFUN_209__(TimeAtRest, Delta);
			// End:0x82
			if(__NFUN_201__(TimeAtRest, WakeTime))
			{
				TimeAtRest = 0;
				ShouldEndBallMode = true;
				SuspendExecutive(false);
				SetExecutive(2);
			}			
		}
		else
		{
			TimeAtRest = 0;
		}
	}
	// End:0xD6
	if(__NFUN_148__(bFadeDukeVision, __NFUN_201__(DukeVisionInterference, 0)))
	{
		__NFUN_210__(DukeVisionInterference, __NFUN_195__(Delta, float(500)));
		// End:0xD6
		if(__NFUN_200__(DukeVisionInterference, 0))
		{
			DukeVisionInterference = 0;
		}
	}
	return;
}

event PostBeginPlay()
{
	super.PostBeginPlay();
	return;
}

function Anim_MoveTo(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
	super.Anim_MoveTo(eMoveSpeed);
	FindAndPlaySound('Skitter');
	return;
}

function Anim_Idle()
{
	super.Anim_Idle();
	__NFUN_701__(default.AmbientSound);
	return;
}

function Destroyed()
{
	// End:0x19
	if(__NFUN_340__(CollisionSphere, none))
	{
		CollisionSphere.__NFUN_614__();
	}
	return;
}

event name GetIdleAnimName()
{
	// End:0x0F
	if(BallMode)
	{
		return 'Anim_IdleRoll';
	}
	return 'Anim_Idle';
	return;
}

function SpawnCollisionSphere()
{
	// End:0x0E
	if(__NFUN_340__(CollisionSphere, none))
	{
		return;
	}
	CollisionSphere = __NFUN_615__(class'Bugball_sphere', self,,,,, true);
	CollisionSphere.Deactivate();
	CollisionSphere.MyBugBall = self;
	return;
}

simulated event bool CanBreatheNormally()
{
	return true;
	return;
}

function ExecuteBallMode()
{
	SpawnCollisionSphere();
	__NFUN_862__(false);
	__NFUN_642__(0);
	__NFUN_621__(false, false, false, false, false);
	DetachedFromMountParent();
	CollisionSphere.DetachedFromMountParent();
	CollisionSphere.__NFUN_645__(Location, true);
	MountType = 0;
	__NFUN_635__(CollisionSphere, false, false, true);
	CollisionSphere.__NFUN_642__(18);
	CollisionSphere.Activate();
	SetExecutive(0);
	bAutoStartDecisionTree = true;
	SuspendExecutive(true);
	BallMode = true;
	__NFUN_701__(default.AmbientSound);
	return;
}

function ExecuteWalkerMode()
{
	DetachedFromMountParent();
	__NFUN_642__(18);
	__NFUN_862__(true);
	__NFUN_621__(true, true, true, true, true);
	// End:0x33
	if(__NFUN_340__(CollisionSphere, none))
	{
		CollisionSphere.Deactivate();
	}
	BallMode = false;
	SuspendExecutive(false);
	SetExecutive(2);
	return;
}

function BeginExecuteWalkerMode()
{
	return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
	super.NotifyOpEnded(Op, Status);
	// End:0x24
	if(__NFUN_173__(int(Op), int(7)))
	{
		ExecuteBallMode();
	}
	return;
}

event NotifyOpStarted(Engine.BaseAI.EAIOp NewOp, Engine.BaseAI.EAIOp OldOp)
{
	// End:0x22
	if(__NFUN_173__(int(NewOp), int(8)))
	{
		FindAndPlaySound('Unfold');
		ExecuteWalkerMode();		
	}
	else
	{
		// End:0x3B
		if(__NFUN_173__(int(NewOp), int(7)))
		{
			FindAndPlaySound('Fold');
		}
	}
	return;
}

function TookDamage(Pawn Instigator, float Damage, Engine.Object.EPawnBodyPart Part, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	ShouldEnterBallMode = true;
	ScriptTag = 'None';
	AbortScripts();
	return;
}

event Engine.BaseAI.EAICode COND_ShouldEnterBallMode()
{
	// End:0x14
	if(ShouldEnterBallMode)
	{
		ShouldEnterBallMode = false;
		return 0;
	}
	return 1;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldEndBallMode()
{
	// End:0x14
	if(ShouldEndBallMode)
	{
		ShouldEndBallMode = false;
		return 0;
	}
	return 1;
	return;
}

event ScriptCalcRotation(out Rotator OldRotation, out Rotator NewRotation, float DeltaTime)
{
	NewRotation.Pitch = 0;
	NewRotation.Roll = 0;
	return;
}

function NotifySocketed()
{
	FindAndPlaySound('Socket_In');
	bFadeDukeVision = true;
	return;
}

function NotifyUnsocketed()
{
	FindAndPlaySound('Socket_Out');
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(Pawn).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'Bugball_sphere');
	PrecacheIndex.__NFUN_1283__('Anim_Idle', class'acBugball', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_IdleRoll', class'acBugball', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Openup', class'acBugball', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Rollup', class'acBugball', Mesh);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Fold');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Skitter');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Socket_In');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Socket_Out');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Unfold');
	return;
}

event EnumerateUsableAnimationControllers(PrecacheIndex PrecacheIndex, out array<Engine.BaseAI.EAIAnimController> UsableControllers)
{
	UsableControllers[string(UsableControllers)] = 1;
	return;
}

defaultproperties
{
	RollSoundVelMax=20
	RollSoundVelMin=1
	RollSoundVolMax=1
	Nodes(0)=(Cond=22,Root=8.117489E+11)
}