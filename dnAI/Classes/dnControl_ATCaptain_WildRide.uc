/*******************************************************************************
 * dnControl_ATCaptain_WildRide generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_ATCaptain_WildRide extends dnControl_TapPowered
	collapsecategories;

var() noexport deprecated name InitialFlightPointTag "InterpolationPoint to teleport to and start flying around.";
var() noexport deprecated name FinishEvent "Event to be fired when final punch is delivered and finish state begins.";
var name GridAnimName;
var Vector ATSpawnLocationOffset;
var Rotator ATSpawnRotationOffset;
var float ATPunchDamage;
var AssaultTrooper_Captain AT;
var float Stage1PunchDelay;
var float Stage2FailTimer;
var int FailPunches;
var int RequiredPunches;
var int NumATPunches;
var int NumPunches;
var localized string PunchText;
var Pawn AttachPawn;
var() SRumbleInfo ActiveRumble;
var() SRumbleInfo IdleRumble;

final function SpawnTrooper()
{
	// End:0x0E
	if(__NFUN_340__(AT, none))
	{
		return;
	}
	AT = __NFUN_615__(class'AssaultTrooper_Captain_WildRide', self,, __NFUN_238__(Location, __NFUN_263__(ATSpawnLocationOffset, Rotation)), __NFUN_269__(ATSpawnRotationOffset, Rotation), false, true);
	// End:0x4F
	if(__NFUN_339__(AT, none))
	{
		return;
	}
	AT.StartTeleportOverlayEffects();
	AT.EndTeleportOverlayEffects();
	AT.NotifyTeleportEnd();
	AT.SetAnimSync(1, 1, 1, 1, 2);
	AT.bAutoStartWeaponTargetEval = false;
	AT.bAutoStartLookTargetEval = false;
	AT.bAutoStartDecisionTree = false;
	AT.CanProcFire = false;
	AT.AIDisableIK();
	AT.TickStyle = 3;
	AT.__NFUN_642__(9);
	AT.StoreCollision();
	AT.__NFUN_621__(,,, false);
	return;
}

final function ReleaseControlOfTrooper()
{
	// End:0x0E
	if(__NFUN_339__(AT, none))
	{
		return;
	}
	AT.TickStyle = AT.default.TickStyle;
	AT.RestoreCollision();
	AT.__NFUN_642__(AT.default.Physics);
	AT.SuspendWeaponTargetEvaluation(false);
	AT.SuspendLookTargetEvaluation(false);
	AT.SetExecutive(2);
	AT.JetStop();
	AT = none;
	return;
}

final simulated function AttemptAttach()
{
	// End:0x17
	if(__NFUN_340__(AttachPawn, none))
	{
		AttachPawnSuccess(AttachPawn);
	}
	return;
}

simulated function AttachPawnSuccess(Pawn Attachee, optional bool bForced)
{
	// End:0x2B
	if(__NFUN_145__(UsableSomethingCanBeUsedBy(Attachee)))
	{
		AttachPawn = Attachee;
		__NFUN_607__(1, false, 'AttemptAttach');
		return;
	}
	__NFUN_645__(__NFUN_239__(Attachee.Location, __NFUN_232__(0, 0, Attachee.CollisionHeight)));
	__NFUN_652__(Attachee.Rotation);
	// End:0x85
	if(__NFUN_340__(InternalControlRemapper, none))
	{
		InternalControlRemapper.__NFUN_630__();
	}
	SpawnTrooper();
	super(dnControl).AttachPawnSuccess(Attachee, bForced);
	User.TickBefore = AT;
	return;
}

simulated function PlayUserAnim()
{
	super(dnControl).PlayUserAnim();
	// End:0x71
	if(__NFUN_148__(__NFUN_148__(__NFUN_342__(States[CurrentStateIndex].UserAnimName, 'None'), __NFUN_340__(AT, none)), __NFUN_340__(AT.AnimationController, none)))
	{
		AT.AnimationController.SetAnimState(States[CurrentStateIndex].UserAnimName);
	}
	return;
}

simulated function HandleDecoAnimEvent(EventInfo EventParms)
{
	super(InteractiveActor).HandleDecoAnimEvent(EventParms);
	// End:0x33
	if(__NFUN_310__(EventParms.EventString, "BeginTeleport"))
	{
		BeginTeleport();		
	}
	else
	{
		// End:0x56
		if(__NFUN_310__(EventParms.EventString, "Teleport"))
		{
			DoTeleport();			
		}
		else
		{
			// End:0x7A
			if(__NFUN_310__(EventParms.EventString, "DamagePlayer"))
			{
				DamagePlayer();
			}
		}
	}
	return;
}

simulated function BeginTeleport()
{
	// End:0x66
	if(__NFUN_340__(AT, none))
	{
		AT.NotifyTeleportStart();
		AT.StartTeleportOverlayEffects();
		AT.StartTeleportOverlayEffectsOnActor(User);
		AT.__NFUN_635__(self, false, false, true, false, false);
		AT.bNoFailMountedMovement = true;
	}
	return;
}

simulated function DoTeleport()
{
	local SScreenFlash PurpleFlash;

	// End:0x93
	if(__NFUN_148__(__NFUN_340__(PlayerUser, none), __NFUN_340__(PlayerUser.MyHUD, none)))
	{
		PurpleFlash.ColorStart = NewColorBytes(192, 0, 192, 255);
		PurpleFlash.ColorEnd = PurpleFlash.ColorStart;
		PurpleFlash.ColorEnd.A = 0;
		PurpleFlash.Lifetime = 0.5;
		PlayerUser.MyHUD.AddScreenFlash(PurpleFlash);
	}
	// End:0xE4
	if(__NFUN_340__(AT, none))
	{
		AT.JetStart();
		AT.EndTeleportOverlayEffects();
		AT.EndTeleportOverlayEffectsOnActor(User);
		AT.NotifyTeleportEnd();
	}
	AttachToPath(InitialFlightPointTag, true);
	return;
}

simulated function DamagePlayer()
{
	local float TotalHealth, DamageAmount;

	// End:0xBB
	if(__NFUN_340__(User, none))
	{
		DamageAmount = ATPunchDamage;
		TotalHealth = __NFUN_198__(User.Health, User.Ego);
		// End:0x65
		if(__NFUN_203__(DamageAmount, TotalHealth))
		{
			DamageAmount = __NFUN_225__(0, __NFUN_199__(TotalHealth, 1));
		}
		User.TakeDamage(AT, DamageAmount, User.Location, __NFUN_235__(float(-1), Vector(User.Rotation)), class'MeleeDamage',, AT.Location);
	}
	return;
}

simulated function ATPunchTimer()
{
	ControlEvent(, 'ATPunch');
	return;
}

simulated function FailTimer()
{
	ControlEvent(, 'Fail');
	return;
}

final simulated function SelfDestructFunc()
{
	__NFUN_614__();
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'AssaultTrooper_Captain_WildRide');
	PrecacheIndex.__NFUN_1266__(class'dnScreenSplatter_Blood');
	PrecacheIndex.__NFUN_1279__(class'MeleeDamage');
	PrecacheIndex.__NFUN_1281__(GridAnimName);
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Falling_Flail');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'KnockDown_VOC');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Rage_VOC');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Pat_01');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Pat_02');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Scuff');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_StandShift');
	return;
}

state() AttachUserAnim
{
	event BeginState()
	{
		super(Object).BeginState();
		PlayerPawn(User).AddRumble(ActiveRumble);
		PlayerPawn(User).AddRumble(IdleRumble);
		return;
	}
	stop;
}

state() idle
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		RestoreDefaults();
		__NFUN_607__(Stage1PunchDelay, false, 'ATPunchTimer');
		PlayerPawn(User).AddRumble(IdleRumble);
		return;
	}

	function FullyLifted()
	{
		super(dnControl_TapPowered).FullyLifted();
		__NFUN_608__('ATPunch');
		ControlEvent(, 'Success');
		return;
	}

	function UpdateUserLift()
	{
		super(dnControl_TapPowered).UpdateUserLift();
		User.AnimationController.SetAnimGridState(GridAnimName, UserLiftVal);
		// End:0x72
		if(__NFUN_148__(__NFUN_340__(AT, none), __NFUN_340__(AT.AnimationController, none)))
		{
			AT.AnimationController.SetAnimGridState(GridAnimName, UserLiftVal);
		}
		return;
	}
	stop;
}

state FailBaseState
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		__NFUN_642__(0);
		return;
	}

	simulated function AnimCallback_UserAnimEnd()
	{
		global.AnimCallback_UserAnimEnd();
		// End:0x23
		if(__NFUN_340__(User, none))
		{
			User.TickBefore = none;
		}
		DetachPawnSuccess(false);
		AnimCallback_UserDetached();
		return;
	}
	stop;
}

state() Stage1_ATPunch
{
	simulated function AnimCallback_UserAnimEnd()
	{
		super(dnControl).AnimCallback_UserAnimEnd();
		__NFUN_184__(NumATPunches);
		// End:0x2B
		if(__NFUN_172__(NumATPunches, FailPunches))
		{
			ControlEvent(, 'Fail');			
		}
		else
		{
			ControlEvent(, 'idle');
		}
		return;
	}
	stop;
}

state() Stage1_Success
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		ActiveRumble.RumbleLeftMagnitude = 0.6;
		ActiveRumble.RumbleRightMagnitude = 0.4;
		PlayerPawn(User).AddRumble(ActiveRumble);
		return;
	}

	simulated event EndState()
	{
		super(Object).EndState();
		__NFUN_607__(Stage2FailTimer, false, 'FailTimer');
		return;
	}
	stop;
}

state() Stage1_Fail extends FailBaseState
{	stop;
}

state() Stage2_Idle
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		// End:0x21
		if(__NFUN_172__(NumPunches, RequiredPunches))
		{
			ControlEvent(, 'Success');
		}
		PlayerPawn(User).AddRumble(IdleRumble);
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		SetHUDKeyInfoState(HUD, 1, true, 26, false, true, PunchText);
		return;
	}
	stop;
}

state() Stage2_Punch
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		// End:0x1F
		if(__NFUN_172__(__NFUN_182__(NumPunches), RequiredPunches))
		{
			__NFUN_608__('FailTimer');
		}
		ActiveRumble.RumbleLeftMagnitude = 0.5;
		ActiveRumble.RumbleRightMagnitude = 0.9;
		PlayerPawn(User).AddRumble(ActiveRumble);
		return;
	}

	simulated function InteractUser(Pawn User)
	{
		local dnScreenSplatters BloodSplatter;
		local PlayerPawn PUser;

		super(InteractiveActor).InteractUser(User);
		// End:0x34
		if(__NFUN_148__(__NFUN_173__(NumPunches, 1), __NFUN_340__(AT, none)))
		{
			AT.KnockOffHelmet();
		}
		// End:0xF1
		if(__NFUN_172__(NumPunches, RequiredPunches))
		{
			// End:0x5F
			if(__NFUN_340__(AT, none))
			{
				AT.KnockOffHead();
			}
			PUser = PlayerPawn(User);
			// End:0xE0
			if(__NFUN_340__(PUser, none))
			{
				BloodSplatter = dnScreenSplatters(FindStaticActor(class'dnScreenSplatter_Blood'));
				// End:0xE0
				if(__NFUN_340__(BloodSplatter, none))
				{
					BloodSplatter.__NFUN_645__(__NFUN_238__(PUser.CalcedViewLocation, Vector(PUser.CalcedViewRotation)));
					BloodSplatter.AttachEffectTo(PUser);
				}
			}
			GlobalTrigger(FinishEvent, User, self);
		}
		return;
	}
	stop;
}

state() Stage2_Success
{
	event BeginState()
	{
		super(Object).BeginState();
		ActiveRumble.RumbleLeftMagnitude = 0.3;
		ActiveRumble.RumbleRightMagnitude = 0.6;
		PlayerPawn(User).AddRumble(ActiveRumble);
		return;
	}
	stop;
}

state() Stage2_Fail extends FailBaseState
{	stop;
}

state() Finish
{
	event BeginState()
	{
		RandomizeFinishRumble();
		return;
	}

	function RandomizeFinishRumble()
	{
		ActiveRumble.RumbleLeftMagnitude = __NFUN_222__();
		ActiveRumble.RumbleRightMagnitude = __NFUN_222__();
		PlayerPawn(User).AddRumble(ActiveRumble);
		return;
	}

	function Tick(float Delta)
	{
		// End:0x12
		if(__NFUN_200__(__NFUN_222__(), 0.35))
		{
			RandomizeFinishRumble();
		}
		return;
	}
	stop;
}

state() DetachUser
{
	event BeginState()
	{
		super(Object).BeginState();
		AnimCallback_UserDetached();
		return;
	}
	stop;
}

state() SelfDestruct
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		ReleaseControlOfTrooper();
		__NFUN_607__(1, false, 'SelfDestructFunc');
		return;
	}
	stop;
}

defaultproperties
{
	GridAnimName=ATWildRide_Stage1_Grid
	ATSpawnLocationOffset=(X=3.632274E+13,Y=3.778607E-17,Z=0)
	ATSpawnRotationOffset=(Pitch=8754,Yaw=574554112,Roll=32768)
	ATPunchDamage=30
	Stage1PunchDelay=2
	Stage2FailTimer=5
	FailPunches=3
	RequiredPunches=5
	PunchText="<?int?dnAI.dnControl_ATCaptain_WildRide.PunchText?>"
	ActiveRumble=(RumbleName=WildRideActiveRumble,RumbleDuration=0.3,RumbleLeftMagnitude=0.4,RumbleRightMagnitude=0.7,FalloffActor=none,FalloffDistance=0)
	IdleRumble=(RumbleName=WildRideIdleRumble,RumbleDuration=10,RumbleLeftMagnitude=0.2,RumbleRightMagnitude=0.1,FalloffActor=none,FalloffDistance=0)
	bForceDrop=false
	StartTapInterval=0.5
	EndTapInterval=0.3
	RateOfGain=0.1
	RateOfLoss=0.2
	States=/* Array type was not detected. */
}