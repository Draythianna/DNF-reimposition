/*******************************************************************************
 * cycloid generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class cycloid extends AIActor
	config
	collapsecategories
	dependson(Cycloid_MortarLauncher)
	dependson(Cycloid_EyeBeam)
	dependson(Cycloid_AttackBeam)
	dependson(dnGrenade_Cycloid_Mortar)
	dependson(Cycloid_Mortar_Target)
	dependson(Cycloid_Shockwave_Sensor);

struct SCycloidWeaponInfo
{
	var array<name> MuzzleNames;
	var int MuzzleIndex;
	var class<dnProjectile> ProjectileClass;
	var int ProjectilesPerFire;
	var bool FireLikeGrenade;
	var name SoundName;
};

struct SCycloidBoneAimInfo
{
	var() name BoneName;
	var() Vector BoneDir;
	var() array<Engine.BaseAI.EAIOp> EnabledOps;
	var() bool bDebug;
};

var() noexport deprecated name ShockwaveTag "Trigger this to force a shockwave attack";
var() noexport deprecated name ShockwaveCompleteEvent "This event will be triggered whenever defend mode is activated";
var() noexport deprecated name MortarTag "Trigger this to force a shockwave attack";
var() noexport deprecated name MortarCompleteEvent "This event will be triggered whenever defend mode is activated";
var() noexport deprecated name MortarSearchTag "Trigger this to force a shockwave attack";
var() noexport deprecated name MortarSearchCompleteEvent "This event will be triggered whenever defend mode is activated";
var() noexport deprecated name BeamAttackTag "Trigger this to force a shockwave attack";
var() noexport deprecated name BeamAttackCompleteEvent "This event will be triggered whenever defend mode is activated";
var() noexport deprecated name DoubleFistSmashTag "Trigger this to force a double fist smash attack";
var() noexport deprecated name Map00NoUseEvent "This event will be triggered if bForMap00 is true after the cycloid falls twice IF the player didn't go up and use him while he was down the first time.";
var() noexport deprecated name Map00UsedEvent "This event will be triggered is bForMap00 is true if the player uses the cycloid while we was down.  It can be used to cancel the hint.";
var byte Map00NoUseKnockdowns;
var(Cycloid_RocketAttack) float RocketSpread;
var(Cycloid_RocketAttack) float ChanceGrenade;
var(Cycloid_RocketAttack) float RocketSpeed;
var(Cycloid_RocketAttack) float RocketDamage;
var(Cycloid_RocketAttack) float RocketDamageRadius;
var(Cycloid_WeaponInfo) array<SCycloidWeaponInfo> WeaponInfo;
var(Cycloid_WeaponInfo) array<SCycloidBoneAimInfo> BoneAimInfo;
var int WeaponIndex;
var() noexport float HumiliationTimeout "If > 0.0f, this is the amount of time the player has to perform the humiliation.  If the player doesn't use the Cycloid within this window, the HumiliationCompleteEvent will trigger and the cycloid will no longer be usable.";
var() noexport deprecated class<dnControl_CycloidHumiliation_FieldGoal> HumiliationClass "Type of humiliation to use on this cycloid.";
var() noexport deprecated Actor FieldGoalAlignmentActor "Specify an Actor that we should teleport to when doing our field goal kick humiliation.";
var() noexport deprecated name HumiliationStartEvent "This event will trigger when the humiliation finish is started.";
var() noexport deprecated name HumiliationCompleteEvent "This event will trigger when the humiliation finish is complete.";
var() noexport float ActionPointMoveMinInterval "Minimum amount of time between moves.";
var transient float ActionPointMoveGate;
var(Cycloid_Charge) float ChargeEnragedMinInterval;
var(Cycloid_Charge) float ChargeMinInterval;
var(Cycloid_Charge) float ChargeImpulseMagnitude;
var(Cycloid_Charge) float ChargeImpulseLift;
var(Cycloid_Charge) bool ChargeDebug;
var(Cycloid_Charge) array<name> ChargeIgnoreActorList;
var(Cycloid_Charge) noexport float ChargeForceDistance "If target is this far away, we force charge at any stage of the battle";
var(Cycloid_Charge) noexport float ChargeMinDistance "Target must be at least this far away to do a charge";
var(Cycloid_Charge) noexport float ChargeHitDamage "Inflict this much damage if we hit the player during charge";
var(Cycloid_Charge) bool ChargeShouldKnockdown;
var(Cycloid_Charge) bool ChargeEnabled;
var(Cycloid_Charge) bool bForceCharge;
var(Cycloid_Charge) transient float ChargeGate;
var(Cycloid_Charge) float ChargeCollisionHeight;
var SoftParticleSystem RightChargetStartParticleSystem;
var SoftParticleSystem LeftChargetStartParticleSystem;
var SoftParticleSystem RightChargetJetParticleSystem;
var SoftParticleSystem LeftChargetJetParticleSystem;
var SoftParticleSystem RightFootParticleSystem;
var SoftParticleSystem LeftFootParticleSystem;
var(cycloid_mortar) float MortarMinInterval;
var(cycloid_mortar) noexport float MortarSearchTime "Time he spends searching before firing the mortar";
var(cycloid_mortar) noexport float MortarSearchTimeRnd "RND time he spends searching before firing the mortar";
var(cycloid_mortar) float MortarDamage;
var(cycloid_mortar) float MortarDamageRadius;
var transient float MortarGate;
var bool MortarEnabled;
var Cycloid_MortarLauncher MortarLauncher;
var Cycloid_EyeBeam EyeBeam;
var Cycloid_Mortar_Target MortarTarget;
var bool EyeBeamSearching;
var Actor EyeBeamAquiredTarget;
var(Cycloid_Shockwave) noexport bool ShockwaveDebug "Draw debugging info for shockwaves.";
var(Cycloid_Shockwave) noexport int ShockwaveSpawnCount "How many shockwave projectiles get spawned per shockwave stomp.";
var(Cycloid_Shockwave) noexport int ShockwaveDeltaYaw "Shockwave delta angle.";
var(Cycloid_Shockwave) float ShockwaveMinInterval;
var(Cycloid_Shockwave) transient float ShockwaveGate;
var(Cycloid_Shockwave) class<dnFriendFX_Spawners> ShockwaveSpawnParticleClass;
var dnFriendFX_Spawners ShockwaveSpawnParticleSpawner;
var(Cycloid_Shockwave) bool ShockwaveEnabled;
var(Cycloid_Shockwave) bool ShockwaveMultiEnabled;
var(Cycloid_Shockwave) noexport float ShockwaveStage2MinTime "Time to spend in mutli shockwave animation in stage2";
var(Cycloid_Shockwave) noexport float ShockwaveStage3MinTime "Time to spend in mutli shockwave animation in stage3";
var(Cycloid_Shockwave) float ShockwaveSpeed;
var(Cycloid_Shockwave) float ShockwaveScale;
var(Cycloid_Shockwave) float ShockwaveDamage;
var(Cycloid_BeamAttack) float BeamAttackMinInterval;
var transient float BeamAttackGate;
var bool BeamAttackEnabled;
var Cycloid_AttackBeam LeftHandBeam;
var Cycloid_AttackBeam RightHandBeam;
var SoftParticleSystem LeftHandChargeParticleSystem;
var SoftParticleSystem RightHandChargeParticleSystem;
var() noexport bool bForMap00 "If true, this cycloid will follow a different set of rules for controlling his behaviours and won't be able to do some attacks.  He will also only use Health_Stage1, so adjust that something that works.";
var() float Health_RecoveryHealth;
var() float Health_Stage1;
var() float Health_Stage2;
var() float Health_Stage3;
var() noexport float Health_Stage4 "Health in the 4th enraged state. This only happens if there are Cycloid_PowerConduits in the level";
var() float StrengthTapInitiateTimeout;
var() float StrengthTapTimeout;
var() float StrengthTapFailDamage;
var() noexport deprecated name Stage1_CompleteEvent "This event will be triggered when the Cycloid transitions from stage 1 to stage 2";
var() noexport deprecated name Stage2_CompleteEvent "This event will be triggered when the Cycloid transitions from stage 2 to stage 3";
var() noexport deprecated name Stage3_CompleteEvent "This event will be triggered when the Cycloid transitions from stage 3 to stage 4";
var() noexport deprecated name BackDamagedEvent "This event will be triggered right when the player removes the wires from the Cycloid's back.";
var() noexport deprecated name FallDownEvent "This event will be triggered when Cycloid falls down into strength tap.";
var() noexport deprecated name GetUpEvent "This event will be triggered when Cycloid gets back up from strength tap.";
var() int CycloidStage;
var() array<Cycloid_PowerConduit> PowerConduits;
var bool bEnraged;
var() float SafeHeight;
var bool DoubleFire;
var bool bForceRoar;
var array<SMountedActorPrefab> RightArmSteamPrefabs;
var array<SMountedActorPrefab> RightArmDamagedPrefabs;
var array<SMountedActorPrefab> LeftArmSteamPrefabs;
var array<SMountedActorPrefab> LeftArmDamagedPrefabs;
var array<SMountedActorPrefab> BackSteamPrefabs;
var array<SMountedActorPrefab> BackDamagedPrefabs;
var array<SoftParticleSystem> RightArmSteamParticles;
var array<SoftParticleSystem> LeftArmSteamParticles;
var array<SoftParticleSystem> BackSteamParticles;
var bool bPrePivotHack;

event PostBeginPlay()
{
	local Cycloid_PowerConduit Conduit;

	super.PostBeginPlay();
	__NFUN_718__('ForceShockwave', ShockwaveTag);
	__NFUN_718__('ForceBeamAttack', BeamAttackTag);
	__NFUN_718__('ForceMortar', MortarTag);
	__NFUN_718__('ForceMortarSearch', MortarSearchTag);
	__NFUN_718__('ForceDoubleFistSmash', DoubleFistSmashTag);
	MortarLauncher = Cycloid_MortarLauncher(FindMountedActor(, class'Cycloid_MortarLauncher'));
	MortarTarget = __NFUN_615__(class'Cycloid_Mortar_Target', self);
	LeftHandBeam = Cycloid_AttackBeam(FindMountedActor('LeftAttackBeam', class'Cycloid_AttackBeam'));
	RightHandBeam = Cycloid_AttackBeam(FindMountedActor('RightAttackBeam', class'Cycloid_AttackBeam'));
	EyeBeam = Cycloid_EyeBeam(FindMountedActor('EyeBeam', class'Cycloid_EyeBeam'));
	EyeBeam.MyCycloid = self;
	LeftHandChargeParticleSystem = SoftParticleSystem(FindMountedActor('LeftAttackBeamCharge', class'SoftParticleSystem'));
	RightHandChargeParticleSystem = SoftParticleSystem(FindMountedActor('RightAttackBeamCharge', class'SoftParticleSystem'));
	RightChargetStartParticleSystem = SoftParticleSystem(FindMountedActor('RightChargeStartParticleSystem', class'SoftParticleSystem'));
	LeftChargetStartParticleSystem = SoftParticleSystem(FindMountedActor('LeftChargeStartParticleSystem', class'SoftParticleSystem'));
	RightChargetJetParticleSystem = SoftParticleSystem(FindMountedActor('RightChargeJetParticleSystem', class'SoftParticleSystem'));
	LeftChargetJetParticleSystem = SoftParticleSystem(FindMountedActor('LeftChargeJetParticleSystem', class'SoftParticleSystem'));
	RightFootParticleSystem = SoftParticleSystem(FindMountedActor('RightChargeFootParticleSystem', class'SoftParticleSystem'));
	LeftFootParticleSystem = SoftParticleSystem(FindMountedActor('LeftChargeFootParticleSystem', class'SoftParticleSystem'));
	// End:0x1CB
	foreach __NFUN_747__(class'Cycloid_PowerConduit', Conduit)
	{
		PowerConduits[PowerConduits.Add(1)] = Conduit;		
	}	
	DeactivateBeams();
	EyeBeam.DeactivateBeam();
	// End:0x237
	if(bForMap00)
	{
		FinishMeControlType = class'dnControl_Cycloid_BattleC';
		HumiliationClass = class'dnControl_CycloidHumiliation_FieldGoal';
		ChargeEnabled = false;
		BeamAttackEnabled = false;
		ShockwaveEnabled = false;
		ShockwaveMultiEnabled = false;
		MortarEnabled = false;
		MeleeZone = 0;		
	}
	else
	{
		FinishMeControlType = class'dnControl_Cycloid_BattleA';
		HumiliationClass = class'dnControl_CycloidHumiliation_EyeUrinal';
		ChargeEnabled = true;
		BeamAttackEnabled = false;
		ShockwaveEnabled = true;
		ShockwaveMultiEnabled = false;
		MortarEnabled = false;
	}
	SetNewHealth(Health_Stage1);
	CycloidStage = 1;
	return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	local float PrevHealth, CutoffHealth;

	// End:0x26
	if(bForMap00)
	{
		CutoffHealth = __NFUN_195__(0.5, Health_Stage1);
		PrevHealth = Health;
	}
	super(Pawn).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
	// End:0xA5
	if(__NFUN_148__(__NFUN_148__(bForMap00, __NFUN_201__(PrevHealth, CutoffHealth)), __NFUN_202__(Health, CutoffHealth)))
	{
		ChargeEnabled = true;
		ShockwaveEnabled = true;
		MeleeZone = default.MeleeZone;
		bForceRoar = true;
		bForceCharge = true;
	}
	return;
}

simulated event float GetHealthMeterPercent()
{
	// End:0x6E
	if(__NFUN_145__(bForMap00))
	{
		// End:0x2B
		if(__NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleA'))
		{
			return __NFUN_196__(Health, Health_Stage1);			
		}
		else
		{
			// End:0x4B
			if(__NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleB'))
			{
				return __NFUN_196__(Health, Health_Stage2);				
			}
			else
			{
				// End:0x68
				if(__NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleC'))
				{
					return __NFUN_196__(Health, Health_Stage3);
				}
			}
		}
		return 0;
	}
	return __NFUN_196__(Health, Health_Stage1);
	return;
}

final simulated function TriggerFunc_ForceShockwave()
{
	SetupShockwave();
	CycloidForceOp(6);
	return;
}

final simulated function TriggerFunc_ForceMortar()
{
	SetupMortar();
	CycloidForceOp(6);
	return;
}

final simulated function TriggerFunc_ForceMortarSearch()
{
	SetupMortarSearch();
	CycloidForceOp(6);
	return;
}

final simulated function TriggerFunc_ForceBeamAttack()
{
	SetupBeamAttack();
	CycloidForceOp(6);
	return;
}

final simulated function TriggerFunc_ForceDoubleFistSmash()
{
	SetupDoubleFistSmash();
	CycloidForceOp(6);
	return;
}

final function CycloidForceOp(Engine.BaseAI.EAIOp NewOp)
{
	// End:0x40
	if(__NFUN_173__(int(CanUseOp(NewOp)), int(0)))
	{
		CurrentOpMustFinish = false;
		ExecuteOp(NewOp);
		CurrentOpMustFinish = true;
		SuspendExecutive(true);
		SuspendExecutive(false);		
	}
	else
	{
		BroadcastLog(__NFUN_302__("Cycloid failed to start force OP: ", string(__NFUN_365__(class'EAIOp', int(NewOp)))));
	}
	return;
}

event NotifyMultiAnimStart()
{
	// End:0x51
	if(__NFUN_173__(MultiAnimIndex, 0))
	{
		FindSoundAndSpeak('Sound_ChargeJet');
		EnableParticleSystem(RightChargetStartParticleSystem);
		EnableParticleSystem(LeftChargetStartParticleSystem);
		StandingCollisionHeight = ChargeCollisionHeight;
		SetCollisionInterpolationTarget(CollisionRadius, ChargeCollisionHeight, 0, 0.5);
	}
	return;
}

event NotifyMultiAnimLoop()
{
	// End:0x37
	if(__NFUN_173__(MultiAnimIndex, 0))
	{
		EnableParticleSystem(RightChargetJetParticleSystem);
		EnableParticleSystem(LeftChargetJetParticleSystem);
		EnableParticleSystem(RightFootParticleSystem);
		EnableParticleSystem(LeftFootParticleSystem);
	}
	return;
}

event NotifyMultiAnimStop()
{
	// End:0x43
	if(__NFUN_173__(MultiAnimIndex, 0))
	{
		FindAndStopSound('Sound_ChargeJet', 3);
		EndChargeParticleEffects();
		StandingCollisionHeight = default.CollisionHeight;
		SetCollisionInterpolationTarget(CollisionRadius, default.CollisionHeight, 0, 0.1);
	}
	return;
}

function EndChargeParticleEffects()
{
	DisableParticleSystem(RightChargetStartParticleSystem);
	DisableParticleSystem(LeftChargetStartParticleSystem);
	DisableParticleSystem(RightChargetJetParticleSystem);
	DisableParticleSystem(LeftChargetJetParticleSystem);
	DisableParticleSystem(RightFootParticleSystem);
	DisableParticleSystem(LeftFootParticleSystem);
	return;
}

function SetupChargeAttack()
{
	MultiAnimIndex = 0;
	MultiAnimParms[0].FaceTarget = false;
	ChargeGate = __NFUN_198__(Level.GameTimeSeconds, ChargeMinInterval);
	ChargeShouldKnockdown = true;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldForceCharge()
{
	// End:0x11
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		return 73;
	}
	// End:0x1F
	if(__NFUN_145__(ChargeEnabled))
	{
		return 1;
	}
	TargetInVerticleRange();
	// End:0x3D
	if(__NFUN_145__(PrimaryTarget.IsValidTarget()))
	{
		return 4;
	}
	// End:0x5A
	if(__NFUN_201__(ChargeMinDistance, PrimaryTarget.GetDist()))
	{
		return 18;
	}
	// End:0xBC
	if(bEnraged)
	{
		// End:0xB9
		if(__NFUN_200__(ChargeGate, Level.GameTimeSeconds))
		{
			ChargeGate = __NFUN_198__(Level.GameTimeSeconds, ChargeEnragedMinInterval);
			MultiAnimParms[0].FaceTarget = false;
			ChargeShouldKnockdown = true;
			MultiAnimIndex = 0;
			return 0;
		}
		return 60;
	}
	// End:0xF2
	if(__NFUN_150__(bForceCharge, __NFUN_200__(ChargeForceDistance, PrimaryTarget.GetDist())))
	{
		SetupChargeAttack();
		bForceCharge = false;
		return 0;
	}
	return 18;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldCharge()
{
	local Vector Extent;

	// End:0x11
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		return 73;
	}
	// End:0x1F
	if(__NFUN_145__(ChargeEnabled))
	{
		return 1;
	}
	// End:0x37
	if(__NFUN_145__(PrimaryTarget.IsValidTarget()))
	{
		return 4;
	}
	// End:0x54
	if(__NFUN_201__(ChargeMinDistance, PrimaryTarget.GetDist()))
	{
		return 18;
	}
	// End:0x70
	if(__NFUN_201__(ChargeGate, Level.GameTimeSeconds))
	{
		return 60;
	}
	// End:0xDC
	if(__NFUN_173__(CycloidStage, 3))
	{
		Extent = __NFUN_232__(__NFUN_195__(CollisionRadius, 0.6), __NFUN_195__(CollisionRadius, 0.6), 0);
		// End:0xDC
		if(__NFUN_145__(ClearShot(PrimaryTargetActor, Location, PrimaryTarget.GetAimPos(), 3, 0, ChargeDebug, Extent, true)))
		{
			return 27;
		}
	}
	SetupChargeAttack();
	return 0;
	return;
}

event KImpact(name SelfBoneName, KarmaActor Other, name OtherBoneName, Vector Position, Vector ImpactVelocity, Vector ImpactNormal)
{
	local Vector ImpulseLocation;
	local dnDecoration deco;
	local int i;
	local bool FrontalImpact;

	super.KImpact(SelfBoneName, Other, OtherBoneName, Position, ImpactVelocity, ImpactNormal);
	// End:0x3F0
	if(__NFUN_148__(__NFUN_173__(int(CurrentOp), int(95)), __NFUN_169__(MultiAnimMode, 2)))
	{
		// End:0x68
		if(__NFUN_203__(__NFUN_244__(__NFUN_253__(__NFUN_239__(Position, Location)), Vector(Rotation)), 0.4))
		{
			FrontalImpact = true;
		}
		// End:0xE8
		if(__NFUN_339__(Other, none))
		{
			// End:0xE5
			if(FrontalImpact)
			{
				// End:0xC5
				if(ChargeDebug)
				{
					BroadcastLog(__NFUN_302__(string(self), "- Hit BSP while charging."));
					__NFUN_672__(Position, NewColorBytes(255, 255, 0), 5);
				}
				ExitAIState(2, "Hit non physics object");
			}			
		}
		else
		{
			// End:0x1CB
			if(Other.bIsPlayerPawn)
			{
				// End:0x146
				if(ChargeDebug)
				{
					BroadcastLog(__NFUN_302__(string(self), "- Hit player while charging."));
					__NFUN_672__(Position, NewColorBytes(255, 255, 0), 5);
				}
				Other.TakeDamage(self, ChargeHitDamage, Position, __NFUN_253__(__NFUN_239__(Other.Location, Location)), class'MeleeDamage',, Location);
				// End:0x1B4
				if(__NFUN_148__(ChargeShouldKnockdown, Pawn(Other).DoKnockdown(Location)))
				{
					bForceRoar = true;
				}
				ExitAIState(2, "Hit Player");				
			}
			else
			{
				// End:0x287
				if(__NFUN_173__(int(Other.Physics), int(18)))
				{
					ImpulseLocation = __NFUN_238__(Other.Location, __NFUN_234__(__NFUN_253__(__NFUN_239__(Location, Other.Location)), __NFUN_225__(CollisionHeight, CollisionRadius)));
					Other.__NFUN_820__(__NFUN_238__(__NFUN_234__(ImpactNormal, ChargeImpulseMagnitude), __NFUN_232__(0, 0, ChargeImpulseLift)), ImpulseLocation);
					Other.__NFUN_821__(__NFUN_232__(__NFUN_226__(0, 1), __NFUN_226__(0, 1), __NFUN_226__(0, 1)));					
				}
				else
				{
					// End:0x2F9
					if(Other.bIsdnDecoration)
					{
						deco = dnDecoration(Other);
						// End:0x2F6
						if(__NFUN_150__(__NFUN_173__(int(deco.AIStompedInfo.StompType), int(1)), __NFUN_173__(int(deco.AIStompedInfo.StompType), int(2))))
						{
							deco.CriticalDamage();
						}						
					}
					else
					{
						// End:0x3F0
						if(FrontalImpact)
						{
							// End:0x38D
							if(ChargeDebug)
							{
								BroadcastLog(__NFUN_302__(__NFUN_302__(__NFUN_302__(string(self), "- Hit non physics object ("), string(Other)), ") while charging."));
								__NFUN_672__(Other.Location, NewColorBytes(0, 255, 255), 5);
								__NFUN_672__(Position, NewColorBytes(255, 255, 0), 5);
							}
							i = 0;
							J0x394:

							// End:0x3D0 [Loop If]
							if(__NFUN_169__(i, string(ChargeIgnoreActorList)))
							{
								// End:0x3C6
								if(__NFUN_341__(Other.Tag, ChargeIgnoreActorList[i]))
								{
									return;
								}
								__NFUN_184__(i);
								// [Loop Continue]
								goto J0x394;
							}
							ExitAIState(2, "Hit non physics object");
						}
					}
				}
			}
		}
	}
	return;
}

final function SetupShockwave()
{
	SetAnimPresets(2, 'Anim_Shockwave', false, -1, PrimaryTargetActor, __NFUN_232__(0, 0, 0), 0);
	return;
}

final function Vector GetShockwaveSpawnPos()
{
	local Vector SpawnPos, TraceStart, TraceEnd;
	local STraceFlags Flags;
	local STraceHitResult Result;
	local Actor HitActor;

	TraceStart = __NFUN_238__(Location, __NFUN_241__(__NFUN_232__(CollisionRadius, 0, 0), Rotation));
	TraceEnd = __NFUN_238__(TraceStart, __NFUN_232__(0, 0, __NFUN_195__(__NFUN_194__(CollisionHeight), 2)));
	Flags.bTraceActors = true;
	Flags.bMeshAccurate = false;
	Flags.bShotTrace = true;
	Flags.bTraceTexture = false;
	Flags.bIgnoreAITransparent = false;
	Flags.bKarmaOnly = false;
	Flags.bAntiMeqon = true;
	HitActor = __NFUN_736__(TraceStart, TraceEnd, Flags, Result);
	return __NFUN_238__(Result.Location, __NFUN_232__(0, 0, 32));
	return;
}

k2call simulated function Shockwave(optional EventInfo AnimEventInfo)
{
	local Cycloid_Shockwave Shockwave;
	local Cycloid_Shockwave_Sensor Sensor;
	local Vector SpawnPos, RightDir, BackDir;
	local Rotator SpawnRot;
	local int i;

	ShockwaveGate = __NFUN_198__(Level.GameTimeSeconds, ShockwaveMinInterval);
	__NFUN_568__();
	SpawnPos = GetShockwaveSpawnPos();
	SpawnRot = Rotation;
	// End:0x53
	if(__NFUN_339__(ShockwaveSpawnParticleSpawner, none))
	{
		ShockwaveSpawnParticleSpawner = FindFriendSpawner(ShockwaveSpawnParticleClass);
	}
	// End:0xA1
	if(__NFUN_340__(ShockwaveSpawnParticleSpawner, none))
	{
		ShockwaveSpawnParticleSpawner.__NFUN_645__(SpawnPos);
		ShockwaveSpawnParticleSpawner.__NFUN_652__(Rotator(__NFUN_232__(0, 0, 1)));
		ShockwaveSpawnParticleSpawner.ExecuteEffect(true);
	}
	FindSoundAndSpeak('Sound_Punch');
	__NFUN_181__(SpawnRot.Yaw, int(__NFUN_195__(__NFUN_196__(float(ShockwaveSpawnCount), 2), float(ShockwaveDeltaYaw))));
	class'Cycloid_Shockwave'.default.Speed = ShockwaveSpeed;
	class'Cycloid_Shockwave'.default.MaxSpeed = ShockwaveSpeed;
	i = 0;
	J0xFF:

	// End:0x229 [Loop If]
	if(__NFUN_169__(i, ShockwaveSpawnCount))
	{
		Shockwave = __NFUN_615__(class'Cycloid_Shockwave',,, SpawnPos, SpawnRot, false, true);
		// End:0x21F
		if(__NFUN_340__(Shockwave, none))
		{
			// End:0x14E
			if(__NFUN_401__())
			{
				Shockwave.bUnlit = false;
			}
			__NFUN_180__(SpawnRot.Yaw, ShockwaveDeltaYaw);
			Shockwave.__NFUN_591__(__NFUN_195__(Shockwave.DrawScale, ShockwaveScale));
			// End:0x21E
			foreach Shockwave.__NFUN_753__(class'Cycloid_Shockwave_Sensor', Sensor)
			{
				Sensor.DebugShockwave = ShockwaveDebug;
				Sensor.__NFUN_620__(__NFUN_195__(Sensor.CollisionRadius, ShockwaveScale), Sensor.CollisionHeight);
				Sensor.__NFUN_1124__(__NFUN_195__(Sensor.SphereSensorRadius, ShockwaveScale));
				Sensor.PawnDamage = ShockwaveDamage;				
			}			
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0xFF;
	}
	class'Cycloid_Shockwave'.default.Speed = default.ShockwaveSpeed;
	class'Cycloid_Shockwave'.default.MaxSpeed = default.ShockwaveSpeed;
	return;
}

function bool HasShockwaveLOS()
{
	local Vector Extent, Offset;

	// End:0x0E
	if(__NFUN_169__(CycloidStage, 3))
	{
		return true;
	}
	Extent = __NFUN_232__(20, 20, 20);
	Offset = __NFUN_232__(0, 0, 10);
	// End:0x7C
	if(__NFUN_145__(ClearShot(PrimaryTargetActor, Location, __NFUN_238__(PrimaryTargetActor.Location, Offset), 3, 0, ShockwaveDebug, Extent, true)))
	{
		return false;
	}
	return true;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldShockwave()
{
	// End:0x11
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		return 73;
	}
	// End:0x1F
	if(__NFUN_145__(ShockwaveEnabled))
	{
		return 1;
	}
	// End:0x2B
	if(TargetInVerticleRange())
	{
		return 20;
	}
	// End:0x47
	if(__NFUN_201__(ShockwaveGate, Level.GameTimeSeconds))
	{
		return 60;
	}
	// End:0x55
	if(__NFUN_145__(HasShockwaveLOS()))
	{
		return 27;
	}
	SetupShockwave();
	ShowPain = false;
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldMultiShockwave()
{
	// End:0x11
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		return 73;
	}
	// End:0x1F
	if(__NFUN_145__(ShockwaveMultiEnabled))
	{
		return 1;
	}
	// End:0x2B
	if(TargetInVerticleRange())
	{
		return 20;
	}
	// End:0x47
	if(__NFUN_201__(ShockwaveGate, Level.GameTimeSeconds))
	{
		return 60;
	}
	// End:0x55
	if(__NFUN_145__(HasShockwaveLOS()))
	{
		return 27;
	}
	MultiAnimIndex = 1;
	return 0;
	return;
}

event Engine.BaseAI.EAICode COND_ShouldGotoActionPoint()
{
	local Engine.BaseAI.EAICode Code;

	// End:0x1C
	if(__NFUN_200__(Level.GameTimeSeconds, ActionPointMoveGate))
	{
		return 60;
	}
	Code = super.COND_ShouldGotoActionPoint();
	// End:0x52
	if(__NFUN_173__(int(Code), int(0)))
	{
		ActionPointMoveGate = __NFUN_198__(Level.GameTimeSeconds, ActionPointMoveMinInterval);
	}
	return Code;
	return;
}

function Engine.BaseAI.EAICode COND_SetupPostChargeMove()
{
	local Engine.BaseAI.EAICode Code;

	Code = COND_ShouldGotoActionPoint();
	// End:0x49
	if(__NFUN_150__(__NFUN_173__(int(Code), int(0)), __NFUN_173__(int(Code), int(18))))
	{
		ActionPointMoveGate = __NFUN_198__(Level.GameTimeSeconds, ActionPointMoveMinInterval);
		return 0;
	}
	return Code;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldStandFire()
{
	// End:0x11
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		return 73;
	}
	// End:0x29
	if(__NFUN_145__(PrimaryTarget.IsValidTarget()))
	{
		return 4;
	}
	SetAnimPresets(2, 'Anim_Fire', true, -1, PrimaryTargetActor, PrimaryTargetActor.Location, 0);
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldStopSeekResumeFire()
{
	// End:0x0F
	if(__NFUN_339__(PrimaryTarget, none))
	{
		return 4;
	}
	// End:0x2C
	if(__NFUN_200__(PrimaryTarget.GetTimeVisible(), 1.5))
	{
		return 5;
	}
	return COND_ShouldStandFire();
	return;
}

final function SetupMortar()
{
	SetAnimPresets(3, 'Anim_MortarLaunch', false, -1, MortarTarget, EyeBeam.LastHitLocation, 0);
	MortarTarget.__NFUN_645__(EyeBeam.LastHitLocation, true);
	EyeBeam.DynamicBeamPoints = 0;
	EyeBeam.EmptyControlPoints();
	// End:0x97
	if(__NFUN_340__(EyeBeamAquiredTarget, none))
	{
		EyeBeam.AddSegmentActor(EyeBeam, EyeBeamAquiredTarget);		
	}
	else
	{
		EyeBeam.AddSegmentActor(EyeBeam, MortarTarget);
	}
	EyeBeam.ActivateBeam();
	FindAndStopSound('Sound_Scan', 3);
	EyeBeamSearching = false;
	return;
}

final function SetupMortarSearch()
{
	SetAnimPresets(2, 'Anim_Search', false, __NFUN_198__(MortarSearchTime, __NFUN_195__(__NFUN_222__(), MortarSearchTimeRnd)), PrimaryTargetActor, PrimaryTargetActor.Location, 0);
	MortarTarget.__NFUN_645__(__NFUN_239__(PrimaryTargetActor.Location, __NFUN_232__(0, 0, PrimaryTargetActor.CollisionHeight)), true);
	EyeBeam.DynamicBeamPoints = EyeBeam.default.DynamicBeamPoints;
	EyeBeam.EmptyControlPoints();
	EyeBeam.AddSegmentActorAndLoc(EyeBeam, MortarTarget.Location);
	EyeBeam.ActivateBeam();
	FindSoundAndSpeak('Sound_Scan');
	EyeBeamSearching = true;
	EyeBeamAquiredTarget = none;
	return;
}

k2call simulated function ExtendMortar(optional EventInfo AnimEventInfo)
{
	MortarLauncher.Extend();
	return;
}

k2call simulated function LaunchMortar(optional EventInfo AnimEventInfo)
{
	local dnGrenade_Cycloid_Mortar Mortar;
	local Vector SpawnLocation;
	local Rotator SpawnRotation;

	MortarLauncher.GetSpawnLocationRoation(SpawnLocation, SpawnRotation);
	Mortar = __NFUN_615__(class'dnGrenade_Cycloid_Mortar', self,, SpawnLocation, SpawnRotation);
	Mortar.MortarDamage = MortarDamage;
	Mortar.MortarDamageRadius = MortarDamageRadius;
	MortarGate = __NFUN_198__(Level.GameTimeSeconds, MortarMinInterval);
	// End:0xBF
	if(__NFUN_340__(Mortar, none))
	{
		// End:0xAA
		if(__NFUN_340__(EyeBeamAquiredTarget, none))
		{
			Mortar.ForceTarget(EyeBeamAquiredTarget);			
		}
		else
		{
			Mortar.ForceTarget(MortarTarget);
		}
	}
	return;
}

k2call simulated function ContractMortar(optional EventInfo AnimEventInfo)
{
	MortarLauncher.Contract();
	return;
}

k2call simulated function EndEyeBeam(optional EventInfo AnimEventInfo)
{
	FindAndStopSound('Sound_Scan', 3);
	EyeBeam.DeactivateBeam();
	EyeBeamSearching = false;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldMortar()
{
	// End:0x11
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		return 73;
	}
	// End:0x1F
	if(__NFUN_145__(MortarEnabled))
	{
		return 1;
	}
	// End:0x3B
	if(__NFUN_200__(MortarGate, Level.GameTimeSeconds))
	{
		return 0;
	}
	return 60;
	return;
}

function Engine.BaseAI.EAICode COND_SetupMortar()
{
	SetupMortar();
	return;
}

function Engine.BaseAI.EAICode COND_SetupSearch()
{
	SetupMortarSearch();
	return;
}

function NotifyEyeHitPawn(Actor HitActor)
{
	// End:0x1C
	if(EyeBeamSearching)
	{
		EyeBeamAquiredTarget = HitActor;
		EndOp(2);
	}
	return;
}

function NotifyEyeHit(Vector HitLocation)
{
	// End:0x3D
	if(__NFUN_340__(EyeBeamAquiredTarget, none))
	{
		EyeBeamAquiredTarget = none;
		EyeBeam.EmptyControlPoints();
		EyeBeam.AddSegmentActorAndLoc(EyeBeam, HitLocation);
	}
	return;
}

final function SetupBeamAttack()
{
	SetAnimPresets(2, 'Anim_BeamAttack', false, -1, PrimaryTargetActor, __NFUN_232__(0, 0, 0), 0);
	return;
}

k2call simulated function beamattackwarmup(optional EventInfo AnimEventInfo)
{
	EnableParticleSystem(LeftHandChargeParticleSystem);
	EnableParticleSystem(RightHandChargeParticleSystem);
	return;
}

k2call simulated function beamattackstart(optional EventInfo AnimEventInfo)
{
	ActivateBeams();
	return;
}

k2call simulated function beamattackstop(optional EventInfo AnimEventInfo)
{
	DisableParticleSystem(LeftHandChargeParticleSystem);
	DisableParticleSystem(RightHandChargeParticleSystem);
	DeactivateBeams();
	return;
}

final function DeactivateBeams()
{
	LeftHandBeam.DeactivateBeam();
	RightHandBeam.DeactivateBeam();
	return;
}

final function ActivateBeams()
{
	LeftHandBeam.ActivateBeam();
	RightHandBeam.ActivateBeam();
	return;
}

final function Engine.BaseAI.EAICode COND_ShouldAttackBeam()
{
	// End:0x11
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		return 73;
	}
	// End:0x1F
	if(__NFUN_145__(BeamAttackEnabled))
	{
		return 1;
	}
	// End:0x5D
	if(__NFUN_200__(BeamAttackGate, Level.GameTimeSeconds))
	{
		BeamAttackGate = __NFUN_198__(Level.GameTimeSeconds, BeamAttackMinInterval);
		SetupBeamAttack();
		return 0;
	}
	return 60;
	return;
}

final function SetupDoubleFistSmash()
{
	SetAnimPresets(2, 'Anim_DoubleFistSmash', false, -1, PrimaryTargetActor, __NFUN_232__(0, 0, 0), 0);
	return;
}

function Engine.BaseAI.EAICode COND_ShouldRoar()
{
	// End:0x11
	if(__NFUN_173__(int(CurrentOp), int(23)))
	{
		return 45;
	}
	// End:0x25
	if(bForceRoar)
	{
		bForceRoar = false;
		return 0;
	}
	return 1;
	return;
}

function AnimEnd_Roar()
{
	bNoDamage = false;
	return;
}

function Anim_Landing(int Type)
{
	super.Anim_Landing(Type);
	return;
}

function Anim_MoveTo(Engine.BaseAI.EAIMoveSpeed MoveSpeed)
{
	// End:0x1C
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		PlayAnim('Anim_Walk');		
	}
	else
	{
		PlayAnim('Anim_WalkFire');
	}
	return;
}

function Anim_MoveTo_BackUp(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
	// End:0x1C
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		PlayAnim('Anim_WalkBackwards');		
	}
	else
	{
		PlayAnim('Anim_WalkBackwardsFire');
	}
	return;
}

function Anim_MoveTo_StrafeLeft(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
	// End:0x1C
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		PlayAnim('Anim_StrafeLeft');		
	}
	else
	{
		PlayAnim('Anim_StrafeFireLeft');
	}
	return;
}

function Anim_MoveTo_StrafeRight(Engine.BaseAI.EAIMoveSpeed eMoveSpeed)
{
	// End:0x1C
	if(__NFUN_173__(int(AttackConstraint), int(1)))
	{
		PlayAnim('Anim_StrafeRight');		
	}
	else
	{
		PlayAnim('Anim_StrafeFireRight');
	}
	return;
}

function bool ShouldBoneAim(out SCycloidBoneAimInfo Info)
{
	local int j;

	j = __NFUN_166__(string(Info.EnabledOps), 1);
	J0x14:

	// End:0x47 [Loop If]
	if(__NFUN_172__(j, 0))
	{
		// End:0x3D
		if(__NFUN_173__(int(CurrentOp), int(Info.EnabledOps[j])))
		{
			return true;
		}
		__NFUN_185__(j);
		// [Loop Continue]
		goto J0x14;
	}
	return false;
	return true;
	return;
}

function UpdateBoneAimers(float Secs)
{
	local int i, j;
	local Vector BonePos;
	local Rotator BoneRot;
	local SCycloidBoneAimInfo Info;

	// End:0x74
	if(PrimaryTarget.IsValidTarget())
	{
		__NFUN_568__();
		i = __NFUN_166__(string(BoneAimInfo), 1);
		J0x25:

		// End:0x74 [Loop If]
		if(__NFUN_172__(i, 0))
		{
			Info = BoneAimInfo[i];
			// End:0x6A
			if(ShouldBoneAim(Info))
			{
				DoBoneAim(Info, PrimaryTarget.GetAimPos());
			}
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x25;
		}
	}
	return;
}

function DoBoneAim(out SCycloidBoneAimInfo BoneInfo, Vector TargetPos)
{
	__NFUN_568__();
	MeshInstance.__NFUN_531__(BoneInfo.BoneName, BoneInfo.BoneDir, TargetPos);
	// End:0x50
	if(__NFUN_150__(__NFUN_173__(1, 1), BoneInfo.bDebug))
	{
		DebugDrawBone(BoneInfo.BoneName);
	}
	return;
}

k2call simulated function WeaponFire(optional EventInfo AnimEventInfo)
{
	WeaponIndex = 0;
	WeaponInfo[WeaponIndex].MuzzleIndex = 0;
	DoubleFire = false;
	ShouldFire = true;
	return;
}

k2call simulated function WeaponFireBoth(optional EventInfo AnimEventInfo)
{
	WeaponIndex = 0;
	WeaponInfo[WeaponIndex].MuzzleIndex = 0;
	DoubleFire = true;
	ShouldFire = true;
	return;
}

k2call simulated function WeaponFireLeft(optional EventInfo AnimEventInfo)
{
	WeaponIndex = 0;
	WeaponInfo[WeaponIndex].MuzzleIndex = 1;
	DoubleFire = false;
	ShouldFire = true;
	return;
}

k2call simulated function WeaponFireRight(optional EventInfo AnimEventInfo)
{
	WeaponIndex = 0;
	WeaponInfo[WeaponIndex].MuzzleIndex = 0;
	DoubleFire = false;
	ShouldFire = true;
	return;
}

k2call simulated function WeaponFireSecondaryRight(optional EventInfo AnimEventInfo)
{
	WeaponIndex = 1;
	WeaponInfo[WeaponIndex].MuzzleIndex = 0;
	DoubleFire = false;
	ShouldFire = true;
	return;
}

k2call simulated function WeaponFireSecondaryLeft(optional EventInfo AnimEventInfo)
{
	WeaponIndex = 1;
	WeaponInfo[WeaponIndex].MuzzleIndex = 1;
	DoubleFire = false;
	ShouldFire = true;
	return;
}

event FireWeapon()
{
	local int i;

	i = 0;
	J0x07:

	// End:0x4E [Loop If]
	if(__NFUN_169__(i, WeaponInfo[WeaponIndex].ProjectilesPerFire))
	{
		// End:0x3E
		if(WeaponInfo[WeaponIndex].FireLikeGrenade)
		{
			FireGrenadeWeapon();
			// [Explicit Continue]
			goto J0x44;
		}
		FireRocketWeapon();
		J0x44:

		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	NotifyFired();
	FindSoundAndSpeak(WeaponInfo[WeaponIndex].SoundName);
	__NFUN_184__(WeaponInfo[WeaponIndex].MuzzleIndex);
	// End:0xB4
	if(__NFUN_172__(WeaponInfo[WeaponIndex].MuzzleIndex, string(WeaponInfo[WeaponIndex].MuzzleNames)))
	{
		WeaponInfo[WeaponIndex].MuzzleIndex = 0;
	}
	// End:0xCB
	if(DoubleFire)
	{
		DoubleFire = false;
		FireWeapon();
	}
	return;
}

function FireGrenadeWeapon()
{
	local dnRocket_Cycloid Projectile;
	local Vector ProjVelocity, TargetPos, SpawnPos;
	local float Height;

	__NFUN_568__();
	SpawnPos = MeshInstance.__NFUN_533__(WeaponInfo[WeaponIndex].MuzzleNames[WeaponInfo[WeaponIndex].MuzzleIndex], true, false);
	Projectile = dnRocket_Cycloid(__NFUN_615__(WeaponInfo[WeaponIndex].ProjectileClass,,, SpawnPos, Rotation));
	Height = __NFUN_198__(100, __NFUN_195__(__NFUN_222__(), 300));
	// End:0xAF
	if(__NFUN_145__(PrimaryTarget.IsValidTarget()))
	{
		ProjVelocity = __NFUN_241__(__NFUN_232__(800, 0, 300), Rotation);		
	}
	else
	{
		TargetPos = PrimaryTarget.GetPos();
		// End:0xEC
		if(__NFUN_340__(PrimaryTargetActor, none))
		{
			__NFUN_209__(TargetPos.Z, PrimaryTargetActor.CollisionHeight);
		}
		// End:0x15C
		if(__NFUN_145__(CalcProjectileVelocity(Projectile, Projectile.Physics, PrimaryTargetActor, TargetPos, 50, 100, Height, false, 800, true, 3, 0, true, ProjVelocity, DebugPipeBombs)))
		{
			ProjVelocity = __NFUN_241__(__NFUN_232__(800, 0, 300), Rotation);
		}
		Projectile.__NFUN_790__(ProjVelocity);
	}
	Projectile.SetDrunkTarget(PrimaryTargetActor);
	return;
}

function FireRocketWeapon()
{
	local dnRocket_Cycloid Proj;

	// End:0x123
	if(__NFUN_340__(WeaponInfo[WeaponIndex].ProjectileClass, none))
	{
		WeaponInfo[WeaponIndex].ProjectileClass.default.Speed = RocketSpeed;
		WeaponInfo[WeaponIndex].ProjectileClass.default.Damage = RocketDamage;
		WeaponInfo[WeaponIndex].ProjectileClass.default.DamageRadius = RocketDamageRadius;
		Proj = dnRocket_Cycloid(FireProjectile(WeaponInfo[WeaponIndex].MuzzleNames[WeaponInfo[WeaponIndex].MuzzleIndex], WeaponInfo[WeaponIndex].ProjectileClass, __NFUN_195__(__NFUN_222__(), RocketSpread), false));
		WeaponInfo[WeaponIndex].ProjectileClass.default.Speed = default.RocketSpeed;
		WeaponInfo[WeaponIndex].ProjectileClass.default.Damage = default.RocketDamage;
		WeaponInfo[WeaponIndex].ProjectileClass.default.DamageRadius = default.RocketDamageRadius;
	}
	return;
}

k2call simulated function FootStep(optional EventInfo AnimEventInfo)
{
	super(Pawn).FootStep(AnimEventInfo);
	// End:0x47
	if(__NFUN_148__(__NFUN_340__(PrimaryTargetActor, none), PrimaryTargetActor.bIsPlayerPawn))
	{
		Pawn(PrimaryTargetActor).ShakeView(PlayerShrunkFootstepViewShake, false);
	}
	return;
}

function bool GetCurrentWeapon(out class<Weapon> OutWeaponClass, out int OutLoadedAmmo, out int OutTotalAmmo)
{
	OutWeaponClass = class'IntegratedWeapon';
	OutLoadedAmmo = 99;
	OutTotalAmmo = 99;
	return true;
	return;
}

function Weapon GetWeapon()
{
	return none;
	return;
}

event name AIActor_Weapon_GetName()
{
	return 'CycloidGun';
	return;
}

event bool AIActor_Weapon_Fire()
{
	return true;
	return;
}

event bool AIActor_Weapon_Reload()
{
	return true;
	return;
}

function bool AIActor_Weapon_GiveAmmo()
{
	return true;
	return;
}

function AIActor_Weapon_Holster(RenderActor MyWeapon)
{
	return;
}

event bool AIMustCheckActionUsable()
{
	return false;
	return;
}

event float CalculateGroundConstraintStrengthScalar()
{
	return 10000;
	return;
}

function ClearAllEffects()
{
	beamattackstop();
	EndChargeParticleEffects();
	EyeBeam.DeactivateBeam();
	FindAndStopSound('Sound_Scan', 3);
	FindAndStopSound('Sound_ChargeJet', 3);
	EyeBeamSearching = false;
	return;
}

final function SetNewHealth(float NewHealth)
{
	SetHealthCap(NewHealth);
	__NFUN_832__(NewHealth);
	return;
}

k2call simulated function FailDamage(optional EventInfo AnimEventInfo)
{
	// End:0x87
	if(__NFUN_148__(__NFUN_340__(ControlXParms.MyControl, none), __NFUN_340__(ControlXParms.MyControl.User, none)))
	{
		ControlXParms.MyControl.User.TakeDamage(self, StrengthTapFailDamage, Location, __NFUN_253__(__NFUN_239__(ControlXParms.MyControl.User.Location, Location)), class'MeleeDamage_NoRumble');		
	}
	else
	{
		BroadcastLog(__NFUN_302__(__NFUN_303__(__NFUN_302__(__NFUN_303__("Warning: Cycloid unable to damage attached user.", "ControlXParms.MyControl="), string(ControlXParms.MyControl)), "ControlXParms.MyControl.User="), string(ControlXParms.MyControl.User)));
	}
	return;
}

function bool TargetInVerticleRange()
{
	local float DeltaZ;

	// End:0x25
	if(__NFUN_150__(__NFUN_145__(PrimaryTarget.IsValidTarget()), __NFUN_339__(PrimaryTargetActor, none)))
	{
		return false;
	}
	DeltaZ = __NFUN_199__(__NFUN_199__(PrimaryTargetActor.Location.Z, PrimaryTargetActor.CollisionHeight), __NFUN_199__(Location.Z, CollisionHeight));
	// End:0x74
	if(__NFUN_200__(SafeHeight, DeltaZ))
	{
		return true;
	}
	return;
}

event NotifyOpStarted(Engine.BaseAI.EAIOp NewOp, Engine.BaseAI.EAIOp OldOp)
{
	super.NotifyOpStarted(NewOp, OldOp);
	// End:0x97
	if(__NFUN_173__(int(NewOp), int(23)))
	{
		MortarLauncher.Contract();
		EndEyeBeam();
		FindAndStopSound('Sound_HandSpin', 3);
		ClearAllEffects();
		SetAnimSync(1, 1, 1, 2, 2);
		bNoDamage = true;
		bForcePhysicsCutScene = true;
		bIgnoreAimAssist = true;
		SetCollisionInterpolationTarget(310, default.CollisionHeight, 0, 2);
		GlobalTrigger(FallDownEvent);		
	}
	else
	{
		// End:0xC8
		if(__NFUN_173__(int(NewOp), int(95)))
		{
			ShowPain = false;
			SetAnimSync(2, 2, 2, 2, 2);
			CurrentOpMustFinish = true;			
		}
		else
		{
			// End:0xE1
			if(__NFUN_173__(int(NewOp), int(6)))
			{
				CurrentOpMustFinish = true;				
			}
			else
			{
				// End:0xFA
				if(__NFUN_173__(int(NewOp), int(135)))
				{
					FindSoundAndSpeak('Sound_StompRoar');
				}
			}
		}
	}
	return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
	super.NotifyOpEnded(Op, Status);
	// End:0x31
	if(__NFUN_173__(int(Op), int(6)))
	{
		ShowPain = default.ShowPain;
		EndEyeBeam();
	}
	// End:0x71
	if(__NFUN_173__(int(Op), int(95)))
	{
		ShowPain = default.ShowPain;
		ChargeGate = __NFUN_198__(Level.GameTimeSeconds, ChargeMinInterval);
		EndChargeParticleEffects();		
	}
	else
	{
		// End:0xBB
		if(__NFUN_173__(int(Op), int(23)))
		{
			bNoDamage = false;
			bForcePhysicsCutScene = default.bForcePhysicsCutScene;
			bIgnoreAimAssist = default.bIgnoreAimAssist;
			SetCollisionInterpolationTarget(default.CollisionRadius, default.CollisionHeight, default.MaxStepHeightEx, 0.5);
		}
	}
	return;
}

k2call simulated function DisableFinishMoveRagDollCollision()
{
	SetCollisionInterpolationTarget(50, default.CollisionHeight, 0, 0);
	SetCollisionInterpolationTarget(default.CollisionRadius, default.CollisionHeight, 0, 3);
	super.DisableFinishMoveRagDollCollision();
	return;
}

simulated function bool ShouldUpdateShrinkScale()
{
	// End:0x10
	if(__NFUN_173__(int(CurrentOp), int(23)))
	{
		return true;
	}
	return super(Pawn).ShouldUpdateShrinkScale();
	return;
}

function bool ShouldUseDieOp(class<DamageType> DamageType)
{
	// End:0x4F
	if(__NFUN_148__(__NFUN_169__(CycloidStage, 4), __NFUN_145__(__NFUN_150__(__NFUN_150__(__NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleA'), __NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleB')), __NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleC')))))
	{
		FinishMeControlType = class'dnControl_Cycloid_BattleC';
	}
	return __NFUN_340__(FinishMeControlType, none);
	return;
}

function EndControlX_UserFailed()
{
	return;
}

function EndControlX_UserSuccess()
{
	return;
}

function EndControlX_Recovered()
{
	GlobalTrigger(GetUpEvent);
	return;
}

simulated function SpawnCorpse()
{
	super.SpawnCorpse();
	// End:0x21
	if(__NFUN_340__(MyCorpse, none))
	{
		MyCorpse.__NFUN_642__(0);
	}
	return;
}

k2call simulated function RightArmSteamEnable(optional EventInfo AnimEventInfo)
{
	local int i;

	// End:0x41
	if(__NFUN_170__(string(RightArmSteamParticles), 0))
	{
		i = 0;
		J0x13:

		// End:0x3E [Loop If]
		if(__NFUN_169__(i, string(RightArmSteamParticles)))
		{
			EnableParticleSystem(RightArmSteamParticles[i]);
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x13;
		}		
	}
	else
	{
		i = RightArmSteamParticles.Add(string(RightArmSteamPrefabs));
		i = 0;
		J0x5A:

		// End:0x93 [Loop If]
		if(__NFUN_169__(i, string(RightArmSteamPrefabs)))
		{
			RightArmSteamParticles[i] = SoftParticleSystem(__NFUN_837__(RightArmSteamPrefabs[i]));
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x5A;
		}
	}
	return;
}

k2call simulated function RightArmSteamDisable(optional EventInfo AnimEventInfo)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x32 [Loop If]
	if(__NFUN_169__(i, string(RightArmSteamParticles)))
	{
		DisableParticleSystem(RightArmSteamParticles[i]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

k2call simulated function RightArmDamaged(optional EventInfo AnimEventInfo)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x2F [Loop If]
	if(__NFUN_169__(i, string(RightArmDamagedPrefabs)))
	{
		__NFUN_837__(RightArmDamagedPrefabs[i]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	MistSplatter();
	__NFUN_607__(0.1, false, 'MistSplatter');
	return;
}

k2call simulated function LeftArmSteamEnable(optional EventInfo AnimEventInfo)
{
	local int i;

	// End:0x41
	if(__NFUN_170__(string(LeftArmSteamParticles), 0))
	{
		i = 0;
		J0x13:

		// End:0x3E [Loop If]
		if(__NFUN_169__(i, string(LeftArmSteamParticles)))
		{
			EnableParticleSystem(LeftArmSteamParticles[i]);
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x13;
		}		
	}
	else
	{
		i = LeftArmSteamParticles.Add(string(LeftArmSteamPrefabs));
		i = 0;
		J0x5A:

		// End:0x93 [Loop If]
		if(__NFUN_169__(i, string(LeftArmSteamPrefabs)))
		{
			LeftArmSteamParticles[i] = SoftParticleSystem(__NFUN_837__(LeftArmSteamPrefabs[i]));
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x5A;
		}
	}
	return;
}

k2call simulated function LeftArmSteamDisable(optional EventInfo AnimEventInfo)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x32 [Loop If]
	if(__NFUN_169__(i, string(LeftArmSteamParticles)))
	{
		DisableParticleSystem(LeftArmSteamParticles[i]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

k2call simulated function LeftArmDamaged(optional EventInfo AnimEventInfo)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x2F [Loop If]
	if(__NFUN_169__(i, string(LeftArmDamagedPrefabs)))
	{
		__NFUN_837__(LeftArmDamagedPrefabs[i]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	MistSplatter();
	__NFUN_607__(0.1, false, 'MistSplatter');
	return;
}

k2call simulated function BackSteamEnable(optional EventInfo AnimEventInfo)
{
	local int i;

	// End:0x41
	if(__NFUN_170__(string(BackSteamParticles), 0))
	{
		i = 0;
		J0x13:

		// End:0x3E [Loop If]
		if(__NFUN_169__(i, string(BackSteamParticles)))
		{
			EnableParticleSystem(BackSteamParticles[i]);
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x13;
		}		
	}
	else
	{
		i = BackSteamParticles.Add(string(BackSteamPrefabs));
		i = 0;
		J0x5A:

		// End:0x93 [Loop If]
		if(__NFUN_169__(i, string(BackSteamPrefabs)))
		{
			BackSteamParticles[i] = SoftParticleSystem(__NFUN_837__(BackSteamPrefabs[i]));
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x5A;
		}
	}
	return;
}

k2call simulated function BackSteamDisable(optional EventInfo AnimEventInfo)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x32 [Loop If]
	if(__NFUN_169__(i, string(BackSteamParticles)))
	{
		DisableParticleSystem(BackSteamParticles[i]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

k2call simulated function BackDamaged(optional EventInfo AnimEventInfo)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x2F [Loop If]
	if(__NFUN_169__(i, string(BackDamagedPrefabs)))
	{
		__NFUN_837__(BackDamagedPrefabs[i]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	GlobalTrigger(BackDamagedEvent);
	return;
}

k2call simulated function EyeballSplat(optional EventInfo AnimEventInfo)
{
	local Vector BoneLoc;

	// End:0x31
	if(__NFUN_340__(__NFUN_568__(), none))
	{
		__NFUN_615__(class'dnExitWound_Human', self,, MeshInstance.__NFUN_533__('eyeball', true), __NFUN_265__(-16384, 0, 0));
	}
	return;
}

k2call simulated function StartPrePivotHack(optional EventInfo AnimEventInfo)
{
	bPrePivotHack = true;
	return;
}

k2call simulated function EndPrePivotHack(optional EventInfo AnimEventInfo)
{
	bPrePivotHack = false;
	return;
}

event Tick(float DeltaSeconds)
{
	local Vector NewPrePivot, NewPostPivot;

	super(Actor).Tick(DeltaSeconds);
	NewPrePivot = PrePivot;
	// End:0x3A
	if(bPrePivotHack)
	{
		__NFUN_209__(NewPrePivot.X, __NFUN_195__(90, DeltaSeconds));		
	}
	else
	{
		__NFUN_210__(NewPrePivot.X, __NFUN_195__(90, DeltaSeconds));
	}
	NewPrePivot.X = __NFUN_227__(NewPrePivot.X, 0, 90);
	__NFUN_597__(NewPrePivot);
	// End:0x131
	if(__NFUN_148__(__NFUN_173__(int(CurrentOp), int(23)), __NFUN_206__(PostPivot.Z, 0)))
	{
		NewPostPivot = PostPivot;
		// End:0xEB
		if(__NFUN_201__(NewPostPivot.Z, 0))
		{
			NewPostPivot.Z = __NFUN_225__(0, __NFUN_199__(NewPostPivot.Z, __NFUN_195__(32, DeltaSeconds)));			
		}
		else
		{
			// End:0x129
			if(__NFUN_200__(NewPostPivot.Z, 0))
			{
				NewPostPivot.Z = __NFUN_224__(0, __NFUN_198__(NewPostPivot.Z, __NFUN_195__(32, DeltaSeconds)));
			}
		}
		__NFUN_598__(NewPostPivot);
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	local int i;

	super(Pawn).RegisterPrecacheComponents(PrecacheIndex);
	// End:0x4B4
	if(__NFUN_150__(__NFUN_310__(PrecacheIndex.MapName, "Map00"), __NFUN_310__(PrecacheIndex.MapName, "Map22")))
	{
		// End:0x87
		if(bForMap00)
		{
			PrecacheIndex.__NFUN_1266__(class'dnControl_CycloidHumiliation_FieldGoal');
			PrecacheIndex.__NFUN_1266__(class'dnScreenSplatter_Blood_Boss');
			PrecacheIndex.__NFUN_1266__(class'GibBlood');			
		}
		else
		{
			i = __NFUN_166__(string(RightArmSteamPrefabs), 1);
			J0x96:

			// End:0xC3 [Loop If]
			if(__NFUN_172__(i, 0))
			{
				PrecacheIndex.__NFUN_1268__(RightArmSteamPrefabs[i]);
				__NFUN_185__(i);
				// [Loop Continue]
				goto J0x96;
			}
			i = __NFUN_166__(string(RightArmDamagedPrefabs), 1);
			J0xD2:

			// End:0xFF [Loop If]
			if(__NFUN_172__(i, 0))
			{
				PrecacheIndex.__NFUN_1268__(RightArmDamagedPrefabs[i]);
				__NFUN_185__(i);
				// [Loop Continue]
				goto J0xD2;
			}
			i = __NFUN_166__(string(LeftArmSteamPrefabs), 1);
			J0x10E:

			// End:0x13B [Loop If]
			if(__NFUN_172__(i, 0))
			{
				PrecacheIndex.__NFUN_1268__(LeftArmSteamPrefabs[i]);
				__NFUN_185__(i);
				// [Loop Continue]
				goto J0x10E;
			}
			i = __NFUN_166__(string(LeftArmDamagedPrefabs), 1);
			J0x14A:

			// End:0x177 [Loop If]
			if(__NFUN_172__(i, 0))
			{
				PrecacheIndex.__NFUN_1268__(LeftArmDamagedPrefabs[i]);
				__NFUN_185__(i);
				// [Loop Continue]
				goto J0x14A;
			}
			PrecacheIndex.__NFUN_1266__(class'dnGrenade_Cycloid_Mortar');
			PrecacheIndex.__NFUN_1266__(class'Cycloid_Mortar_Target');
			PrecacheIndex.__NFUN_1266__(class'dnControl_Cycloid_BattleA');
			PrecacheIndex.__NFUN_1266__(class'dnControl_Cycloid_BattleB');
			PrecacheIndex.__NFUN_1266__(class'dnControl_CycloidHumiliation_EyeUrinal');
			PrecacheIndex.__NFUN_1283__('Anim_ShockwaveStart0', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Anim_ShockwaveLoop0', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Anim_ShockwaveStop0', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Anim_MortarLaunch', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Anim_Search', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Anim_BeamAttack', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Cycloid_BattleA_DropToKnees', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Cycloid_BattleA_KneesIdle', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Cycloid_BattleA_Recover', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Cycloid_BattleB_DropToKnees', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Cycloid_BattleB_KneesIdle', class'acCycloid_Combat', Mesh);
			PrecacheIndex.__NFUN_1283__('Cycloid_BattleB_Recover', class'acCycloid_Combat', Mesh);
		}
		i = __NFUN_166__(string(WeaponInfo), 1);
		J0x330:

		// End:0x384 [Loop If]
		if(__NFUN_172__(i, 0))
		{
			PrecacheIndex.__NFUN_1266__(WeaponInfo[i].ProjectileClass);
			PrecacheIndex.__NFUN_1277__(VoicePack, WeaponInfo[i].SoundName);
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x330;
		}
		i = __NFUN_166__(string(BackSteamPrefabs), 1);
		J0x393:

		// End:0x3C0 [Loop If]
		if(__NFUN_172__(i, 0))
		{
			PrecacheIndex.__NFUN_1268__(BackSteamPrefabs[i]);
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x393;
		}
		i = __NFUN_166__(string(BackDamagedPrefabs), 1);
		J0x3CF:

		// End:0x3FC [Loop If]
		if(__NFUN_172__(i, 0))
		{
			PrecacheIndex.__NFUN_1268__(BackDamagedPrefabs[i]);
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x3CF;
		}
		PrecacheIndex.__NFUN_1266__(class'dnExitWound_Human');
		PrecacheIndex.__NFUN_1266__(class'dnHUDEffect_Mist');
		PrecacheIndex.__NFUN_1266__(class'dnControl_Cycloid_BattleC');
		PrecacheIndex.__NFUN_1283__('Cycloid_BattleC_DropToKnees', class'acCycloid_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__('Cycloid_BattleC_KneesIdle', class'acCycloid_Combat', Mesh);
		PrecacheIndex.__NFUN_1283__('Cycloid_BattleC_Recover', class'acCycloid_Combat', Mesh);
		PrecacheIndex.__NFUN_1282__(class'acCycloid_Combat', Mesh);
		PrecacheIndex.__NFUN_1282__(class'acCycloidCorpse', Mesh);
	}
	PrecacheIndex.__NFUN_1266__(class'dnScreenSplatter_Blood');
	PrecacheIndex.__NFUN_1266__(class'dnScreenSplatter_Mist_Boss');
	PrecacheIndex.__NFUN_1266__(class'dnHUDEffect_Mist');
	PrecacheIndex.__NFUN_1266__(class'dnControl_PlayerKnockdown');
	PrecacheIndex.__NFUN_1266__(class'Cycloid_Shockwave');
	PrecacheIndex.__NFUN_1266__(ShockwaveSpawnParticleClass);
	PrecacheIndex.__NFUN_1266__(class'BulletImpact_Dust_Spawner');
	PrecacheIndex.__NFUN_1266__(class'StompImpact_Large_Brown_Spawner');
	PrecacheIndex.__NFUN_1283__('Anim_Idle', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Fire', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Pain', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Roar', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Walk', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_WalkBackwards', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_WalkFire', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_WalkBackwardsFire', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StrafeLeft', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StrafeRight', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StrafeFireLeft', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StrafeFireRight', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Shockwave', class'acCycloid_Combat', Mesh);
	// End:0x6DC
	if(__NFUN_342__(DoubleFistSmashTag, 'None'))
	{
		PrecacheIndex.__NFUN_1283__('Anim_DoubleFistSmash', class'acCycloid_Combat', Mesh);
	}
	PrecacheIndex.__NFUN_1283__('Anim_ChargeStart0', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ChargeLoop0', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ChargeStop0', class'acCycloid_Combat', Mesh);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_ChargeJet');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_FallDown');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_FallRustle');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_HandSpin');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Punch');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_PunchRoar');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Roar');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_StompRoar');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_EyeBounce');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_EyePop');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_FailThrow_Yell');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_FailYell_01');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_GrabDuke');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_Hose_Rip');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_Pincer');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_ServoFail');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_ServoPain');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_ServoSpasm');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_TossWhoosh');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Falling_Flail');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Jump');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'KnockDown_BodySlam');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'KnockDown_VOC');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'LadderClimb_Rustle');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Rage_VOC');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'SCR_Getup_GloveFlex');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_BodyStep');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Hand');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Pat_01');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Pat_02');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Scuff');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_StandShift');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'STR_BodySlide_Single');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Veh_HandPat');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Veh_SteerGrab');
	// End:0xB1B
	if(__NFUN_145__(bForMap00))
	{
		PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Scan');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_FailYell_02');
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'KnuckleCrack_01');
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'KnuckleCrack_02');
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'KnuckleCrack_03');
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_FootScrape');
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Stomp');
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Zipper');		
	}
	else
	{
		PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_EyeKickImpact');
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_StandShift');
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Stomp');
	}
	return;
}

event EnumerateUsableAnimationControllers(PrecacheIndex PrecacheIndex, out array<Engine.BaseAI.EAIAnimController> UsableControllers)
{
	UsableControllers[string(UsableControllers)] = 1;
	return;
}

state GotoX
{
	event float CalculateGroundConstraintStrengthScalar()
	{
		return 10000;
		return;
	}
	stop;
}

state ControlX
{
	event BeginState()
	{
		super.BeginState();
		ShrunkUseStyle = 1;
		DisablePhysics = false;
		bDoOverlayEffect = true;
		FadeOverlayEffect(0, 0);
		FadeOverlayEffect(1, 1);
		// End:0x77
		if(__NFUN_148__(bForMap00, __NFUN_342__(Map00NoUseEvent, 'None')))
		{
			__NFUN_157__(Map00NoUseKnockdowns);
			// End:0x77
			if(__NFUN_170__(int(Map00NoUseKnockdowns), 1))
			{
				GlobalTrigger(Map00NoUseEvent);
			}
		}
		return;
	}

	event EndState()
	{
		super.EndState();
		ShrunkUseStyle = default.ShrunkUseStyle;
		DeathAnimChance = 1;
		return;
	}

	event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
	{
		return;
	}

	function ControlXUsed()
	{
		super(AIActor).ControlXUsed();
		// End:0x4A
		if(__NFUN_148__(bForMap00, __NFUN_342__(Map00UsedEvent, 'None')))
		{
			GlobalTrigger(Map00UsedEvent);
			Map00NoUseKnockdowns = 0;
			Map00NoUseEvent = 'None';
			Map00UsedEvent = 'None';
		}
		return;
	}

	function EndControlX_Lived()
	{
		GlobalTrigger(GetUpEvent);
		super.EndControlX_Lived();
		return;
	}

	function EndControlX_UserFailed()
	{
		EndControlX_Lived();
		SetNewHealth(Health_RecoveryHealth);
		return;
	}

	function EndControlX_UserSuccess()
	{
		// End:0x1B
		if(__NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleC'))
		{
			GetUpEvent = 'None';
		}
		EndControlX_Lived();
		// End:0x8F
		if(__NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleA'))
		{
			GlobalTrigger(Stage1_CompleteEvent);
			FinishMeControlType = class'dnControl_Cycloid_BattleB';
			SetNewHealth(Health_Stage2);
			BeamAttackEnabled = false;
			ShockwaveEnabled = false;
			ShockwaveMultiEnabled = true;
			MortarEnabled = true;
			MultiAnimParms[1].MinTime = ShockwaveStage2MinTime;
			CycloidStage = 2;			
		}
		else
		{
			// End:0xFD
			if(__NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleB'))
			{
				GlobalTrigger(Stage2_CompleteEvent);
				FinishMeControlType = class'dnControl_Cycloid_BattleC';
				SetNewHealth(Health_Stage3);
				ShockwaveEnabled = false;
				ShockwaveMultiEnabled = true;
				BeamAttackEnabled = true;
				MortarEnabled = true;
				MultiAnimParms[1].MinTime = ShockwaveStage3MinTime;
				CycloidStage = 3;				
			}
			else
			{
				// End:0x199
				if(__NFUN_339__(FinishMeControlType, class'dnControl_Cycloid_BattleC'))
				{
					FinishMeControlType = none;
					RaiseHealthToCap(Location);
					GlobalTrigger(Stage3_CompleteEvent);
					CycloidStage = 4;
					// End:0x164
					if(__NFUN_170__(string(PowerConduits), 0))
					{
						SetNewHealth(Health_Stage4);
						bEnraged = true;
						BeamAttackEnabled = false;
						MortarEnabled = false;						
					}
					else
					{
						bPlayDeathSound = false;
						SuspendExecutive(true);
						bNoDamage = false;
						DamageInfo.Damage = Health;
						DiedActivity();
						__NFUN_832__(0);
					}
				}
			}
		}
		return;
	}

	function EndControlX_Died()
	{
		FinishMeControlType = none;
		super.EndControlX_Died();
		return;
	}

	function TimeOutControlX()
	{
		SetNewHealth(Health_RecoveryHealth);
		FadeOverlayEffect(0, 1);
		super.TimeOutControlX();
		return;
	}
	stop;
}

defaultproperties
{
	RocketSpread=1
	ChanceGrenade=1
	RocketSpeed=900
	RocketDamage=40
	RocketDamageRadius=100
	WeaponInfo(0)=(MuzzleNames=(Cond,Func),r_hand_barrel=/* Unknown default property type! */,MuzzleIndex=0,ProjectileClass='dnGame.dnRocket_Cycloid',ProjectilesPerFire=5,FireLikeGrenade=true,SoundName=Sound_FirePrimary)
	WeaponInfo(1)=(MuzzleNames=(Cond,Func),r_arm_barrel=/* Unknown default property type! */,CreateAnimatedCorpse=/* Unknown default property type! */,AnimGridLink=/* Unknown default property type! */)
	WeaponInfo(2)=none
	WeaponInfo(3)=none
	WeaponInfo(4)=(ProjectileClass='dnGame.dnRocket_Cycloid_Secondary',ProjectilesPerFire=1,FireLikeGrenade=false,SoundName=Sound_FireSecondary)
	WeaponInfo(5)=(BoneAimInfo=/* Array type was not detected. */,BoneName=RightForeArm,BoneDir=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=1)
	WeaponInfo(6)=(EnabledOps=/* Array type was not detected. */,StateTableIndex=123486504,SAnimChannelLink=nimC=LeftForeArm,BoneDir=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=-1)
	WeaponInfo(7)=(EnabledOps=/* Array type was not detected. */,StateTableIndex=123486504,SAnimChannelLink=nimC=StartCloak,HumiliationCompleteEvent=Cycloid_Humiliation_Complete,ActionPointMoveMinInterval=8,ChargeEnragedMinInterval=5,ChargeMinInterval=10,ChargeImpulseMagnitude=500,ChargeImpulseLift=200,ChargeIgnoreActorList=/* Array type was not detected. */,StateTableIndex=67,a_combat_popoutbackright_fire_stop=/* Unknown default property type! */)
	WeaponInfo(8)=
/* Exception thrown while deserializing WeaponInfo
System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
   at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
   at System.Collections.Generic.List`1.get_Item(Int32 index)
   at UELib.UnrealStreamImplementations.ReadNameReference(IUnrealStream stream) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\UnrealStream.cs:line 838
   at UELib.Core.UDefaultProperty.DeserializeTagUE1() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 204
   at UELib.Core.UDefaultProperty.DeserializeNextTag() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 193
   at UELib.Core.UDefaultProperty.Deserialize() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 169
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 767 */
	WeaponInfo(9)=ChargeMinDistance=250,ChargeHitDamage=30,ChargeCollisionHeight=150,MortarMinInterval=20,MortarSearchTime=5,MortarSearchTimeRnd=5,MortarDamage=55,MortarDamageRadius=130,ShockwaveSpawnCount=1,ShockwaveMinInterval=10,ShockwaveSpawnParticleClass='p_Creatures.Cycloid_Stomp.CycloidStomp_Spawner',ShockwaveEnabled=true,ShockwaveStage2MinTime=1,ShockwaveStage3MinTime=1.8,ShockwaveSpeed=1000,ShockwaveScale=1,ShockwaveDamage=30,BeamAttackMinInterval=20,Health_RecoveryHealth=350,Health_Stage1=800,Health_Stage2=1100,Health_Stage3=1400,Health_Stage4=1400,StrengthTapInitiateTimeout=4.5,StrengthTapTimeout=3,StrengthTapFailDamage=70,Stage1_CompleteEvent=Cycloid_Stage1_Complete,Stage2_CompleteEvent=Cycloid_Stage2_Complete,Stage3_CompleteEvent=Cycloid_Stage3_Complete,SafeHeight=40,
/* Exception thrown while deserializing WeaponInfo
System.ArgumentOutOfRangeException: Non-negative number required.
Parameter name: value
   at System.IO.MemoryStream.set_Position(Int64 value)
   at UELib.Core.UDefaultProperty.Deserialize() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 184
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 767 */
	WeaponInfo(10)=(StateTableIndex=/* Unknown default property type! */,Ident='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=4.17096E-08,Y=3.78944E-17,Z=-4.661),Z=0.904),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(11)=(MountAngles=(Pitch=-69066190,Yaw=574619647,Roll=-28530),Roll=-30814)
	WeaponInfo(12)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(13)=(MountType=2,DismountPhysics=0)
	WeaponInfo(14)=(RenderObject=none,DrawScale=0)
	WeaponInfo(15)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=-4.427956E+08,Y=3.789464E-17,Z=-15.209),Z=19.146),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(16)=(MountAngles=(Pitch=-592764366,Yaw=574619647,Roll=-30667),Roll=-29739)
	WeaponInfo(17)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(18)=(MountType=2,DismountPhysics=0)
	WeaponInfo(19)=(RenderObject=none,DrawScale=0)
	WeaponInfo(20)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=0.9888335,Y=3.789441E-17,Z=3.652),Z=1.41),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(21)=(MountAngles=(Pitch=-177003982,Yaw=574619647,Roll=32528),Roll=32639)
	WeaponInfo(22)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(23)=(MountType=2,DismountPhysics=0)
	WeaponInfo(24)=(RenderObject=none,DrawScale=0)
	WeaponInfo(25)=
/* Exception thrown while deserializing WeaponInfo
System.ArgumentOutOfRangeException: Non-negative number required.
Parameter name: value
   at System.IO.MemoryStream.set_Position(Int64 value)
   at UELib.Core.UDefaultProperty.Deserialize() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 184
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 767 */
	WeaponInfo(26)=(Win=/* Unknown default property type! */,Ident='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=4.17096E-08,Y=3.78944E-17,Z=-4.661),Z=0.904),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(27)=(MountAngles=(Pitch=-69066190,Yaw=574619647,Roll=-28530),Roll=-30814)
	WeaponInfo(28)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(29)=(MountType=2,DismountPhysics=0)
	WeaponInfo(30)=(RenderObject=none,DrawScale=0)
	WeaponInfo(31)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=-4.427956E+08,Y=3.789464E-17,Z=-15.209),Z=19.146),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(32)=(MountAngles=(Pitch=-592764366,Yaw=574619647,Roll=-30667),Roll=-29739)
	WeaponInfo(33)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(34)=(MountType=2,DismountPhysics=0)
	WeaponInfo(35)=(RenderObject=none,DrawScale=0)
	WeaponInfo(36)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=0.9888335,Y=3.789441E-17,Z=3.652),Z=1.41),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(37)=(MountAngles=(Pitch=-177003982,Yaw=574619647,Roll=32528),Roll=32639)
	WeaponInfo(38)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(39)=(MountType=2,DismountPhysics=0)
	WeaponInfo(40)=(RenderObject=none,DrawScale=0)
	WeaponInfo(41)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=-4.427956E+08,Y=3.789464E-17,Z=-15.209),Z=19.146),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(42)=(MountAngles=(Pitch=-592764366,Yaw=574619647,Roll=-30667),Roll=-29739)
	WeaponInfo(43)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(44)=(MountType=2,DismountPhysics=0)
	WeaponInfo(45)=(RenderObject=none,DrawScale=0)
	WeaponInfo(46)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=4.17096E-08,Y=3.78944E-17,Z=-4.661),Z=0.904),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(47)=(MountAngles=(Pitch=-69066190,Yaw=574619647,Roll=-28530),Roll=-30814)
	WeaponInfo(48)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(49)=(MountType=2,DismountPhysics=0)
	WeaponInfo(50)=(RenderObject=none,DrawScale=0)
	WeaponInfo(51)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=RightForeArm,MountOrigin=(X=0.9888335,Y=3.789441E-17,Z=3.652),Z=1.41),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(52)=(MountAngles=(Pitch=-177003982,Yaw=574619647,Roll=32528),Roll=32639)
	WeaponInfo(53)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(54)=(MountType=2,DismountPhysics=0)
	WeaponInfo(55)=(RenderObject=none,DrawScale=0)
	WeaponInfo(56)=
/* Exception thrown while deserializing WeaponInfo
System.ArgumentOutOfRangeException: Non-negative number required.
Parameter name: value
   at System.IO.MemoryStream.set_Position(Int64 value)
   at UELib.Core.UDefaultProperty.Deserialize() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 184
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 767 */
	WeaponInfo(57)=(StateTableIndex=/* Unknown default property type! */,Ident='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=1.821514E+09,Y=3.778617E-17,Z=13.877),Z=-22.069),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(58)=(MountAngles=(Pitch=593044018,Yaw=574554112,Roll=2103),Roll=-3032)
	WeaponInfo(59)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(60)=(MountType=2,DismountPhysics=0)
	WeaponInfo(61)=(RenderObject=none,DrawScale=0)
	WeaponInfo(62)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=7.711175E+25,Y=3.778591E-17,Z=3.632),Z=-2.126),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(63)=(MountAngles=(Pitch=69345842,Yaw=574554112,Roll=4241),Roll=-1953)
	WeaponInfo(64)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(65)=(MountType=2,DismountPhysics=0)
	WeaponInfo(66)=(RenderObject=none,DrawScale=0)
	WeaponInfo(67)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=-1.075532E+08,Y=3.778593E-17,Z=-3.765),Z=-3.51),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(68)=(MountAngles=(Pitch=177283634,Yaw=574554112,Roll=-236),Roll=127)
	WeaponInfo(69)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(70)=(MountType=2,DismountPhysics=0)
	WeaponInfo(71)=(RenderObject=none,DrawScale=0)
	WeaponInfo(72)=
/* Exception thrown while deserializing WeaponInfo
System.ArgumentOutOfRangeException: Non-negative number required.
Parameter name: value
   at System.IO.MemoryStream.set_Position(Int64 value)
   at UELib.Core.UDefaultProperty.Deserialize() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 184
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 767 */
	WeaponInfo(73)=(Win=/* Unknown default property type! */,Ident='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=1.821514E+09,Y=3.778617E-17,Z=13.877),Z=-22.069),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(74)=(MountAngles=(Pitch=593044018,Yaw=574554112,Roll=2103),Roll=-3032)
	WeaponInfo(75)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(76)=(MountType=2,DismountPhysics=0)
	WeaponInfo(77)=(RenderObject=none,DrawScale=0)
	WeaponInfo(78)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=7.711175E+25,Y=3.778591E-17,Z=3.632),Z=-2.126),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(79)=(MountAngles=(Pitch=69345842,Yaw=574554112,Roll=4241),Roll=-1953)
	WeaponInfo(80)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(81)=(MountType=2,DismountPhysics=0)
	WeaponInfo(82)=(RenderObject=none,DrawScale=0)
	WeaponInfo(83)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=-1.075532E+08,Y=3.778593E-17,Z=-3.765),Z=-3.51),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(84)=(MountAngles=(Pitch=177283634,Yaw=574554112,Roll=-236),Roll=127)
	WeaponInfo(85)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(86)=(MountType=2,DismountPhysics=0)
	WeaponInfo(87)=(RenderObject=none,DrawScale=0)
	WeaponInfo(88)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=1.821514E+09,Y=3.778617E-17,Z=13.877),Z=-22.069),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(89)=(MountAngles=(Pitch=593044018,Yaw=574554112,Roll=2103),Roll=-3032)
	WeaponInfo(90)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(91)=(MountType=2,DismountPhysics=0)
	WeaponInfo(92)=(RenderObject=none,DrawScale=0)
	WeaponInfo(93)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=7.711175E+25,Y=3.778591E-17,Z=3.632),Z=-2.126),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(94)=(MountAngles=(Pitch=69345842,Yaw=574554112,Roll=4241),Roll=-1953)
	WeaponInfo(95)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(96)=(MountType=2,DismountPhysics=0)
	WeaponInfo(97)=(RenderObject=none,DrawScale=0)
	WeaponInfo(98)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=LeftForeArm,MountOrigin=(X=-1.075532E+08,Y=3.778593E-17,Z=-3.765),Z=-3.51),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(99)=(MountAngles=(Pitch=177283634,Yaw=574554112,Roll=-236),Roll=127)
	WeaponInfo(100)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(101)=(MountType=2,DismountPhysics=0)
	WeaponInfo(102)=(RenderObject=none,DrawScale=0)
	WeaponInfo(103)=
/* Exception thrown while deserializing WeaponInfo
System.ArgumentOutOfRangeException: Non-negative number required.
Parameter name: value
   at System.IO.MemoryStream.set_Position(Int64 value)
   at UELib.Core.UDefaultProperty.Deserialize() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 184
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 767 */
	WeaponInfo(104)=(StateTableIndex=/* Unknown default property type! */,Ident='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=-8.402652E+33,Y=3.78948E-17,Z=0.276),Z=25.97),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(105)=(MountAngles=(Pitch=-31448526,Yaw=574619647,Roll=32312),Roll=0)
	WeaponInfo(106)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(107)=(MountType=2,DismountPhysics=0)
	WeaponInfo(108)=(RenderObject=none,DrawScale=0)
	WeaponInfo(109)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=-1.26794E-26,Y=3.789485E-17,Z=-9.405),Z=-14.523),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(110)=(MountAngles=(Pitch=-172088782,Yaw=574619647,Roll=-31120),Roll=0)
	WeaponInfo(111)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(112)=(MountType=2,DismountPhysics=0)
	WeaponInfo(113)=(RenderObject=none,DrawScale=0)
	WeaponInfo(114)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Steam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=2.204484E-33,Y=3.789485E-17,Z=9.796),Z=-15.354),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(115)=(MountAngles=(Pitch=-109960654,Yaw=574619647,Roll=30101),Roll=30700)
	WeaponInfo(116)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(117)=(MountType=2,DismountPhysics=0)
	WeaponInfo(118)=(RenderObject=none,DrawScale=0)
	WeaponInfo(119)=
/* Exception thrown while deserializing WeaponInfo
System.ArgumentOutOfRangeException: Non-negative number required.
Parameter name: value
   at System.IO.MemoryStream.set_Position(Int64 value)
   at UELib.Core.UDefaultProperty.Deserialize() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 184
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 767 */
	WeaponInfo(120)=(Win=/* Unknown default property type! */,Ident='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=-8.402652E+33,Y=3.78948E-17,Z=0.276),Z=25.97),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(121)=(MountAngles=(Pitch=-31448526,Yaw=574619647,Roll=32312),Roll=0)
	WeaponInfo(122)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(123)=(MountType=2,DismountPhysics=0)
	WeaponInfo(124)=(RenderObject=none,DrawScale=0)
	WeaponInfo(125)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=-1.26794E-26,Y=3.789485E-17,Z=-9.405),Z=-14.523),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(126)=(MountAngles=(Pitch=-172088782,Yaw=574619647,Roll=-31120),Roll=0)
	WeaponInfo(127)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(128)=(MountType=2,DismountPhysics=0)
	WeaponInfo(129)=(RenderObject=none,DrawScale=0)
	WeaponInfo(130)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Spray',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=2.204484E-33,Y=3.789485E-17,Z=9.796),Z=-15.354),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(131)=(MountAngles=(Pitch=-109960654,Yaw=574619647,Roll=30101),Roll=30700)
	WeaponInfo(132)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(133)=(MountType=2,DismountPhysics=0)
	WeaponInfo(134)=(RenderObject=none,DrawScale=0)
	WeaponInfo(135)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=-8.402652E+33,Y=3.78948E-17,Z=0.276),Z=25.97),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(136)=(MountAngles=(Pitch=-31448526,Yaw=574619647,Roll=32312),Roll=0)
	WeaponInfo(137)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(138)=(MountType=2,DismountPhysics=0)
	WeaponInfo(139)=(RenderObject=none,DrawScale=0)
	WeaponInfo(140)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=-1.26794E-26,Y=3.789485E-17,Z=-9.405),Z=-14.523),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(141)=(MountAngles=(Pitch=-172088782,Yaw=574619647,Roll=-31120),Roll=0)
	WeaponInfo(142)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(143)=(MountType=2,DismountPhysics=0)
	WeaponInfo(144)=(RenderObject=none,DrawScale=0)
	WeaponInfo(145)=(bSkipVerifySelf=false,SpawnClass='p_Creatures.Cycloid_DamagedArm.Cycloid_DamagedArm_Mist',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=None,ForceEvent=None,MountMeshItem=spine2,MountOrigin=(X=2.204484E-33,Y=3.789485E-17,Z=9.796),Z=-15.354),MountOriginVariance=(X=1.298303E-41,Y=3.773024E-17,Z=0),Z=0)
	WeaponInfo(146)=(MountAngles=(Pitch=-109960654,Yaw=574619647,Roll=30101),Roll=30700)
	WeaponInfo(147)=(MountAnglesVariance=(Pitch=8754,Yaw=574554112,Roll=0),Roll=0)
	WeaponInfo(148)=(MountType=2,DismountPhysics=0)
	h=None
	AnimGridLink=/* Unknown default property type! */
}