/*******************************************************************************
 * BattleLord_Boss generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class BattleLord_Boss extends AIActor
	config
	collapsecategories;

var bool bAllowFinishMove;
var class<dnProjectile> SecondaryProjClass;
var() float CarKickGate;
var() Vector CarImpulse;
var() Vector CarImpulseAtPlayer;
var() float CarTargetPlayerDot;
var() Vector CarTorque;
var() float WildFireShotError;
var KarmaActor MyCar;
var int DeathLevel;
var SoftParticleSystem SecondaryMuzzleFlash;
var class<SoftParticleSystem> SecondaryMuzzleFlashClass;
var name SecondaryMuzzleBone;
var float RoarGate;
var bool bForceRoar;
var bool bWeaponHidden;
var() noexport bool bForMap10c "If true, battlelord will have 2 strength taps and will recover to stage 3 health when done";
var() noexport bool bDisableForceRoar "Set this to true to disable the forced roar that occurs when transition from one stage to the next.";
var() noexport float Health_Stage1 "Initial health of the BattleLord";
var() noexport float Health_Stage2 "When BattleLord's health drops below this point, Stage1_CompleteEvent will be triggered and stage 2 attacks will begin";
var() noexport float Health_Stage3 "When bForMap10c is false and the BattleLord's health drops below this point, Stage2_CompleteEvent will be triggered and stage 3 attacks will begin." "When bForMap10c is true, this is the recover health after successfully completeting the strength tap.";
var() noexport float Health_RecoveryHealth "Health gets reset to this if str tap fails.";
var() noexport deprecated name DropToKneeEvent "Event is triggered when battlelord finishes playing his drop to knees animation at the start of the strength tap.";
var() noexport deprecated name Stage1_CompleteEvent "Event is triggered when battlelord transitions from stage 1 to stage 2.";
var() noexport deprecated name Stage2_CompleteEvent "Event is triggered when battlelord transitions from stage 2 to stage 3.  This happens after the strength tap when bForMap10c is true.";
var() noexport deprecated name FinishedEvent "Event is triggered after final strength tap when battlelord is ready to be humiliated.";
var() noexport float StrengthTapInitiateTimeout "How much time the player has to initiate a strength tap before the battle lord recovers";
var() noexport float HumilitationInitiateTimeout "How much time the player has to initiate the humiliation at the end of the battle";
var() noexport float StrengthTapTimeout "How much time the player has to complete the strenght tap before he is ejected/fails it";
var SViewShakeInfo FailRoarViewShake;
var() noexport float MachineGunDamage "Damage from one single machinegun shot";
var() noexport float MortarDamage "Damage for mortar projectile";
var() noexport float MortarDamageRadius "Damage radius for mortar projectile";
var() noexport float StrengthTapFailDamage "Damage to player when strengh tap fails";
var float MaxWeaponAimOffset;
var array<DumbActor> SafeFallSpots;
var Vector DeathStart;
var Vector DeathEnd;

event PostBeginPlay()
{
	local DumbActor SafeFallSpot;

	super.PostBeginPlay();
	// End:0x3B
	if(bForMap10c)
	{
		FinishMeControlType = class'dnControl_BattleLord_BattleB';
		MultiAnimParms[0].RequireLOS = false;
		MultiAnimParms[0].RequireLOSFromWeapon = false;		
	}
	else
	{
		FinishMeControlType = class'dnControl_BattleLord_BattleC';
	}
	MaybeFadeOutChannelBlock('ActionBlock', 0);
	InitialiseWeapons();
	SetNewHealth(Health_Stage1);
	MaxWeaponAimOffset = 0;
	// End:0x9A
	foreach __NFUN_747__(class'DumbActor', SafeFallSpot, 'BattleLord_SafeFallSpot')
	{
		SafeFallSpots[string(SafeFallSpots)] = SafeFallSpot;		
	}	
	return;
}

function SetCurrentWeapon(class<Weapon> NewWeaponClass, optional Weapon NewWeapon)
{
	super.SetCurrentWeapon(NewWeaponClass, NewWeapon);
	// End:0xB6
	if(__NFUN_339__(NewWeaponClass, class'MiniGun_BL'))
	{
		// End:0x4B
		if(__NFUN_340__(MiniGun_BL(Weapon), none))
		{
			MiniGun_BL(Weapon).BaseDamagePerShot = MachineGunDamage;
		}
		SecondaryMuzzleFlash = __NFUN_615__(SecondaryMuzzleFlashClass,, 'Crap');
		// End:0xB6
		if(__NFUN_340__(SecondaryMuzzleFlash, none))
		{
			SecondaryMuzzleFlash.TickStyle = 2;
			SecondaryMuzzleFlash.MountType = 2;
			SecondaryMuzzleFlash.MountMeshItem = SecondaryMuzzleBone;
			SecondaryMuzzleFlash.__NFUN_635__(Weapon);
		}
	}
	return;
}

final function FadeInActionBlock()
{
	MaybeFadeInChannelBlock('ActionBlock', 0.125, 1);
	return;
}

final function FadeOutActionBlock()
{
	MaybeFadeOutChannelBlock('ActionBlock', 0.3);
	return;
}

simulated event float GetHealthMeterPercent()
{
	// End:0x2F
	if(bForMap10c)
	{
		// End:0x22
		if(__NFUN_172__(DeathLevel, 2))
		{
			return __NFUN_196__(Health, Health_Stage3);
		}
		return __NFUN_196__(Health, Health_Stage1);
	}
	return __NFUN_196__(Health, Health_Stage1);
	return;
}

event Tick(float DeltaSeconds)
{
	local bool bAimingGun;
	local Vector AimAt, AimFrom;
	local Rotator DefRot;

	super(Actor).Tick(DeltaSeconds);
	__NFUN_568__();
	// End:0x4A
	if(__NFUN_148__(__NFUN_340__(Weapon, none), __NFUN_147__(Weapon.bHidden, bWeaponHidden)))
	{
		Weapon.__NFUN_590__(bWeaponHidden);
	}
	// End:0xA4
	if(__NFUN_148__(PrimaryTarget.IsValidTarget(), BoneAimerOnTarget))
	{
		// End:0xA1
		if(__NFUN_148__(__NFUN_173__(int(CurrentOp), int(95)), __NFUN_145__(CanProcFire)))
		{
			bAimingGun = true;
			AimAt = PrimaryTarget.GetEyePos();
		}		
	}
	else
	{
		// End:0xFD
		if(__NFUN_173__(int(CurrentOp), int(23)))
		{
			// End:0xF2
			if(__NFUN_148__(__NFUN_243__(DeathStart, DeathEnd), __NFUN_201__(CollisionInterpolationDuration, 0)))
			{
				__NFUN_645__(__NFUN_258__(__NFUN_196__(CollisionInterpolationTimer, CollisionInterpolationDuration), DeathStart, DeathEnd), true);				
			}
			else
			{
				DeathStart = DeathEnd;
			}
		}
	}
	// End:0x141
	if(__NFUN_148__(__NFUN_202__(Health, Health_Stage2), __NFUN_169__(DeathLevel, 1)))
	{
		GlobalTrigger(Stage1_CompleteEvent);
		DeathLevel = 1;
		// End:0x13E
		if(__NFUN_145__(bDisableForceRoar))
		{
			bForceRoar = true;
		}		
	}
	else
	{
		// End:0x1E5
		if(__NFUN_148__(__NFUN_148__(__NFUN_145__(bForMap10c), __NFUN_202__(Health, Health_Stage3)), __NFUN_169__(DeathLevel, 2)))
		{
			GlobalTrigger(Stage2_CompleteEvent);
			DeathLevel = 2;
			Weapon.WeaponConfig.default.HorizShotError = WildFireShotError;
			Weapon.WeaponConfig.default.VertShotError = WildFireShotError;
			MultiAnimParms[0].AnimIndex = 1;
			CanProcFire = true;
			// End:0x1E5
			if(__NFUN_145__(bDisableForceRoar))
			{
				bForceRoar = true;
			}
		}
	}
	// End:0x211
	if(bAimingGun)
	{
		MaxWeaponAimOffset = __NFUN_224__(__NFUN_198__(MaxWeaponAimOffset, __NFUN_195__(0.5, DeltaSeconds)), default.MaxWeaponAimOffset);		
	}
	else
	{
		AimAt = __NFUN_238__(MeshInstance.__NFUN_533__('mount_hand_r', true), __NFUN_235__(100, Vector(Rotation)));
		MaxWeaponAimOffset = __NFUN_225__(__NFUN_199__(MaxWeaponAimOffset, __NFUN_195__(0.5, DeltaSeconds)), 0);
	}
	// End:0x296
	if(__NFUN_201__(MaxWeaponAimOffset, 0))
	{
		MeshInstance.__NFUN_531__('mount_hand_r', __NFUN_232__(1, 0, 0), AimAt,, MaxWeaponAimOffset);
	}
	return;
}

event Landed(Vector HitNormal, Actor LandedOnActor)
{
	super(Pawn).Landed(HitNormal, LandedOnActor);
	StartCarKick(KarmaActor(LandedOnActor));
	return;
}

event KImpact(name SelfBoneName, KarmaActor Other, name OtherBoneName, Vector Position, Vector ImpactVelocity, Vector ImpactNormal)
{
	super.KImpact(SelfBoneName, Other, OtherBoneName, Position, ImpactVelocity, ImpactNormal);
	StartCarKick(Other);
	return;
}

event float CalculateGroundConstraintStrengthScalar()
{
	return 10000;
	return;
}

function StartCarKick(KarmaActor Other)
{
	// End:0x1D
	if(__NFUN_150__(__NFUN_173__(int(CurrentOp), int(23)), __NFUN_398__('ControlX')))
	{
		return;
	}
	// End:0x16A
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_340__(Other, none), __NFUN_145__(Other.bIsPawn)), __NFUN_145__(Other.bIsProjectile)), __NFUN_173__(int(Other.Physics), int(18))), __NFUN_341__(Other.Tag, 'KickableCar')))
	{
		// End:0xA8
		if(__NFUN_201__(CarKickGate, Level.GameTimeSeconds))
		{
			return;
		}
		// End:0xDC
		if(__NFUN_148__(__NFUN_339__(MyCar, Other), __NFUN_201__(__NFUN_198__(CarKickGate, default.CarKickGate), Level.GameTimeSeconds)))
		{
			return;
		}
		SetAnimPresets(2, 'Anim_KickCarRight', false, -1, Other, Other.Location, FaceThreshold);
		CanUseOp(6);
		CurrentOpMustFinish = false;
		ExecuteOp(6);
		CurrentOpMustFinish = true;
		SuspendExecutive(true);
		SuspendExecutive(false);
		AnimPreset.UseExactAnimName = false;
		CarKickGate = __NFUN_198__(Level.GameTimeSeconds, default.CarKickGate);
		MyCar = Other;
	}
	return;
}

k2call function DoKick(optional EventInfo AnimEventInfo)
{
	local Vector DirToTarget2D, MyDir2D, FinalVelocity, FinalTorque;
	local float DotToTarget;

	DotToTarget = -1;
	// End:0x52
	if(PrimaryTarget.IsValidTarget())
	{
		DirToTarget2D = PrimaryTarget.GetDir2DTo();
		MyDir2D = Vector(Rotation);
		DotToTarget = __NFUN_244__(MyDir2D, DirToTarget2D);
	}
	// End:0xCE
	if(__NFUN_201__(DotToTarget, 0.5))
	{
		DirToTarget2D = __NFUN_239__(PrimaryTarget.GetAimPos(), MyCar.Location);
		DirToTarget2D.Z = 0;
		DirToTarget2D = __NFUN_253__(DirToTarget2D);
		FinalVelocity = __NFUN_241__(CarImpulseAtPlayer, Rotator(DirToTarget2D));
		FinalTorque = __NFUN_241__(CarTorque, Rotator(DirToTarget2D));		
	}
	else
	{
		FinalVelocity = __NFUN_241__(CarImpulse, Rotation);
		FinalTorque = __NFUN_241__(CarTorque, Rotation);
	}
	MyCar.__NFUN_790__(FinalVelocity);
	MyCar.__NFUN_791__(FinalTorque);
	FindSoundAndSpeak('Sound_KickCar');
	return;
}

event ProceduralFire()
{
	// End:0x1C
	if(__NFUN_173__(int(CurrentOp), int(95)))
	{
		PlayAnim('Anim_ShootStraight');		
	}
	else
	{
		PlayAnim('Anim_Shoot');
	}
	MovingFireGate = __NFUN_198__(__NFUN_198__(Level.GameTimeSeconds, MinMovingFireInterval), __NFUN_195__(__NFUN_222__(), RndMovingFireInterval));
	return;
}

event bool ShouldProceduralFire()
{
	// End:0x0D
	if(__NFUN_173__(DeathLevel, 0))
	{
		return false;
	}
	return __NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(ProcAimingEnabledThisFrame, CanProcFire), ProceduralMovingFire), __NFUN_150__(__NFUN_202__(MovingFireGate, 0), __NFUN_201__(Level.GameTimeSeconds, MovingFireGate))), __NFUN_145__(IsCloaked()));
	return;
}

k2call simulated function FireSecondary(optional EventInfo AnimEventInfo)
{
	// End:0x0E
	if(__NFUN_339__(Weapon, none))
	{
		return;
	}
	FireSecondaryWeapon();
	NotifyFired();
	return;
}

function Vector GetSecondarySpawnPos()
{
	// End:0x22
	if(__NFUN_339__(Weapon, none))
	{
		__NFUN_354__(false);
		return __NFUN_232__(0, 0, 0);
	}
	Weapon.__NFUN_568__();
	return Weapon.MeshInstance.__NFUN_533__(SecondaryMuzzleBone, true, false);
	return;
}

function FireSecondaryWeapon()
{
	local Vector SpawnPos, ProjVelocity, TargetPos;
	local dnRocket_RPG_HeatSeek Projectile;
	local Rotator SpawnRot;

	SpawnRot = Weapon.MeshInstance.__NFUN_534__(SecondaryMuzzleBone, true);
	SpawnPos = GetSecondarySpawnPos();
	Projectile = dnRocket_RPG_HeatSeek(__NFUN_615__(SecondaryProjClass, self,, SpawnPos, SpawnRot));
	// End:0xBC
	if(__NFUN_340__(Projectile, none))
	{
		Projectile.Damage = MortarDamage;
		Projectile.DamageRadius = MortarDamageRadius;
		Projectile.ForceTarget(PrimaryTargetActor);
		// End:0xBC
		if(__NFUN_173__(int(CurrentOp), int(95)))
		{
			Projectile.SeekTimeLimit = 0.5;
		}
	}
	// End:0x106
	if(__NFUN_340__(SecondaryMuzzleFlash, none))
	{
		// End:0xF4
		if(SecondaryMuzzleFlash.bIsFriendSpawner)
		{
			dnFriendFX_Spawners(SecondaryMuzzleFlash).ExecuteEffect(true);			
		}
		else
		{
			SecondaryMuzzleFlash.Trigger(self, none);
		}
	}
	FindSoundAndSpeak('Sound_FireRocket');
	return;
}

event NotifyMultiAnimStart()
{
	// End:0x2C
	if(__NFUN_340__(Weapon, none))
	{
		Weapon.SetWeaponAnimState('ChainGunFireStart');
		FindSoundAndSpeak('FiringLoop');
	}
	return;
}

event NotifyMultiAnimLoop()
{
	// End:0x21
	if(__NFUN_340__(Weapon, none))
	{
		Weapon.SetWeaponAnimState('ChainGunFireLoop');
	}
	return;
}

event NotifyMultiAnimStop()
{
	// End:0x2E
	if(__NFUN_340__(Weapon, none))
	{
		Weapon.SetWeaponAnimState('ChainGunFireStop');
		FindAndStopSound('FiringLoop', 3);
	}
	return;
}

simulated event float GetBaseDamage(Actor Victim, optional Pawn Instigator, optional class<DamageType> DamageType, optional Vector HitDirection, optional Vector HitLocation, optional name BoneName, optional Vector SourceTraceOrigin)
{
	return 50;
	return;
}

simulated function Vector GetWeaponAim(out Vector StartPos, out Vector Dir)
{
	local Vector Weapon_Aim, target_dir;

	super.GetWeaponAim(StartPos, Dir);
	// End:0x38
	if(__NFUN_150__(__NFUN_145__(CanProcFire), __NFUN_145__(PrimaryTarget.IsValidTarget())))
	{
		return Dir;
	}
	Weapon.__NFUN_568__();
	target_dir = __NFUN_253__(__NFUN_239__(PrimaryTarget.GetAimPos(), StartPos));
	// End:0x80
	if(__NFUN_200__(__NFUN_244__(Dir, target_dir), 0.25))
	{
		return Dir;
	}
	StartPos = Weapon.MeshInstance.__NFUN_533__('mount_muzzel', true, false);
	Dir = target_dir;
	// End:0xCE
	if(__NFUN_173__(int(Role), int(ROLE_Authority)))
	{
		__NFUN_184__(Weapon.WeaponStateImpulse);
	}
	return;
}

function Vector GetMuzzlePos()
{
	return Location;
	return;
}

event bool AIMustCheckActionUsable()
{
	return false;
	return;
}

event bool AICheckActionPointClearTarget()
{
	return true;
	return;
}

event float GetDefaultGotoXHeight()
{
	return 1000;
	return;
}

k2call simulated function FootStep(optional EventInfo AnimEventInfo)
{
	super(Pawn).FootStep(AnimEventInfo);
	// End:0x47
	if(__NFUN_148__(__NFUN_340__(PrimaryTargetActor, none), PrimaryTargetActor.bIsPlayerPawn))
	{
		Pawn(PrimaryTargetActor).ShakeView(PlayerShrunkFootstepViewShake, false);
	}
	return;
}

k2call function weaponcollisionon(optional EventInfo AnimEventInfo)
{
	// End:0x1E
	if(__NFUN_340__(Weapon, none))
	{
		Weapon.__NFUN_621__(false, false, false, true, false);
	}
	return;
}

k2call function weaponcollisionoff(optional EventInfo AnimEventInfo)
{
	// End:0x1E
	if(__NFUN_340__(Weapon, none))
	{
		Weapon.__NFUN_621__(false, false, false, false, false);
	}
	return;
}

k2call function Hide_Weapon(optional EventInfo AnimEventInfo)
{
	bWeaponHidden = true;
	// End:0x22
	if(__NFUN_340__(Weapon, none))
	{
		Weapon.__NFUN_590__(true);
	}
	return;
}

k2call function Show_Weapon(optional EventInfo AnimEventInfo)
{
	bWeaponHidden = false;
	// End:0x22
	if(__NFUN_340__(Weapon, none))
	{
		Weapon.__NFUN_590__(false);
	}
	return;
}

final function SetNewHealth(float NewHealth)
{
	SetHealthCap(NewHealth);
	__NFUN_832__(NewHealth);
	return;
}

k2call simulated function FailDamage(optional EventInfo AnimEventInfo)
{
	// End:0x87
	if(__NFUN_148__(__NFUN_340__(ControlXParms.MyControl, none), __NFUN_340__(ControlXParms.MyControl.User, none)))
	{
		ControlXParms.MyControl.User.TakeDamage(self, StrengthTapFailDamage, Location, __NFUN_253__(__NFUN_239__(ControlXParms.MyControl.User.Location, Location)), class'MeleeDamage_NoRumble');		
	}
	else
	{
		BroadcastLog(__NFUN_302__(__NFUN_303__(__NFUN_302__(__NFUN_303__("Warning: Cycloid unable to damage attached user.", "ControlXParms.MyControl="), string(ControlXParms.MyControl)), "ControlXParms.MyControl.User="), string(ControlXParms.MyControl.User)));
	}
	return;
}

simulated function bool ShouldUpdateShrinkScale()
{
	// End:0x10
	if(__NFUN_173__(int(CurrentOp), int(23)))
	{
		return true;
	}
	return super(Pawn).ShouldUpdateShrinkScale();
	return;
}

function bool ShouldUseDieOp(class<DamageType> DamageType)
{
	return true;
	return;
}

simulated function HandleCorpse(int Damage, class<DamageType> DamageType, Vector DamageOrigin, Vector DamageDirection, optional name HitBoneName, optional Pawn DeathInstigator)
{
	super(Pawn).HandleCorpse(Damage, DamageType, DamageOrigin, DamageDirection, HitBoneName, DeathInstigator);
	// End:0x4E
	if(__NFUN_340__(MyCorpse, none))
	{
		MyCorpse.__NFUN_812__(0);
		MyCorpse.__NFUN_642__(9);
	}
	return;
}

function DropToKneesComplete()
{
	GlobalTrigger(DropToKneeEvent);
	return;
}

k2call simulated function StartExpandingCollision()
{
	SetCollisionInterpolationTarget(200, default.CollisionHeight, TargetMaxStepHeightEx, 1.5);
	return;
}

function EndControlX_UserFailed()
{
	return;
}

function EndControlX_UserSuccess()
{
	return;
}

function ControlX_ForcePlayerAttach()
{
	// End:0x33
	if(__NFUN_340__(ControlXParms.MyControl, none))
	{
		ControlXParms.MyControl.PerformAttachPawnSuccess(Level.__NFUN_1161__());
	}
	return;
}

k2call simulated function BattleFailRoarEffects(optional EventInfo AnimEventInfo)
{
	local PlayerPawn P;

	P = Level.__NFUN_1161__();
	// End:0x35
	if(__NFUN_340__(P, none))
	{
		P.ShakeView(FailRoarViewShake, false);
	}
	__NFUN_607__(0.1, false, 'MistSplatter', true, true);
	__NFUN_607__(0.4, false, 'MistSplatter', true, true);
	__NFUN_607__(0.6, false, 'MistSplatter', true, true);
	__NFUN_607__(0.9, false, 'MistSplatter', true, true);
	return;
}

k2call simulated function BloodSprayAttach(optional EventInfo AnimEventInfo)
{
	BloodSprayAttachHelper('face_eye_l', __NFUN_232__(2.201, -0.936, -0.833), __NFUN_265__(1024, -7167, 0));
	return;
}

k2call simulated function JewelShot(optional EventInfo AnimEventInfo)
{
	// End:0x3E
	if(__NFUN_148__(__NFUN_145__(bForMap10c), __NFUN_340__(Level.__NFUN_1161__(), none)))
	{
		Level.__NFUN_1161__().FindSoundAndSpeak('JewelShot');
	}
	return;
}

function Engine.BaseAI.EAICode COND_ShouldGotoAP()
{
	local Engine.BaseAI.EAICode Code;

	Code = COND_ShouldGotoToNextAPCheckLOS();
	// End:0x5C
	if(__NFUN_174__(int(Code), int(0)))
	{
		// End:0x5C
		if(__NFUN_150__(__NFUN_339__(ActionPoint, none), __NFUN_148__(__NFUN_340__(PrimaryTarget, none), __NFUN_202__(PrimaryTarget.GetTimeVisible(), 0))))
		{
			Code = COND_ShouldGotoActionPoint();
		}
	}
	return Code;
	return;
}

function Engine.BaseAI.EAICode COND_ShouldRoar()
{
	// End:0x61
	if(__NFUN_145__(bForceRoar))
	{
		// End:0x42
		if(__NFUN_150__(__NFUN_150__(__NFUN_339__(PrimaryTargetActor, none), PrimaryTargetActor.bIsPlayerPawn), __NFUN_174__(int(CheckCondition(10)), int(0))))
		{
			return 1;
		}
		// End:0x5E
		if(__NFUN_201__(RoarGate, Level.GameTimeSeconds))
		{
			return 1;
		}		
	}
	else
	{
		bForceRoar = false;
	}
	RoarGate = __NFUN_198__(Level.GameTimeSeconds, default.RoarGate);
	return 0;
	return;
}

function Engine.BaseAI.EAICode COND_TurnTowardsTarget()
{
	local Engine.BaseAI.EAICode Code;
	local Vector D;

	// End:0x0F
	if(__NFUN_339__(PrimaryTargetActor, none))
	{
		return 4;
	}
	// End:0x26
	if(__NFUN_173__(int(TargetContact(1)), int(0)))
	{
		return 3;
	}
	D = __NFUN_239__(PrimaryTargetActor.Location, Location);
	// End:0x5C
	if(__NFUN_201__(__NFUN_244__(D, Vector(Rotation)), 0))
	{
		return 9;
	}
	return 0;
	return;
}

event NotifyOpStarted(Engine.BaseAI.EAIOp NewOp, Engine.BaseAI.EAIOp OldOp)
{
	local int i, BestIdx;
	local float CurrDist, BestDist;

	super.NotifyOpStarted(NewOp, OldOp);
	// End:0x4A
	if(__NFUN_173__(int(NewOp), int(95)))
	{
		// End:0x35
		if(__NFUN_169__(DeathLevel, 2))
		{
			CanProcFire = false;			
		}
		else
		{
			MinMovingFireInterval = __NFUN_196__(default.MinMovingFireInterval, 3);
		}		
	}
	else
	{
		// End:0x176
		if(__NFUN_173__(int(NewOp), int(23)))
		{
			bForcePhysicsCutScene = true;
			SetAnimSync(1, 1, 1, 2, 2);
			BoneAimerOnTarget = false;
			bNoDamage = true;
			bIgnoreAimAssist = true;
			SetCollisionInterpolationTarget(200, default.CollisionHeight, TargetMaxStepHeightEx, 1.5);
			__NFUN_642__(0);
			DeathStart = Location;
			DeathEnd = Location;
			BestIdx = -1;
			i = __NFUN_166__(string(SafeFallSpots), 1);
			J0xD7:

			// End:0x146 [Loop If]
			if(__NFUN_172__(i, 0))
			{
				CurrDist = __NFUN_252__(__NFUN_239__(DeathStart, SafeFallSpots[i].Location));
				// End:0x13C
				if(__NFUN_150__(__NFUN_173__(BestIdx, -1), __NFUN_200__(CurrDist, BestDist)))
				{
					BestIdx = i;
					BestDist = CurrDist;
				}
				__NFUN_185__(i);
				// [Loop Continue]
				goto J0xD7;
			}
			// End:0x170
			if(__NFUN_174__(BestIdx, -1))
			{
				DeathEnd = SafeFallSpots[BestIdx].Location;
			}
			FadeOutActionBlock();
		}
	}
	return;
}

event NotifyOpEnded(Engine.BaseAI.EAIOp Op, Engine.BaseAI.EAIOpStatus Status)
{
	super.NotifyOpEnded(Op, Status);
	// End:0x29
	if(__NFUN_173__(int(Op), int(107)))
	{
		bNoDamage = false;		
	}
	else
	{
		// End:0xAB
		if(__NFUN_173__(int(Op), int(95)))
		{
			CanProcFire = true;
			MovingFireGate = __NFUN_198__(Level.GameTimeSeconds, __NFUN_195__(MinMovingFireInterval, 1.5));
			Weapon.SetWeaponAnimState('idle');
			Weapon.__NFUN_696__();
			FindAndStopSound('FiringLoop', 3);
			// End:0xA8
			if(__NFUN_172__(DeathLevel, 2))
			{
				MinMovingFireInterval = default.MinMovingFireInterval;
			}			
		}
		else
		{
			// End:0x13D
			if(__NFUN_173__(int(Op), int(23)))
			{
				bNoDamage = false;
				CanProcFire = true;
				bForcePhysicsCutScene = default.bForcePhysicsCutScene;
				bIgnoreAimAssist = default.bIgnoreAimAssist;
				__NFUN_642__(default.Physics);
				SetCollisionInterpolationTarget(default.CollisionRadius, default.CollisionHeight, TargetMaxStepHeightEx, 0.1);
				// End:0x117
				if(__NFUN_169__(DeathLevel, 2))
				{
					weaponcollisionoff();
				}
				MovingFireGate = __NFUN_198__(Level.GameTimeSeconds, __NFUN_195__(MinMovingFireInterval, 1.5));				
			}
			else
			{
				// End:0x16F
				if(__NFUN_173__(int(Op), int(135)))
				{
					CanProcFire = true;
					MovingFireGate = __NFUN_198__(Level.GameTimeSeconds, MinMovingFireInterval);
				}
			}
		}
	}
	return;
}

k2call simulated function DisableFinishMoveRagDollCollision()
{
	SetCollisionInterpolationTarget(50, default.CollisionHeight, 0, 0);
	SetCollisionInterpolationTarget(default.CollisionRadius, default.CollisionHeight, 0, 3);
	super.DisableFinishMoveRagDollCollision();
	return;
}

function ModifyHealthActivity(float DeltaHealth, Vector ModifiedFrom)
{
	super(Pawn).ModifyHealthActivity(DeltaHealth, ModifiedFrom);
	// End:0x4F
	if(__NFUN_202__(Health, 0))
	{
		Velocity.X = 0;
		Velocity.Y = 0;
		Velocity.Z = 0;
	}
	return;
}

function BecomeDead()
{
	__NFUN_607__(1E-05, false, 'DelayBecomeDead');
	return;
}

function DelayBecomeDead()
{
	BecomeDead();
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(Pawn).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(SecondaryProjClass);
	PrecacheIndex.__NFUN_1266__(class'dnScreenSplatter_Blood_Boss');
	PrecacheIndex.__NFUN_1266__(class'dnScreenSplatter_Mist_Boss');
	PrecacheIndex.__NFUN_1266__(class'dnHUDEffect_Mist');
	PrecacheIndex.__NFUN_1266__(class'MiniGun_BL');
	PrecacheIndex.__NFUN_1266__(class'dnControl_BattleLord_BattleC');
	PrecacheIndex.__NFUN_1266__(class'dnControl_BattleLord_FinishingMove');
	// End:0xA4
	if(bForMap10c)
	{
		PrecacheIndex.__NFUN_1266__(class'dnControl_BattleLord_BattleB');
	}
	PrecacheIndex.__NFUN_1266__(class'Blood_Spray_Main');
	PrecacheIndex.__NFUN_1266__(class'BulletImpact_Dust_Spawner');
	PrecacheIndex.__NFUN_1266__(class'StompImpact_Large_Brown_Spawner');
	PrecacheIndex.__NFUN_1283__('Anim_Idle', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_IdleReady', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_IdleMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_IdleReadyMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_WalkMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_WalkBackwardsMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_RunMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_RunBackwardsMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_SidestepLeftMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_SidestepRightMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StrafeLeftMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StrafeRightMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_SecondaryMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_FireMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ShootProjectileMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ShootMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ShootStraightMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_Roar', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_StompRight', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_KickCarRight', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_TurnLeft45', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_TurnLeft180', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_TurnRight45', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_TurnRight180', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainMiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainBigFront', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainBigBack', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainBigLeft', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_PainBigRight', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ContinuousFireStart0MiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ContinuousFireLoop0MiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ContinuousFireStop0MiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ContinuousFireStart1MiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ContinuousFireLoop1MiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('Anim_ContinuousFireStop1MiniGun_BL', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('BattleLord_Battle_DropToKnees', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('BattleLord_Battle_KneeIdle', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('BattleLord_Battle_Recover', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('BattleLord_Finish_StartIdle', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('BattleLord_Finish_Idle', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('BattleLord_Finish_Death', class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1283__('ChainGunFireStart', class'MiniGun_BL'.default.AnimationControllerClass, class'MiniGun_BL'.default.Mesh);
	PrecacheIndex.__NFUN_1283__('ChainGunFireLoop', class'MiniGun_BL'.default.AnimationControllerClass, class'MiniGun_BL'.default.Mesh);
	PrecacheIndex.__NFUN_1283__('ChainGunFireStop', class'MiniGun_BL'.default.AnimationControllerClass, class'MiniGun_BL'.default.Mesh);
	PrecacheIndex.__NFUN_1283__('idle', class'MiniGun_BL'.default.AnimationControllerClass, class'MiniGun_BL'.default.Mesh);
	PrecacheIndex.__NFUN_1282__(class'acBattleLordBoss', Mesh);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'FiringLoop');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_FireRocket');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_KickCar');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Roar');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_Horn_Pain');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_Horn_Rip');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_Horn_Stab');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_FailThrow_Yell');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_FailYell_01');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_FailYell_02');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_GrabDuke');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_GrabGun');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_LiftGun');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'STR_TossWhoosh');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Death');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_FallDown');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_Death_NutSqueak');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_DownScream');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Sound_FallRustle');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ButtSeat');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Falling_Flail');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Gen_Grunt');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Jump');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'KnockDown_BodySlam');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'KnockDown_VOC');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'LadderClimb_Rustle');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Rage_VOC');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_BodyStep');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Hand');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Pat_01');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_Scuff');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_StandShift');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'STR_BodySlide_Single');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'STR_JumpLand_Cem');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'STR_LandRustle');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Toss');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Veh_HandPat');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Veh_SteerGrab');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_BL_SpeedBag_Impact');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_BL_SpeedBag_ImpactFinal');
	// End:0x9E7
	if(__NFUN_145__(bForMap10c))
	{
		PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'JewelShot');
	}
	return;
}

event EnumerateUsableAnimationControllers(PrecacheIndex PrecacheIndex, out array<Engine.BaseAI.EAIAnimController> UsableControllers)
{
	UsableControllers[string(UsableControllers)] = 1;
	return;
}

state GotoX
{
	event float CalculateGroundConstraintStrengthScalar()
	{
		return 10000;
		return;
	}
	stop;
}

state ControlX
{
	event BeginState()
	{
		super.BeginState();
		ShrunkUseStyle = 1;
		DisablePhysics = false;
		bDoOverlayEffect = true;
		FadeOverlayEffect(0, 0);
		FadeOverlayEffect(1, 1);
		return;
	}

	event EndState()
	{
		super.EndState();
		ShrunkUseStyle = default.ShrunkUseStyle;
		DeathAnimChance = 1;
		return;
	}

	event Used(Actor Other, Pawn Instigator)
	{
		// End:0x10
		if(ControlXParms.IsControlled)
		{
			return;
		}
		super.Used(Other, Instigator);
		// End:0x49
		if(__NFUN_148__(ControlXParms.IsControlled, __NFUN_339__(FinishMeControlType, class'dnControl_BattleLord_BattleC')))
		{
			__NFUN_642__(0);
			__NFUN_861__(false);
		}
		return;
	}

	event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
	{
		return;
	}

	function EndControlX_UserFailed()
	{
		EndControlX_Lived();
		SetNewHealth(Health_RecoveryHealth);
		// End:0x32
		if(__NFUN_339__(FinishMeControlType, class'dnControl_BattleLord_BattleC'))
		{
			__NFUN_861__(default.bSimplePawnPhysicsCollision);
			__NFUN_642__(default.Physics);
		}
		return;
	}

	function EndControlX_UserSuccess()
	{
		local Weapon MyOldWeapon;

		EndControlX_Lived();
		// End:0x36
		if(__NFUN_339__(FinishMeControlType, class'dnControl_BattleLord_BattleA'))
		{
			DeathLevel = 1;
			FinishMeControlType = class'dnControl_BattleLord_BattleB';
			SetNewHealth(Health_Stage2);			
		}
		else
		{
			// End:0xD9
			if(__NFUN_339__(FinishMeControlType, class'dnControl_BattleLord_BattleB'))
			{
				GlobalTrigger(Stage2_CompleteEvent);
				DeathLevel = 2;
				FinishMeControlType = class'dnControl_BattleLord_BattleC';
				Weapon.WeaponConfig.default.HorizShotError = WildFireShotError;
				Weapon.WeaponConfig.default.VertShotError = WildFireShotError;
				MultiAnimParms[0].AnimIndex = 1;
				CanProcFire = true;
				SetNewHealth(Health_Stage3);
				// End:0xD6
				if(__NFUN_145__(bDisableForceRoar))
				{
					bForceRoar = true;
				}				
			}
			else
			{
				// End:0x199
				if(__NFUN_339__(FinishMeControlType, class'dnControl_BattleLord_BattleC'))
				{
					GlobalTrigger(FinishedEvent);
					FinishMeControlType = class'dnControl_BattleLord_FinishingMove';
					DeathLevel = 3;
					CanUseOp(97);
					CurrentOpMustFinish = false;
					ExecuteOp(97);
					CurrentOpMustFinish = false;
					// End:0x164
					if(__NFUN_340__(Weapon, none))
					{
						MyOldWeapon = Weapon;
						Weapon.__NFUN_631__();
						RemoveInventory(Weapon);
						MyOldWeapon.__NFUN_590__(false);
					}
					bPlayDeathSound = false;
					SuspendExecutive(true);
					bNoDamage = false;
					DamageInfo.Damage = Health;
					DiedActivity();
					__NFUN_832__(0);
				}
			}
		}
		return;
	}

	function EndControlX_Died()
	{
		bAllowFinishMove = false;
		FinishMeControlType = none;
		super.EndControlX_Died();
		return;
	}

	function TimeOutControlX()
	{
		SetNewHealth(Health_RecoveryHealth);
		FadeOverlayEffect(0, 1);
		// End:0x88
		if(__NFUN_339__(FinishMeControlType, class'dnControl_BattleLord_FinishingMove'))
		{
			FinishMeControlType = none;
			super.TimeOutControlX();
			CanUseOp(97);
			CurrentOpMustFinish = false;
			ExecuteOp(97);
			CurrentOpMustFinish = false;
			bPlayDeathSound = false;
			SuspendExecutive(true);
			DamageInfo.Damage = Health;
			DiedActivity();
			__NFUN_832__(0);			
		}
		else
		{
			super.TimeOutControlX();
		}
		return;
	}
	stop;
}

defaultproperties
{
	bAllowFinishMove=true
	SecondaryProjClass='dnGame.dnGrenade_BattleLord'
	CarKickGate=2.5
	CarImpulse=(X=1.298303E-41,Y=3.778824E-17,Z=0)
	CarImpulseAtPlayer=(X=-1.298303E-41,Y=3.778888E-17,Z=0)
	CarTorque=(X=1.298303E-41,Y=3.77854E-17,Z=0)
	WildFireShotError=0.05
	SecondaryMuzzleFlashClass='p_Creatures.Battlelord_Grenade.Battlelord_GrenadeMF_Spawner'
	SecondaryMuzzleBone=mount_muzzel_granade
	RoarGate=15
	Health_Stage1=1800
	Health_Stage2=1400
	Health_Stage3=800
	Health_RecoveryHealth=400
	StrengthTapInitiateTimeout=10
	HumilitationInitiateTimeout=10
	StrengthTapTimeout=6
	FailRoarViewShake=(bNoLerp=false,bToggleSign=true,Style=3,Function=1,FalloffActor=none,FalloffDistance=0,ShakeDuration=1.5,ShakeFrequency=0.04,ShakeMagnitude=800,ShakeFullMagnitude=0,ShakeFullMagnitudeTime=0,ShakeName=BLordFailRoarShake)
	MachineGunDamage=2
	MortarDamage=20
	MortarDamageRadius=100
	StrengthTapFailDamage=70
	MaxWeaponAimOffset=0.7854
	DamageScaleInfo(0)=(Ident=none,DamageScale=0,QualifierDamageTypes=(none,class'SensorEnabled',class'DefaultAITickMSGraph',class'm_aTarget',class'AnimXParms',class'GotoXParms',class'ExplosionDamage',class'LargeCaliberBulletDamage',class'ReturnValue',class'Other',class'AnimName',class'i',class'PrecacheIndex',class'm_aTarget',class'AnimCtrl',class'WeaponClasses',class'FreeMoveParms',class'm_aTarget',none,class'AIActorFactory',class'JumpAttackParms',class'i',class'm_aTarget',class'm_aTarget',class'i',class'bSucceedOnFail',class'ReturnValue',class'FinishMeControlType',class'm_aTarget',class'm_aTarget',class'AnimIndex',class'bSucceedOnFail',class'ReturnValue',class'PrecacheIndex',class'm_aTarget',none,class'TKObj',class'PrecacheIndex',none,none,none,none,class'DamageInfo',class'PrimaryTarget',class'JumpParms',none,class'PrecacheIndex',class'PrimaryTarget',class'CurrentOp',none,class'TurnToXParms',class'PrecacheIndex',none,none,none,none,class'ReturnValue',class'm_aTarget',class'AnimCtrl',class'j',class'FreeMoveParms',class'm_aTarget',none,class'AIActorFactory',class'JumpAttackParms',class'i',class'm_aTarget',class'm_aTarget',class'i',class'bSucceedOnFail',class'ReturnValue'),FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(1)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(2)=(CurStateIndex=0)
	DamageScaleInfo(3)=(Ident=Wait,Status=0,ReportedInvalid=false,SucCond=1,SucFunc=None,FailCond=1,FailFunc=None,Op=0,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(4)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(5)=(CurStateIndex=0)
	DamageScaleInfo(6)=(Ident=Default,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=85,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(7)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(8)=(CurStateIndex=0)
	DamageScaleInfo(9)=(Ident=FUBAR,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=1,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(10)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(11)=(CurStateIndex=0)
	DamageScaleInfo(12)=(Ident=idle,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=85,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(13)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(14)=(CurStateIndex=0)
	DamageScaleInfo(15)=(Ident=FaceTarget,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=145,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(16)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(17)=(CurStateIndex=0)
	DamageScaleInfo(18)=(Ident=FaceGuardedActor,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=143,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(19)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(20)=(CurStateIndex=0)
	DamageScaleInfo(21)=(Ident=HoldFire,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=82,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(22)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(23)=(CurStateIndex=0)
	DamageScaleInfo(24)=(Ident=ResumeFire,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=105,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(25)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(26)=(CurStateIndex=0)
	DamageScaleInfo(27)=(Ident=Stomp,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=135,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(28)=(StateTable=/* Array type was not detected. */)
	DamageScaleInfo(29)=(CurStateIndex=0)
	DamageScaleInfo(30)=(Ident=Roar,Status=0,ReportedInvalid=false,SucCond=0,SucFunc=None,FailCond=0,FailFunc=None,Op=107,OpRef=0,SharedTransitions=/* Array type was not detected. */)
	DamageScaleInfo(31)=(StateTable=/* Array type was not detected. */)
}