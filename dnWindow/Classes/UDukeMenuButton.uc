/*******************************************************************************
 * UDukeMenuButton generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeMenuButton extends UWindowButton;

var float SelectedTime;
var float TextScaleX;
var float TextScaleY;
var float TextScaleXMod;
var float TextScaleYMod;
var Color DrawColor;
var Color DarkGreyColor;
var bool bOwnSelectionIcon;
var bool bGreyedOut;
var int ButtonIdx;

simulated function Created()
{
	super.Created();
	Tick(0.5);
	return;
}

function bool UseOverTexture()
{
	return __NFUN_339__(ParentWindow.ChildInFocus, self);
	return;
}

function Tick(float Delta)
{
	local float Alpha;
	local Color FadeColour;

	super(UWindowWindow).Tick(Delta);
	// End:0x3D
	if(__NFUN_148__(__NFUN_339__(ParentWindow.ChildInFocus, self), __NFUN_145__(GreyedOut())))
	{
		__NFUN_209__(SelectedTime, Delta);		
	}
	else
	{
		__NFUN_210__(SelectedTime, __NFUN_195__(2, Delta));
	}
	SelectedTime = __NFUN_227__(SelectedTime, 0, class'UWindowScene'.default.SelectionTransitionTime);
	// End:0x88
	if(GreyedOut())
	{
		FadeColour = DarkGreyColor;		
	}
	else
	{
		FadeColour = class'UWindowScene'.default.GreyColor;
	}
	Alpha = __NFUN_196__(SelectedTime, class'UWindowScene'.default.SelectionTransitionTime);
	TextScaleX = __NFUN_228__(Alpha, class'UWindowScene'.default.TTFontScale, __NFUN_195__(class'UWindowScene'.default.SelectedXScale, class'UWindowScene'.default.TTFontScale));
	TextScaleY = __NFUN_228__(Alpha, class'UWindowScene'.default.TTFontScale, __NFUN_195__(class'UWindowScene'.default.SelectedYScale, class'UWindowScene'.default.TTFontScale));
	DrawColor = __NFUN_338__(Alpha, FadeColour, class'UWindowScene'.default.OrangeColor);
	return;
}

function BeforePaint(Canvas C, float X, float Y)
{
	local float W, h;

	super(UWindowDialogControl).BeforePaint(C, X, Y);
	C.DrawColor = DrawColor;
	C.Font = C.TallFont;
	TextSize(C, Text, W, h, __NFUN_195__(TextScaleX, TextScaleXMod), __NFUN_195__(TextScaleY, TextScaleYMod));
	TextY = __NFUN_196__(__NFUN_199__(WinHeight, h), float(2));
	TextX = __NFUN_195__(30, class'UWindowScene'.default.WinScaleY);
	return;
}

function DrawButtonText(Canvas C)
{
	local float TextXL, TextYL;

	C.DrawColor = DrawColor;
	C.Font = C.TallFont;
	TextSize(C, Text, TextXL, TextYL, __NFUN_195__(TextScaleX, TextScaleXMod), __NFUN_195__(TextScaleY, TextScaleYMod));
	ClipText(C, TextX, TextY, Text, false, __NFUN_195__(TextScaleX, TextScaleXMod), __NFUN_195__(TextScaleY, TextScaleYMod), Alpha, 2);
	// End:0x116
	if(__NFUN_148__(__NFUN_339__(ParentWindow.ChildInFocus, self), bOwnSelectionIcon))
	{
		class'UWindowScene'.static.DrawSelectionIcon(C, __NFUN_195__(-8, C.FixedScale), __NFUN_198__(TextY, __NFUN_195__(0.5, TextYL)), C.FixedScale, Alpha);
	}
	return;
}

function GreyOut()
{
	bGreyedOut = true;
	return;
}

function Ungrey()
{
	bGreyedOut = false;
	return;
}

function bool GreyedOut()
{
	return bGreyedOut;
	return;
}

function setTextScaleMod(float X, float Y)
{
	TextScaleXMod = X;
	TextScaleYMod = Y;
	return;
}

function getTextScale(out float X, out float Y)
{
	X = __NFUN_195__(TextScaleX, TextScaleXMod);
	Y = __NFUN_195__(TextScaleY, TextScaleYMod);
	return;
}

defaultproperties
{
	TextScaleXMod=1
	TextScaleYMod=1
	DrawColor=(B=36,G=1,R=192,A=37)
	DarkGreyColor=(B=36,G=1,R=103,A=37)
	bOwnSelectionIcon=true
	bStretched=true
	bSolid=true
	OverRegion=(X=0,Y=16,W=486,h=40)
	bUseRegion=true
}