/*******************************************************************************
 * UDukeSceneControllerConfig generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeSceneControllerConfig extends UDukeSceneExtrasViewer;

struct SControllerSlot
{
	var string InputKey;
	var Vector2D Offset;
	var bool bRightSide;
	var string StaticCommand;
};

struct SConfigLayout
{
	var array<int> ActionMapping;
};

var localized string InventoryWeaponViewHintText;
var Texture XboxTexture;
var Texture PS3Texture;
var SControllerSlot Slots[18];
var localized array<string> ConfigNames;
var localized array<string> Actions;
var array<string> Commands;
var localized array<SConfigLayout> Configs;
var localized array<SConfigLayout> PS3Configs;
var int ConfigIndex;
var bool bNeedProfileSave;
var bool bFirstTick;
var bool bSaveConfigsOnNextTick;

function Created()
{
	local int i;

	super.Created();
	i = 0;
	J0x0D:

	// End:0x3A [Loop If]
	if(__NFUN_169__(i, string(ConfigNames)))
	{
		ListSlider.AddItem(" ");
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x0D;
	}
	FirstControlToFocus = ListSlider;
	ListSlider.SetSelectedIndex(GetPlayerOwner().PrefabConfigIndex);
	ListSlider.Register(self);
	bFirstTick = true;
	return;
}

function DrawMenuContent(Canvas C, float Alpha, Region ClipRegion)
{
	local Texture ControllerTexture;
	local float X, Y, XL, YL, Ratio, AlignX,
		AlignY;

	local int i, temp;
	local string str;
	local float Top;

	super.DrawMenuContent(C, Alpha, ClipRegion);
	// End:0x29
	if(__NFUN_402__())
	{
		ControllerTexture = PS3Texture;		
	}
	else
	{
		ControllerTexture = XboxTexture;
	}
	Ratio = __NFUN_224__(__NFUN_224__(1, __NFUN_196__(__NFUN_195__(0.85, float(ClipRegion.h)), float(ControllerTexture.__NFUN_1192__()))), __NFUN_196__(__NFUN_195__(0.4, float(ClipRegion.W)), float(ControllerTexture.__NFUN_1191__())));
	XL = __NFUN_195__(Ratio, float(ControllerTexture.__NFUN_1191__()));
	YL = __NFUN_195__(Ratio, float(ControllerTexture.__NFUN_1192__()));
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(__NFUN_198__(float(ClipRegion.X), __NFUN_195__(0.5, __NFUN_199__(float(ClipRegion.W), XL))), __NFUN_198__(float(ClipRegion.Y), __NFUN_195__(0.7, __NFUN_199__(float(ClipRegion.h), YL))));
	AlignX = C.CurX;
	AlignY = C.CurY;
	C.__NFUN_1234__(ControllerTexture, XL, YL, 0, 0, float(ControllerTexture.__NFUN_1191__()), float(ControllerTexture.__NFUN_1192__()), 0, 0, 0, true, Alpha);
	i = 0;
	J0x1B3:

	// End:0x36D [Loop If]
	if(__NFUN_169__(i, 18))
	{
		// End:0x1EA
		if(__NFUN_402__())
		{
			str = Actions[PS3Configs[ConfigIndex].ActionMapping[i]];			
		}
		else
		{
			str = Actions[Configs[ConfigIndex].ActionMapping[i]];
		}
		temp = i;
		// End:0x266
		if(__NFUN_402__())
		{
			// End:0x243
			if(__NFUN_150__(__NFUN_173__(temp, 2), __NFUN_173__(temp, 3)))
			{
				__NFUN_180__(temp, 4);				
			}
			else
			{
				// End:0x266
				if(__NFUN_148__(__NFUN_170__(temp, 3), __NFUN_169__(temp, 8)))
				{
					__NFUN_181__(temp, 2);
				}
			}
		}
		C.Font = C.TallFont;
		C.DrawColor = GreyColor;
		C.__NFUN_1238__(str, XL, YL, TTFontScale, TTFontScale);
		C.__NFUN_1250__(__NFUN_198__(AlignX, __NFUN_195__(Ratio, Slots[temp].Offset.X)), __NFUN_198__(AlignY, __NFUN_195__(Ratio, Slots[temp].Offset.Y)));
		// End:0x33F
		if(__NFUN_145__(Slots[temp].bRightSide))
		{
			__NFUN_210__(C.CurX, XL);
		}
		C.__NFUN_1232__(str, false, false, false, TTFontScale, TTFontScale, Alpha);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x1B3;
	}
	str = ConfigNames[ConfigIndex];
	C.Font = C.TallFont;
	C.DrawColor = GreyColor;
	C.__NFUN_1238__(str, XL, YL, __NFUN_195__(TTFontScale, 1.5), __NFUN_195__(TTFontScale, 1.5));
	C.__NFUN_1250__(__NFUN_198__(float(ClipRegion.X), __NFUN_195__(0.5, __NFUN_199__(float(ClipRegion.W), XL))), __NFUN_198__(float(ClipRegion.Y), __NFUN_195__(5, C.FixedScale)));
	C.__NFUN_1232__(str, false, false, false, __NFUN_195__(TTFontScale, 1.5), __NFUN_195__(TTFontScale, 1.5), Alpha);
	// End:0x56E
	if(__NFUN_148__(__NFUN_145__(__NFUN_402__()), GetPlayerOwner().bUse4Weapons))
	{
		C.__NFUN_1238__(InventoryWeaponViewHintText, XL, YL, TTFontScale, TTFontScale);
		Top = __NFUN_199__(KeyButtons[1].WinTop, float(LineRegion.h));
		ClipRegion.h = int(__NFUN_199__(Top, float(ClipRegion.Y)));
		C.__NFUN_1250__(__NFUN_198__(float(ClipRegion.X), __NFUN_195__(0.5, __NFUN_199__(float(ClipRegion.W), XL))), __NFUN_198__(float(ClipRegion.Y), __NFUN_195__(430, C.FixedScale)));
		C.__NFUN_1232__(InventoryWeaponViewHintText, false, false, false, TTFontScale, TTFontScale, Alpha);
	}
	return;
}

function Tick(float Delta)
{
	super.Tick(Delta);
	// End:0x1F
	if(bFirstTick)
	{
		ChildInFocus = ListSlider;
	}
	// End:0x47
	if(bSaveConfigsOnNextTick)
	{
		bSaveConfigsOnNextTick = false;
		ApplyConfig(GetPlayerOwner(), ConfigIndex);
		SaveConfigs();
	}
	return;
}

function NotifyFromControl(UWindowDialogControl C, byte E)
{
	super(UWindowScene).NotifyFromControl(C, E);
	ConfigIndex = ListSlider.GetSelectedIndex();
	bNeedProfileSave = true;
	return;
}

static function bool AdjustHandBrake(int ConfigIndex)
{
	// End:0x21
	if(__NFUN_402__())
	{
		return __NFUN_173__(default.PS3Configs[ConfigIndex].ActionMapping[11], 8);		
	}
	else
	{
		return __NFUN_173__(default.Configs[ConfigIndex].ActionMapping[11], 8);
	}
	return;
}

static final function ApplyConfig(PlayerPawn Owner, int ConfigIndex)
{
	local int i, ActionIndex;
	local string Command, CmdOp;
	local bool bAdjustHandBrake;

	bAdjustHandBrake = AdjustHandBrake(ConfigIndex);
	i = 0;
	J0x19:

	// End:0x259 [Loop If]
	if(__NFUN_169__(i, 18))
	{
		// End:0x41
		if(__NFUN_171__(__NFUN_314__(default.Slots[i].InputKey), 0))
		{
			// [Explicit Continue]
			goto J0x24F;
		}
		// End:0x6C
		if(__NFUN_402__())
		{
			Command = default.Commands[default.PS3Configs[ConfigIndex].ActionMapping[i]];			
		}
		else
		{
			Command = default.Commands[default.Configs[ConfigIndex].ActionMapping[i]];
		}
		// End:0xE8
		if(__NFUN_148__(__NFUN_402__(), __NFUN_150__(__NFUN_173__(i, 8), __NFUN_173__(i, 9))))
		{
			// End:0xE5
			if(__NFUN_173__(i, 9))
			{
				Command = __NFUN_303__(__NFUN_303__(Command, "|"), "DnControlFireAction");
			}			
		}
		else
		{
			// End:0x140
			if(__NFUN_148__(__NFUN_402__(), __NFUN_150__(__NFUN_173__(i, 0), __NFUN_173__(i, 1))))
			{
				// End:0x13D
				if(__NFUN_173__(i, 1))
				{
					Command = __NFUN_303__(__NFUN_303__(Command, "|"), "DnControlMeleeAction");
				}				
			}
			else
			{
				// End:0x17D
				if(__NFUN_170__(__NFUN_314__(default.Slots[i].StaticCommand), 0))
				{
					Command = __NFUN_303__(__NFUN_303__(Command, "|"), default.Slots[i].StaticCommand);
				}
			}
		}
		// End:0x1D5
		if(__NFUN_150__(__NFUN_148__(__NFUN_173__(i, 13), bAdjustHandBrake), __NFUN_148__(__NFUN_173__(i, 11), __NFUN_145__(bAdjustHandBrake))))
		{
			Command = __NFUN_303__(__NFUN_303__(Command, "|"), "VehicleHandBrake");
		}
		// End:0x203
		if(__NFUN_148__(__NFUN_148__(__NFUN_173__(i, 17), __NFUN_145__(__NFUN_402__())), __NFUN_145__(__NFUN_401__())))
		{
			CmdOp = "set";			
		}
		else
		{
			CmdOp = "setnosave";
		}		
		Owner.ConsoleCommand(__NFUN_303__(__NFUN_303__(__NFUN_303__(CmdOp, "input"), default.Slots[i].InputKey), Command));
		J0x24F:

		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x19;
	}	
	Owner.ConsoleCommand("LOADSPECIALKEYS");
	return;
}

function SaveConfigs()
{
	GetPlayerOwner().ConsoleCommand("LoadSpecialKeys");
	// End:0x69
	if(bNeedProfileSave)
	{
		GetPlayerOwner().PrefabConfigIndex = ConfigIndex;
		GetPlayerOwner().__NFUN_368__();
		GetPlayerOwner().XBoxSaveProfile();
		bNeedProfileSave = false;
	}
	super(UWindowWindow).SaveConfigs();
	return;
}

function OnNavForward()
{
	ConfigIndex = GetPlayerOwner().PrefabConfigIndex;
	ListSlider.SetSelectedIndex(ConfigIndex);
	super.OnNavForward();
	return;
}

function PreNavigateBack()
{
	local UDukeRootWindow DukeRoot;
	local PlayerPawn Player;

	DukeRoot = UDukeRootWindow(Root);
	// End:0xB8
	if(__NFUN_148__(__NFUN_340__(DukeRoot, none), __NFUN_170__(string(DukeRoot.Scenes), 1)))
	{
		DukeRoot.Scenes[__NFUN_166__(string(DukeRoot.Scenes), 2)].bSuppressSoundOnNavReturn = true;
		Player = GetPlayerOwner();
		Player.PlaySoundInfo(0, SoundNavigateBackInfo);
		Player.ZoomUp();
		Player.MeleeUp();
		Player.FireUp();
	}
	bSaveConfigsOnNextTick = true;
	super.PreNavigateBack();
	return;
}

defaultproperties
{
	InventoryWeaponViewHintText="<?int?dnWindow.UDukeSceneControllerConfig.InventoryWeaponViewHintText?>"
	XboxTexture='Menu.Menu.XBox_Controller'
	PS3Texture='Menu.Menu.PS3_Controller'
	Slots[0]=(InputKey="Joy15",Offset=(X=1.291717E-41,Y=2.8136E-17))
	Slots[1]=(InputKey="Joy9",Offset=(X=1.291717E-41,Y=2.8136E-17))
	Slots[2]=(InputKey="",Offset=(X=1.291717E-41,Y=2.8136E-17))
	Slots[3]=(InputKey="Joy7",Offset=(X=1.291717E-41,Y=2.8136E-17))
	Slots[4]=(InputKey="Joy1",Offset=(X=1.291717E-41,Y=2.8136E-17))
	Slots[5]=(InputKey="Joy3",Offset=(X=1.291717E-41,Y=2.8136E-17))
	Slots[6]=(InputKey="Joy2",Offset=(X=1.291717E-41,Y=2.8136E-17))
	Slots[7]=(InputKey="Joy4",Offset=(X=1.291717E-41,Y=2.8136E-17))
	Slots[8]=(InputKey="Joy16",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[9]=(InputKey="Joy10",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[10]=(InputKey="Joy14",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[11]=(InputKey="Joy12",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[12]=(InputKey="Joy11",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[13]=(InputKey="Joy13",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[14]=(InputKey="",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[15]=(InputKey="Joy8",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[16]=(InputKey="Joy5",Offset=(X=-1.291717E-41,Y=2.803002E-17))
	Slots[17]=(InputKey="Joy6",Offset=(X=1.291717E-41,Y=2.8136E-17))
	ConfigNames(0)="Default Half Life 2 Halo 3 Modern Warfare 2"
	ConfigNames(1)=
/* Exception thrown while deserializing ConfigNames
System.IO.EndOfStreamException: Unable to read beyond the end of the stream.
   at System.IO.BinaryReader.ReadByte()
   at UELib.UnrealReader.ReadText() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\UnrealStream.cs:line 174
   at UELib.UObjectStream.ReadText() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\UnrealStream.cs:line 722
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 447 */
	ConfigNames(2)=
/* Exception thrown while deserializing ConfigNames
System.IO.EndOfStreamException: Unable to read beyond the end of the stream.
   at System.IO.BinaryReader.ReadByte()
   at UELib.UnrealReader.ReadIndex() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\UnrealStream.cs:line 268
   at UELib.UnrealReader.ReadText() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\UnrealStream.cs:line 156
   at UELib.UObjectStream.ReadText() in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\UnrealStream.cs:line 722
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) in E:\SteamLibrary\steamapps\common\DukeNukem\Tools\UnrealscriptDecompiler\Core\Classes\UDefaultProperty.cs:line 447 */
	NavigateForward=Function'UDukeSceneMultiPlayerMenuLobby.ResetHelpButtons'
}