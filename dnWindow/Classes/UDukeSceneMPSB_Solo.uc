/*******************************************************************************
 * UDukeSceneMPSB_Solo generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UDukeSceneMPSB_Solo extends UDukeSceneMultiPlayerScoreboardBase
	config;

var UDukeScoreboardEntry Entries[8];
var array<int> TiedPRIIndex;
var int SelectedIndex;

function Created()
{
	local int maxPlayersInGame, i;

	super.Created();
	i = 0;
	J0x0D:

	// End:0xEE [Loop If]
	if(__NFUN_169__(i, 8))
	{
		Entries[i] = UDukeScoreboardEntry(CreateWindow(class'UDukeScoreboardEntry', 1, 1, 1, 1));
		Entries[i].SetPRIIndex(-1);
		Entries[i].Register(self);
		Entries[i].HideWindow();
		// End:0xE4
		if(__NFUN_170__(i, 0))
		{
			Entries[__NFUN_166__(i, 1)].NavDown = Entries[i];
			Entries[i].NavUp = Entries[__NFUN_166__(i, 1)];
		}
		__NFUN_182__(i);
		// [Loop Continue]
		goto J0x0D;
	}
	Entries[0].NavUp = Entries[__NFUN_166__(8, 1)];
	Entries[__NFUN_166__(8, 1)].NavDown = Entries[0];
	ChildInFocus = Entries[0];
	return;
}

function int SortScores()
{
	local int i, j, Max, TempInt;
	local array<PlayerReplicationInfo> PRIArray;
	local PlayerPawn P;
	local int Count;

	P = GetPlayerOwner();
	// End:0x32
	if(__NFUN_150__(__NFUN_339__(P, none), __NFUN_339__(P.GameReplicationInfo, none)))
	{
		return 0;
	}
	PRIArray = P.GameReplicationInfo.PRIArray;
	Count = 0;
	i = 0;
	J0x5F:

	// End:0xAC [Loop If]
	if(__NFUN_169__(i, string(PRIArray)))
	{
		// End:0xA2
		if(__NFUN_145__(PRIArray[i].bIsABot))
		{
			OrderedPRIIndex[Count] = i;
			__NFUN_184__(Count);
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x5F;
	}
	i = 0;
	J0xB3:

	// End:0x1E4 [Loop If]
	if(__NFUN_169__(i, __NFUN_166__(Count, 1)))
	{
		j = __NFUN_165__(i, 1);
		J0xD3:

		// End:0x1DA [Loop If]
		if(__NFUN_169__(j, Count))
		{
			// End:0x1D0
			if(__NFUN_150__(__NFUN_170__(PRIArray[OrderedPRIIndex[j]].Score, PRIArray[OrderedPRIIndex[i]].Score), __NFUN_148__(__NFUN_173__(PRIArray[OrderedPRIIndex[j]].Score, PRIArray[OrderedPRIIndex[i]].Score), __NFUN_169__(PRIArray[OrderedPRIIndex[j]].Deaths, PRIArray[OrderedPRIIndex[i]].Deaths))))
			{
				TempInt = OrderedPRIIndex[j];
				OrderedPRIIndex[j] = OrderedPRIIndex[i];
				OrderedPRIIndex[i] = TempInt;
			}
			__NFUN_184__(j);
			// [Loop Continue]
			goto J0xD3;
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0xB3;
	}
	return Count;
	return;
}

function UpdatePlayerList()
{
	local int i, Counter, PlayerCount;
	local PlayerPawn P;

	P = GetPlayerOwner();
	// End:0x32
	if(__NFUN_150__(__NFUN_339__(P, none), __NFUN_339__(P.GameReplicationInfo, none)))
	{
		return;
	}
	i = 0;
	J0x39:

	// End:0x60 [Loop If]
	if(__NFUN_169__(i, 8))
	{
		OrderedPRIIndex[i] = i;
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x39;
	}
	i = 0;
	J0x67:

	// End:0x98 [Loop If]
	if(__NFUN_169__(i, 8))
	{
		Entries[i].SetPRIIndex(-1);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x67;
	}
	PlayerCount = SortScores();
	Counter = 0;
	i = 0;
	J0xB2:

	// End:0x129 [Loop If]
	if(__NFUN_169__(i, PlayerCount))
	{
		// End:0xF7
		if(P.GameReplicationInfo.PRIArray[OrderedPRIIndex[i]].bIsABot)
		{
			// [Explicit Continue]
			goto J0x11F;
		}
		Entries[Counter].SetPRIIndex(OrderedPRIIndex[i]);
		__NFUN_184__(Counter);
		J0x11F:

		__NFUN_184__(i);
		// [Loop Continue]
		goto J0xB2;
	}
	return;
}

function BeforePaint(Canvas C, float X, float Y)
{
	super.BeforePaint(C, X, Y);
	UpdatePlayerList();
	return;
}

function Paint(Canvas C, float X, float Y)
{
	local int i;
	local float XL, YL, NewX, FontScale, LvOffset, StandardOffset;

	super.Paint(C, X, Y);
	WinHalf = __NFUN_196__(WinWidth, float(2));
	WinQuarter = __NFUN_196__(WinHalf, float(4));
	WinEighth = __NFUN_196__(WinHalf, float(8));
	StandardOffset = __NFUN_195__(WinEighth, 1.5);
	C.Font = C.TallFont;
	C.DrawColor.R = 255;
	C.DrawColor.G = 255;
	C.DrawColor.B = 255;
	HeaderY = TopOffsetValue;
	FontScale = class'UWindowScene'.default.TTFontScale;
	C.DrawColor.R = 200;
	C.DrawColor.G = 200;
	C.DrawColor.B = 200;
	LvOffset = __NFUN_195__(class'UDukeScoreboardEntry'.default.NameOffset, 1);
	__NFUN_209__(LvOffset, __NFUN_198__(__NFUN_196__(PanelHeight, 2), float(10)));
	__NFUN_209__(HeaderY, DrawLabels(C, HeaderY));
	__NFUN_209__(HeaderY, HeaderEntryOffset);
	TextSize(C, "WWW", XL, YL, FontScale, FontScale);
	Entries[0].WinTop = HeaderY;
	Entries[0].WinLeft = 0;
	Entries[0].WinHeight = YL;
	Entries[0].WinWidth = WinWidth;
	Entries[0].ShowWindow();
	__NFUN_209__(HeaderY, YL);
	i = 1;
	J0x21C:

	// End:0x2F0 [Loop If]
	if(__NFUN_169__(i, NumOfPlayersInGame))
	{
		Entries[i].WinLeft = 0;
		Entries[i].WinTop = __NFUN_198__(Entries[__NFUN_166__(i, 1)].WinTop, Entries[__NFUN_166__(i, 1)].WinHeight);
		Entries[i].WinHeight = YL;
		Entries[i].WinWidth = WinWidth;
		Entries[i].ShowWindow();
		__NFUN_209__(HeaderY, YL);
		__NFUN_182__(i);
		// [Loop Continue]
		goto J0x21C;
	}
	__NFUN_209__(HeaderY, __NFUN_195__(YL, float(__NFUN_166__(8, NumOfPlayersInGame))));
	DrawVerticalGridlines(C, Entries[0].WinTop, __NFUN_195__(Entries[0].WinHeight, float(8)));
	return;
}

function bool IsGameTied()
{
	local int i, CheckScore, CheckDeaths;
	local array<PlayerReplicationInfo> PRIArray;
	local PlayerPawn P;

	P = GetPlayerOwner();
	// End:0x32
	if(__NFUN_150__(__NFUN_339__(P, none), __NFUN_339__(P.GameReplicationInfo, none)))
	{
		return false;
	}
	PRIArray = P.GameReplicationInfo.PRIArray;
	TiedPRIIndex.Remove(0, string(TiedPRIIndex));
	// End:0x1D8
	if(__NFUN_148__(__NFUN_148__(__NFUN_169__(OrderedPRIIndex[0], string(PRIArray)), __NFUN_169__(OrderedPRIIndex[1], string(PRIArray))), __NFUN_173__(PRIArray[OrderedPRIIndex[0]].Score, PRIArray[OrderedPRIIndex[1]].Score)))
	{
		// End:0x1D6
		if(__NFUN_173__(PRIArray[OrderedPRIIndex[0]].Deaths, PRIArray[OrderedPRIIndex[1]].Deaths))
		{
			TiedPRIIndex[string(TiedPRIIndex)] = 0;
			TiedPRIIndex[string(TiedPRIIndex)] = 1;
			CheckScore = PRIArray[OrderedPRIIndex[0]].Score;
			CheckDeaths = PRIArray[OrderedPRIIndex[0]].Deaths;
			i = 2;
			J0x14A:

			// End:0x1D6 [Loop If]
			if(__NFUN_169__(i, 8))
			{
				// End:0x1CC
				if(__NFUN_148__(__NFUN_169__(OrderedPRIIndex[i], string(PRIArray)), __NFUN_148__(__NFUN_173__(PRIArray[OrderedPRIIndex[i]].Score, CheckScore), __NFUN_173__(PRIArray[OrderedPRIIndex[i]].Deaths, CheckDeaths))))
				{
					TiedPRIIndex[string(TiedPRIIndex)] = i;
				}
				__NFUN_182__(i);
				// [Loop Continue]
				goto J0x14A;
			}
		}
		return true;
	}
	return false;
	return;
}

function float DetermineSize(Canvas C)
{
	local int i;
	local float XL, YL, first;

	C.Font = C.TallFont;
	TextSize(C, "WWW", XL, YL, class'UWindowScene'.default.TTFontScale, class'UWindowScene'.default.TTFontScale);
	HeaderY = TopOffsetValue;
	__NFUN_209__(HeaderY, DrawLabels(C, HeaderY, true));
	__NFUN_209__(HeaderY, HeaderEntryOffset);
	__NFUN_209__(HeaderY, YL);
	i = 1;
	J0x99:

	// End:0xBB [Loop If]
	if(__NFUN_169__(i, 8))
	{
		__NFUN_209__(HeaderY, YL);
		__NFUN_182__(i);
		// [Loop Continue]
		goto J0x99;
	}
	return HeaderY;
	return;
}

function float DrawLabels(Canvas C, float YStart, optional bool bNoDraw)
{
	local float XL, YL, NewX;
	local string tmpStr;
	local float FontScale, LvOffset, StandardOffset;

	C.DrawColor = class'UWindowScene'.default.GreyColor;
	FontScale = class'UWindowScene'.default.TTFontScale;
	LvOffset = __NFUN_195__(class'UDukeScoreboardEntry'.default.NameOffset, 1);
	__NFUN_209__(LvOffset, __NFUN_198__(__NFUN_196__(PanelHeight, 2), float(10)));
	StandardOffset = __NFUN_195__(WinEighth, 1.5);
	TextSize(C, LevelLabel, XL, YL, FontScale, FontScale);
	// End:0xD4
	if(__NFUN_145__(bNoDraw))
	{
		ClipText(C, LvOffset, YStart, LevelLabel,, FontScale, FontScale,, 2);
	}
	NameStringOffsetX = __NFUN_198__(LvOffset, StandardOffset);
	TextSize(C, PlayerName, XL, YL, FontScale, FontScale);
	// End:0x140
	if(__NFUN_145__(bNoDraw))
	{
		ClipText(C, NameStringOffsetX, YStart, PlayerName,, FontScale, FontScale,, 2);
	}
	NewX = __NFUN_199__(__NFUN_198__(WinHalf, WinEighth), StandardOffset);
	TextSize(C, Score, XL, YL, FontScale, FontScale);
	// End:0x1B3
	if(__NFUN_145__(bNoDraw))
	{
		ClipText(C, NewX, YStart, Score,, FontScale, FontScale,, 2);
	}
	__NFUN_209__(NewX, StandardOffset);
	TextSize(C, KillStr, XL, YL, FontScale, FontScale);
	// End:0x219
	if(__NFUN_145__(bNoDraw))
	{
		ClipText(C, NewX, YStart, KillStr,, FontScale, FontScale,, 2);
	}
	__NFUN_209__(NewX, StandardOffset);
	TextSize(C, DeathStr, XL, YL, FontScale, FontScale);
	// End:0x27F
	if(__NFUN_145__(bNoDraw))
	{
		ClipText(C, NewX, YStart, DeathStr,, FontScale, FontScale,, 2);
	}
	__NFUN_209__(NewX, StandardOffset);
	TextSize(C, Ping, XL, YL, FontScale, FontScale);
	// End:0x2E5
	if(__NFUN_145__(bNoDraw))
	{
		ClipText(C, NewX, YStart, Ping,, FontScale, FontScale,, 2);
	}
	__NFUN_209__(NewX, StandardOffset);
	TextSize(C, VoiceStr, XL, YL, FontScale, FontScale);
	// End:0x34B
	if(__NFUN_145__(bNoDraw))
	{
		ClipText(C, NewX, YStart, VoiceStr,, FontScale, FontScale,, 2);
	}
	return YL;
	return;
}

defaultproperties
{
	NameStringOffsetX=15
	PanelHeight=35
	VGridLine='Menu.MP.Divider_Vert'
}