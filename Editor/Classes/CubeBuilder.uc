/*******************************************************************************
 * CubeBuilder generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CubeBuilder extends BrushBuilder;

var() float Height_Z;
var() float Width_Y;
var() float Breadth_X;
var() float WallThickness;
var() name GroupName;
var() bool Hollow;
var() bool Tessellated;

function BuildCube(int Direction, float dx, float dy, float dz, bool _tessellated)
{
	local int n, i, j, K;

	n = GetVertexCount();
	i = -1;
	J0x17:

	// End:0xB1 [Loop If]
	if(__NFUN_169__(i, 2))
	{
		j = -1;
		J0x2E:

		// End:0xA5 [Loop If]
		if(__NFUN_169__(j, 2))
		{
			K = -1;
			J0x45:

			// End:0x99 [Loop If]
			if(__NFUN_169__(K, 2))
			{
				Vertex3f(__NFUN_196__(__NFUN_195__(float(i), dx), float(2)), __NFUN_196__(__NFUN_195__(float(j), dy), float(2)), __NFUN_196__(__NFUN_195__(float(K), dz), float(2)));
				__NFUN_180__(K, 2);
				// [Loop Continue]
				goto J0x45;
			}
			__NFUN_180__(j, 2);
			// [Loop Continue]
			goto J0x2E;
		}
		__NFUN_180__(i, 2);
		// [Loop Continue]
		goto J0x17;
	}
	// End:0x27C
	if(_tessellated)
	{
		Poly3i(Direction, __NFUN_165__(n, 0), __NFUN_165__(n, 1), __NFUN_165__(n, 3));
		Poly3i(Direction, __NFUN_165__(n, 0), __NFUN_165__(n, 3), __NFUN_165__(n, 2));
		Poly3i(Direction, __NFUN_165__(n, 2), __NFUN_165__(n, 3), __NFUN_165__(n, 7));
		Poly3i(Direction, __NFUN_165__(n, 2), __NFUN_165__(n, 7), __NFUN_165__(n, 6));
		Poly3i(Direction, __NFUN_165__(n, 6), __NFUN_165__(n, 7), __NFUN_165__(n, 5));
		Poly3i(Direction, __NFUN_165__(n, 6), __NFUN_165__(n, 5), __NFUN_165__(n, 4));
		Poly3i(Direction, __NFUN_165__(n, 4), __NFUN_165__(n, 5), __NFUN_165__(n, 1));
		Poly3i(Direction, __NFUN_165__(n, 4), __NFUN_165__(n, 1), __NFUN_165__(n, 0));
		Poly3i(Direction, __NFUN_165__(n, 3), __NFUN_165__(n, 1), __NFUN_165__(n, 5));
		Poly3i(Direction, __NFUN_165__(n, 3), __NFUN_165__(n, 5), __NFUN_165__(n, 7));
		Poly3i(Direction, __NFUN_165__(n, 0), __NFUN_165__(n, 2), __NFUN_165__(n, 6));
		Poly3i(Direction, __NFUN_165__(n, 0), __NFUN_165__(n, 6), __NFUN_165__(n, 4));		
	}
	else
	{
		Poly4i(Direction, __NFUN_165__(n, 0), __NFUN_165__(n, 1), __NFUN_165__(n, 3), __NFUN_165__(n, 2));
		Poly4i(Direction, __NFUN_165__(n, 2), __NFUN_165__(n, 3), __NFUN_165__(n, 7), __NFUN_165__(n, 6));
		Poly4i(Direction, __NFUN_165__(n, 6), __NFUN_165__(n, 7), __NFUN_165__(n, 5), __NFUN_165__(n, 4));
		Poly4i(Direction, __NFUN_165__(n, 4), __NFUN_165__(n, 5), __NFUN_165__(n, 1), __NFUN_165__(n, 0));
		Poly4i(Direction, __NFUN_165__(n, 3), __NFUN_165__(n, 1), __NFUN_165__(n, 5), __NFUN_165__(n, 7));
		Poly4i(Direction, __NFUN_165__(n, 0), __NFUN_165__(n, 2), __NFUN_165__(n, 6), __NFUN_165__(n, 4));
	}
	return;
}

event bool Build()
{
	// End:0x2F
	if(__NFUN_150__(__NFUN_150__(__NFUN_202__(Height_Z, float(0)), __NFUN_202__(Width_Y, float(0))), __NFUN_202__(Breadth_X, float(0))))
	{
		return BadParameters();
	}
	// End:0x72
	if(__NFUN_148__(Hollow, __NFUN_150__(__NFUN_150__(__NFUN_202__(Height_Z, WallThickness), __NFUN_202__(Width_Y, WallThickness)), __NFUN_202__(Breadth_X, WallThickness))))
	{
		return BadParameters();
	}
	// End:0xD4
	if(__NFUN_148__(Hollow, Tessellated))
	{
		return BadParameters("The 'Tessellated' option can't be specified with the 'Hollow' option.");
	}
	BeginBrush(false, GroupName);
	BuildCube(1, Breadth_X, Width_Y, Height_Z, Tessellated);
	// End:0x13A
	if(Hollow)
	{
		BuildCube(-1, __NFUN_199__(Breadth_X, WallThickness), __NFUN_199__(Width_Y, WallThickness), __NFUN_199__(Height_Z, WallThickness), Tessellated);
	}
	return EndBrush();
	return;
}

defaultproperties
{
	Height_Z=256
	Width_Y=256
	Breadth_X=256
	WallThickness=16
	GroupName=Cube
	BitmapFilename="BBCube"
	ToolTip="Cube"
}