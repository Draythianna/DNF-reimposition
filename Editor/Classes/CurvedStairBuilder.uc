/*******************************************************************************
 * CurvedStairBuilder generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CurvedStairBuilder extends BrushBuilder;

var() int InnerRadius;
var() int StepHeight;
var() int StepWidth;
var() int AngleOfCurve;
var() int NumSteps;
var() int AddToFirstStep;
var() name GroupName;
var() bool CounterClockwise;

function BuildCurvedStair(int Direction)
{
	local Rotator RotStep;
	local Vector vtx, NewVtx;
	local int X, Z, InnerStart, OuterStart, BottomInnerStart, BottomOuterStart,
		Adjustment;

	RotStep.Yaw = __NFUN_163__(int(__NFUN_195__(float(65536), __NFUN_196__(float(AngleOfCurve), 360))), NumSteps);
	// End:0x50
	if(CounterClockwise)
	{
		__NFUN_178__(RotStep.Yaw, float(-1));
		__NFUN_178__(Direction, float(-1));
	}
	InnerStart = GetVertexCount();
	vtx.X = float(InnerRadius);
	X = 0;
	J0x74:

	// End:0x12D [Loop If]
	if(__NFUN_169__(X, __NFUN_165__(NumSteps, 1)))
	{
		// End:0x9F
		if(__NFUN_173__(X, 0))
		{
			Adjustment = AddToFirstStep;			
		}
		else
		{
			Adjustment = 0;
		}
		NewVtx = __NFUN_241__(vtx, __NFUN_266__(RotStep, float(X)));
		Vertex3f(NewVtx.X, NewVtx.Y, __NFUN_199__(vtx.Z, float(Adjustment)));
		__NFUN_209__(vtx.Z, float(StepHeight));
		Vertex3f(NewVtx.X, NewVtx.Y, vtx.Z);
		__NFUN_184__(X);
		// [Loop Continue]
		goto J0x74;
	}
	OuterStart = GetVertexCount();
	vtx.X = float(__NFUN_165__(InnerRadius, StepWidth));
	vtx.Z = 0;
	X = 0;
	J0x168:

	// End:0x221 [Loop If]
	if(__NFUN_169__(X, __NFUN_165__(NumSteps, 1)))
	{
		// End:0x193
		if(__NFUN_173__(X, 0))
		{
			Adjustment = AddToFirstStep;			
		}
		else
		{
			Adjustment = 0;
		}
		NewVtx = __NFUN_241__(vtx, __NFUN_266__(RotStep, float(X)));
		Vertex3f(NewVtx.X, NewVtx.Y, __NFUN_199__(vtx.Z, float(Adjustment)));
		__NFUN_209__(vtx.Z, float(StepHeight));
		Vertex3f(NewVtx.X, NewVtx.Y, vtx.Z);
		__NFUN_184__(X);
		// [Loop Continue]
		goto J0x168;
	}
	BottomInnerStart = GetVertexCount();
	vtx.X = float(InnerRadius);
	vtx.Z = 0;
	X = 0;
	J0x255:

	// End:0x2B8 [Loop If]
	if(__NFUN_169__(X, __NFUN_165__(NumSteps, 1)))
	{
		NewVtx = __NFUN_241__(vtx, __NFUN_266__(RotStep, float(X)));
		Vertex3f(NewVtx.X, NewVtx.Y, __NFUN_199__(vtx.Z, float(AddToFirstStep)));
		__NFUN_184__(X);
		// [Loop Continue]
		goto J0x255;
	}
	BottomOuterStart = GetVertexCount();
	vtx.X = float(__NFUN_165__(InnerRadius, StepWidth));
	X = 0;
	J0x2E3:

	// End:0x346 [Loop If]
	if(__NFUN_169__(X, __NFUN_165__(NumSteps, 1)))
	{
		NewVtx = __NFUN_241__(vtx, __NFUN_266__(RotStep, float(X)));
		Vertex3f(NewVtx.X, NewVtx.Y, __NFUN_199__(vtx.Z, float(AddToFirstStep)));
		__NFUN_184__(X);
		// [Loop Continue]
		goto J0x2E3;
	}
	X = 0;
	J0x34D:

	// End:0x504 [Loop If]
	if(__NFUN_169__(X, NumSteps))
	{
		Poly4i(Direction, __NFUN_165__(__NFUN_165__(InnerStart, __NFUN_162__(X, 2)), 2), __NFUN_165__(__NFUN_165__(InnerStart, __NFUN_162__(X, 2)), 1), __NFUN_165__(__NFUN_165__(OuterStart, __NFUN_162__(X, 2)), 1), __NFUN_165__(__NFUN_165__(OuterStart, __NFUN_162__(X, 2)), 2), 'steptop');
		Poly4i(Direction, __NFUN_165__(__NFUN_165__(InnerStart, __NFUN_162__(X, 2)), 1), __NFUN_165__(InnerStart, __NFUN_162__(X, 2)), __NFUN_165__(OuterStart, __NFUN_162__(X, 2)), __NFUN_165__(__NFUN_165__(OuterStart, __NFUN_162__(X, 2)), 1), 'stepfront');
		Poly4i(Direction, __NFUN_165__(BottomInnerStart, X), __NFUN_165__(__NFUN_165__(InnerStart, __NFUN_162__(X, 2)), 1), __NFUN_165__(__NFUN_165__(InnerStart, __NFUN_162__(X, 2)), 2), __NFUN_165__(__NFUN_165__(BottomInnerStart, X), 1), 'innercurve');
		Poly4i(Direction, __NFUN_165__(__NFUN_165__(OuterStart, __NFUN_162__(X, 2)), 1), __NFUN_165__(BottomOuterStart, X), __NFUN_165__(__NFUN_165__(BottomOuterStart, X), 1), __NFUN_165__(__NFUN_165__(OuterStart, __NFUN_162__(X, 2)), 2), 'outercurve');
		Poly4i(Direction, __NFUN_165__(BottomInnerStart, X), __NFUN_165__(__NFUN_165__(BottomInnerStart, X), 1), __NFUN_165__(__NFUN_165__(BottomOuterStart, X), 1), __NFUN_165__(BottomOuterStart, X), 'Bottom');
		__NFUN_184__(X);
		// [Loop Continue]
		goto J0x34D;
	}
	Poly4i(Direction, __NFUN_165__(BottomInnerStart, NumSteps), __NFUN_165__(InnerStart, __NFUN_162__(NumSteps, 2)), __NFUN_165__(OuterStart, __NFUN_162__(NumSteps, 2)), __NFUN_165__(BottomOuterStart, NumSteps), 'Back');
	return;
}

function bool Build()
{
	local int i, j, K;

	// End:0x39
	if(__NFUN_150__(__NFUN_169__(AngleOfCurve, 1), __NFUN_170__(AngleOfCurve, 360)))
	{
		return BadParameters("Angle is out of range.");
	}
	// End:0x65
	if(__NFUN_150__(__NFUN_150__(__NFUN_169__(InnerRadius, 1), __NFUN_169__(StepWidth, 1)), __NFUN_169__(NumSteps, 1)))
	{
		return BadParameters();
	}
	BeginBrush(false, GroupName);
	BuildCurvedStair(1);
	return EndBrush();
	return;
}

defaultproperties
{
	InnerRadius=240
	StepHeight=16
	StepWidth=256
	AngleOfCurve=90
	NumSteps=4
	GroupName=CStair
	BitmapFilename="BBCurvedStair"
	ToolTip="Curved Staircase"
}