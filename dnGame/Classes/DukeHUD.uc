/*******************************************************************************
 * DukeHUD generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DukeHUD extends HUD
	native
	collapsecategories
	dependson(dnGrenade)
	dependson(TriggerPlayer)
	dependson(dnQuestItem)
	dependson(VehicleSpaceBase)
	dependson(VehicleBase)
	dependson(MP_PipeBombBase)
	dependson(TripMine)
	dependson(PipeBomb)
	dependson(Detonator);

enum EWeaponSelectPosition
{
	WSP_Up,
	WSP_Down,
	WSP_Left,
	WSP_Right
};

struct SquareRegion
{
	var() int X;
	var() int Y;
	var() int W;
	var() int h;
};

struct SClassPackageEntry
{
	var name Package;
	var name XClass;
};

struct SQuestItemHUDInfo
{
	var class<dnQuestItem> Class;
	var float Alpha;
	var float AlphaTarget;
	var float GlowAlpha;
	var float GlowAlphaTarget;
	var float GlowHoldTime;
};

struct SPickupEvent
{
	var float EventTime;
	var MaterialEx EventTexture;
	var float EventNumber;
	var Color EventColor;
};

struct SInteractKeyInfoText
{
	var() string String;
	var() string Description;
	var() float Alpha;
};

struct SInteractKeyInfo
{
	var() noexport float OffsetX "X-offset from HUDAnchor.";
	var() noexport float OffsetY "Base Y-offset from HUDAnchor.";
	var() noexport float Alpha "Current alpha of this key info box";
	var() noexport float TargetAlpha "Target alpha of this key info box";
	var() noexport SInteractKeyInfoText Text "Current text that could be fading in.";
	var() noexport array<SInteractKeyInfoText> OldTexts "Old texts that are fading out.";
	var() noexport bool bTap "Tap bounce?  Makes the info bounce up and down to indicate that tapping is needed.";
	var() noexport bool bHighlight "Are we highlighted?";
	var() noexport bool bAttachToHUD "If true, the alpha for this SInteractKeyInfo will be controlled by HUDAlpha.";
	var() noexport float DrawScale "If non zero, this will be used to scale the image drawn.";
	var() noexport Engine.Actor.EHUDAnchor HUDAnchor "Position that Offset X and Y are relative to.";
};

struct SWeaponSelectEntry
{
	var Weapon TheWeapon;
	var string Name;
	var MaterialEx Icon;
	var int AmmoCount;
};

var Pawn PawnOwner;
var float OldClipX;
var float OldClipY;
var bool bHideHUD;
var bool bNoDraw;
var Color TextColor;
var Color HUDColor;
var Color TextAltColor;
var array<HUDLocalizedMessage> MessageQueue;
var float HUDTimeSeconds;
var bool bTitleDisplayed;
var MaterialEx TitleBackgroundMaterial;
var float TitleBackgroundPadding;
var float DesiredIndexTop;
var float RootIndexTop;
var float IndexTop;
var float IndexBottom;
var float IndexAdjust;
var int ItemSpace;
var InteractiveActor OldLookActor;
var InteractiveActor LookActor;
var float LookPopoutTimer;
var int UseInfoPosition;
var float StaticTime;
var float StaticLength;
var float CursorTime;
var bool TypingCursor;
var array<MaterialEx> CrosshairTextures;
var float CrosshairAlpha;
var bool bCrossHairColorSet;
var transient bool bNotFirstDraw;
var float TitleBarYPos;
var float TitleBarHeight;
var float TitleBarTextYPos;
var localized string CheckpointMessage;
var localized string WritingCheckpointMessage;
var localized string ThrowMessage;
var localized string DropMessage;
var Inventory OldSelectedItem;
var Texture InventorySplash;
var Texture InventoryDpadSplash;
var Texture InventoryTex[5];
var Texture InventoryActiveTex[5];
var Engine.Object.EInputKey LastDpadDown;
var float LastDpadTime;
var Texture InfinityIcon;
var name DukeVisionInventoryName;
var name HoloDukeInventoryName;
var name SteroidsInventoryName;
var name BeerInventoryName;
var name JetpackInventoryName;
var float HoloDukeSpawnFailedTimer;
var Texture HoloDukeSpawnFailedTex;
var float WeaponChangeTime;
var Weapon WeaponChangedTo;
var array< class<Weapon> > QuickWeaponList;
var array<dnGrenade> ActivePipeBombs;
var MaterialEx WeaponAmmoBackdrop;
var MaterialEx WeaponAmmoDirtyOverlay;
var MaterialEx WeaponAmmoPipeBomb;
var MaterialEx WeaponAmmoTripMine;
var MaterialEx WeaponAmmoStickyBomb;
var class<MP_PipeBombBase> StickyBombClass;
var Weapon LastWeaponDrawn;
var float FadeStartTime;
var float HUDAlpha;
var float FadeTotalTime;
var float HUDPersistTime;
var bool bFading;
var bool bActive;
var float EgoBarBaseWidth;
var float EgoGhostPCT;
var float EgoGhostFadeDelay;
var float EgoGhostFadeRate;
var float LastFrameEgoPCT;
var float LastFrameEgoCap;
var float EgoCapIncreaseFlashVal;
var float EgoCapIncreaseAmount;
var localized string MaxEgoCapHintMessage;
var localized string MaxEgoCapMessage;
var localized string MaxEgoCapAcheivedMessage;
var Color EgoBarColor;
var Color EgoBarMaxColor;
var Color EgoBarRedColor;
var MaterialEx EgoBackdrop;
var MaterialEx EgoBar;
var MaterialEx EgoBarFill;
var Vector2D EgoHudUpperLeft;
var Vector2D EgoBackdropOffset;
var Vector2D EgoTextOffset;
var Vector2D EgoBarHaloOffset;
var Vector2D EgoBarBorderOffset;
var Vector2D EgoBarFillOffset;
var SquareRegion EgoBarHaloRegion[3];
var SquareRegion EgoBarBorderRegion[3];
var Vector2D BossTextOffset;
var Vector2D BossBarHaloOffset;
var Vector2D BossBarBorderOffset;
var Vector2D BossBarFillOffset;
var localized string EgoMeterText;
var string BossMeterText;
var localized string TemperatureText;
var MaterialEx BoostMeter;
var float BoostWarnPCT;
var float BoostWarnPCT2nd;
var Color BoostWarnYellow;
var Color BoostWarnOrange;
var Color BoostWarnRed;
var float BreathAlpha;
var MaterialEx BlackTexture;
var MaterialEx WhiteTexture;
var array<SClassPackageEntry> QuickWeaponListClassNames;
var array<Actor> OverlayList;
var int NumHUDEffects;
var int MaxHUDEffects;
var array<SHUDEffect> HUDEffects;
var MaterialEx FilmGrainVignetteMaterial;
var TexScaler FilmGrainVignetteTexScaler;
var name DukeVisionBlackHackHUDEffectName;
var bool bDrawBounds;
var bool bDrawCyl;
var bool bDrawDebugHUD;
var bool bDrawCoordsHUD;
var bool bDrawDebugAIHUD;
var bool bDrawDebugAnimHUD;
var bool bDrawDamageDebugHUD;
var bool bDrawWeapDebugHUD;
var bool bDrawNetWeapDebugHUD;
var bool bDrawNetPlayerDebugHUD;
var bool bDrawScaleModDebugHUD;
var bool bDrawActorDebugHUD;
var bool bDrawKarmaDebugHUD;
var bool bDrawVehicleDebugHUD;
var bool bDrawDebugBlend;
var class<Actor> ActorClass;
var float ActorRadius;
var name ActorTag;
var name AnimWatchClassName;
var name ScaleModDebugHUDGroup;
var bool bIsSpectator;
var localized string SpectatorMessage;
var localized string SpectatorModeMessage;
var localized string SpectatorViewingMessage;
var bool bDrawPlayerIcons;
var float IconSize;
var float SmallIconSize;
var SmackerTexture PanelMap;
var string PanelMapStr;
var SmackerTexture PanelStaticSmack;
var string PanelStaticStr;
var bool bOldUseHelpPanel;
var MaterialEx FrozenOverlay;
var float GrenadeIndicatorDangerRadius;
var MaterialEx GrenadeIndicatorMaterial;
var Color GrenadeIndicatorColor;
var noexport array<SQuestItemHUDInfo> QuestItems "List of the current quest items in our inventory.";
var float QuestItemFadeRate;
var float QuestItemGlowHoldTime;
var float QuestItemGlowFadeRate;
var array<SPickupEvent> PickupEvents;
var float PickupEventLifetime;
var float PickupEventFadeTime;
var float PickupEventSpacing;
var float PickupEventXOffset;
var float PickupEventYOffset;
var MaterialEx BarBodyMaterial;
var MaterialEx BarCapMaterial;
var Font AmmoCountFont;
var float AmmoCountOffsetX;
var float AmmoCountOffsetY;
var float QuestItemIconFadeTime;
var(InteractKeys) noexport SInteractKeyInfo InteractKeyInfo[9] "Our pre-defined key infos.";
var(InteractKeys) noexport float InteractKeyFadeRate "Rate that key info fades in/out.";
var(InteractKeys) noexport MaterialEx InteractKeyBox "The material to use as a background for the interact key info popups.";
var(InteractKeys) noexport float InteractKeyInfoScaleX "X-scale for interact key info background image for keyboard/mouse binds.";
var(InteractKeys) noexport float InteractKeyInfoScaleY "Y-scale for interact key info background image for keyboard/mouse binds.";
var(InteractKeys) noexport float GamepadInteractKeyInfoScale "Scale for key info gamepad button images.";
var(InteractKeys) noexport float InteractKeyInfoTapDisplacement "Vertical movement for interact key info when it is marked as a tap.";
var(InteractKeys) noexport float InteractKeyInfoTapRate "Rate at which interact key info will move up and down when it is marked as a tap.";
var(InteractKeys) noexport float InteractKeyInfoAlphaScale "Alpha scale for the interact key info background image for keyboard/mouse binds.";
var(InteractKeys) noexport float InteractKeyInfoTextAlphaScale "Alpha scale for the interact key info text for keyboard/mouse binds.";
var(InteractKeys) noexport float InteractKeyInfoTextHighlight "Text alpha scale adjustment when an interact key info is marked as highlight.";
var Texture ZoomReticle;
var float ZoomReticleSize;
var bool bDrawBossMeter;
var RenderActor BossMeterActor;
var float PrevBossHealthPct;
var float BossMeterAlpha;
var MaterialEx BossMeterAtlas;
var transient float CrouchEndTime;
var float CrouchingYOffset;
var MaterialEx CrouchingIcon;
var MaterialEx StandingIcon;
var bool bIsMetagame;
var localized string LMBText;
var localized string RMBText;
var localized string SPCText;
var localized string ENTText;
var localized string MMBText;
var localized string ShiftText;
var localized string MWUText;
var localized string MWDText;
var localized string UpText;
var localized string DownText;
var localized string LeftText;
var localized string RightText;
var TriggerPlayer BossMeterReference;
var Texture WeaponSelectBackground;
var Texture WeaponSelectBackgroundHighlighted;

function bool OwnerFireDown()
{
	return false;
	return;
}

function SaveComplete()
{
	super.SaveComplete();
	// End:0x24
	if(__NFUN_308__(Level.MapFileName, "Map23"))
	{
		return;
	}
	// End:0x5C
	if(__NFUN_148__(__NFUN_145__(__NFUN_401__()), __NFUN_145__(__NFUN_402__())))
	{
		HUDMessages[2].TargetAlpha = 1;
		HUDMessages[2].Message = CheckpointMessage;
	}
	return;
}

simulated function PostBeginPlay()
{
	super(Actor).PostBeginPlay();
	currentInventoryCategory = -1;
	currentInventoryItem = 0;
	bNotFirstDraw = false;
	ClientRestart();
	// End:0x78
	if(OnlineAgent(class'Engine'.static.__NFUN_503__()).IsDLCInstalled('DLC01'))
	{
		StickyBombClass = class<MP_PipeBombBase>(__NFUN_366__("DLC01_Game.MP_StickyBomb", class'Class'));
	}
	return;
}

event PreGameInit()
{
	super(Actor).PreGameInit();
	ShortKeyName[1] = LMBText;
	ShortKeyName[2] = RMBText;
	ShortKeyName[4] = MMBText;
	ShortKeyName[32] = SPCText;
	ShortKeyName[13] = ENTText;
	ShortKeyName[16] = ShiftText;
	ShortKeyName[236] = MWUText;
	ShortKeyName[237] = MWDText;
	ShortKeyName[37] = LeftText;
	ShortKeyName[38] = UpText;
	ShortKeyName[39] = RightText;
	ShortKeyName[40] = DownText;
	// End:0xBE
	if(__NFUN_414__())
	{
		MaxHUDEffects = 8;		
	}
	else
	{
		MaxHUDEffects = 32;
	}
	// End:0xDF
	if(__NFUN_414__())
	{
		InteractKeyInfo[8].OffsetY = -28;
	}
	CrouchEndTime = -10;
	return;
}

simulated event PreRender(Canvas Canvas)
{
	super.PreRender(Canvas);
	ItemSpace = int(__NFUN_195__(float(default.ItemSpace), HUDScaleY));
	RootIndexTop = __NFUN_195__(default.RootIndexTop, HUDScaleY);
	DesiredIndexTop = __NFUN_199__(RootIndexTop, __NFUN_195__(IndexAdjust, HUDScaleY));
	IndexTop = __NFUN_199__(RootIndexTop, __NFUN_195__(IndexAdjust, HUDScaleY));
	return;
}

simulated event FirstDraw(Canvas C)
{
	local class<GameInfo> GameInfoClass;

	PlayerOwner = PlayerPawn(Owner);
	// End:0x1E
	if(__NFUN_339__(PlayerOwner, none))
	{
		return;
	}
	// End:0x42
	if(__NFUN_339__(PlayerOwner.ViewTarget, none))
	{
		PawnOwner = PlayerOwner;		
	}
	else
	{
		// End:0x7C
		if(PlayerOwner.ViewTarget.bIsPawn)
		{
			PawnOwner = Pawn(PlayerOwner.ViewTarget);			
		}
		else
		{
			PawnOwner = PlayerOwner;
		}
	}
	// End:0xB4
	if(__NFUN_340__(PlayerOwner, none))
	{
		LastFrameEgoCap = PlayerOwner.EgoCap;
		LastFrameEgoPCT = GetEgoPCT();
	}
	// End:0x11B
	if(__NFUN_339__(WindowConsole(PlayerPawn(Owner).Player.Console).Root, none))
	{
		WindowConsole(PlayerPawn(Owner).Player.Console).CreateRootWindow(C);
	}
	FadeStartTime = 0;
	return;
}

// Export UDukeHUD::execTickHUDEffects(FFrame&, void* const)
native simulated function TickHUDEffects(float DeltaTime)
{
	//native.DeltaTime;	
}

// Export UDukeHUD::execInitializeHUDEffect(FFrame&, void* const)
native simulated function InitializeHUDEffect(SHUDEffect Effect)
{
	//native.Effect;	
}

// Export UDukeHUD::execAddHudEffect(FFrame&, void* const)
native simulated function AddHudEffect(SHUDEffect HE)
{
	//native.HE;	
}

simulated function RemoveHudEffect(name EffectName)
{
	local int i;

	i = __NFUN_166__(string(HUDEffects), 1);
	J0x0F:

	// End:0x68 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x5E
		if(__NFUN_341__(EffectName, HUDEffects[i].Name))
		{
			// End:0x50
			if(HUDEffects[i].bLimited)
			{
				__NFUN_185__(NumHUDEffects);
			}
			HUDEffects.Remove(i, 1);
			return;
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x0F;
	}
	return;
}

simulated event int FindHUDEffectIndex(name EffectName, optional int LowestIndex)
{
	local int i;

	i = LowestIndex;
	J0x0B:

	// End:0x46 [Loop If]
	if(__NFUN_169__(i, string(HUDEffects)))
	{
		// End:0x3C
		if(__NFUN_341__(HUDEffects[i].Name, EffectName))
		{
			return i;
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x0B;
	}
	return -1;
	return;
}

simulated event GetHUDEffectByIndex(int Index, out SHUDEffect out_Effect)
{
	// End:0x1F
	if(__NFUN_172__(Index, string(HUDEffects)))
	{
		out_Effect = HUDEffects[0];
		return;
	}
	out_Effect = HUDEffects[Index];
	return;
	return;
}

simulated event SetHUDEffectByIndex(int Index, SHUDEffect HE)
{
	// End:0x12
	if(__NFUN_172__(Index, string(HUDEffects)))
	{
		return;
	}
	HUDEffects[Index] = HE;
	return;
}

function DrawPlayerIcon(Canvas C)
{
	return;
}

simulated function ClientRestart()
{
	// End:0x2D
	if(__NFUN_340__(PlayerOwner, none))
	{
		LastFrameEgoPCT = GetEgoPCT();
		LastFrameEgoCap = PlayerOwner.EgoCap;
	}
	return;
}

function OwnerDied()
{
	return;
}

// Export UDukeHUD::execDrawBoostMeter(FFrame&, void* const)
native simulated function DrawBoostMeter(Canvas C, float BoostMeterPCT, float BoostMeterAlpha)
{
	//native.C;
	//native.BoostMeterPCT;
	//native.BoostMeterAlpha;	
}

final function DrawStatusBar(Canvas C, float StartX, float StartY, float Length, float Height, float PCT, optional MaterialEx Tile, optional float Alpha)
{
	local float midX;
	local Color col, stdColor, lowColor, usedColor;

	// End:0x1A
	if(__NFUN_204__(Alpha, 0))
	{
		Alpha = 1;
	}
	midX = __NFUN_198__(StartX, __NFUN_195__(Length, PCT));
	stdColor = NewColorBytes(213, 182, 16, byte(__NFUN_195__(222, Alpha)));
	lowColor = NewColorBytes(200, 0, 0, byte(__NFUN_195__(128, Alpha)));
	usedColor = NewColorBytes(177, 155, 79, byte(__NFUN_195__(128, Alpha)));
	col = stdColor;
	// End:0x140
	if(__NFUN_200__(PCT, 1))
	{
		// End:0xC4
		if(__NFUN_200__(PCT, 0.25))
		{
			col = lowColor;
		}
		C.__NFUN_1257__(StartX, StartY, midX, __NFUN_198__(StartY, Height), col, true, true, BarBodyMaterial, BarCapMaterial);
		C.__NFUN_1257__(midX, StartY, __NFUN_198__(StartX, Length), __NFUN_198__(StartY, Height), usedColor, false, true, BarBodyMaterial, BarCapMaterial);		
	}
	else
	{
		C.__NFUN_1257__(StartX, StartY, midX, __NFUN_198__(StartY, Height), col, true, true, BarBodyMaterial, BarCapMaterial);
	}
	// End:0x201
	if(__NFUN_340__(Tile, none))
	{
		C.__NFUN_1250__(__NFUN_199__(StartX, __NFUN_195__(float(30), CenterScale)), StartY);
		C.__NFUN_1234__(Tile, __NFUN_195__(15, CenterScale), __NFUN_195__(15, CenterScale), 0, 0, float(Tile.__NFUN_1191__()), float(Tile.__NFUN_1192__()),,,,, Alpha);
	}
	return;
}

simulated function FlashAmmoCount()
{
	__NFUN_577__('HUDAmmoCountAlpha', 'Alpha', 0, 1, 2);
	return;
}

exec function AmmoOffsetX(float X)
{
	AmmoCountOffsetX = X;
	return;
}

exec function AmmoOffsetY(float Y)
{
	AmmoCountOffsetY = Y;
	return;
}

final function bool CheckActive()
{
	return true;
	return;
}

final function float GetClipPCT()
{
	// End:0x31
	if(__NFUN_340__(PlayerOwner.Weapon, none))
	{
		return PlayerOwner.Weapon.GetClipPCT();
	}
	return 0;
	return;
}

final function float GetHealthPCT()
{
	return __NFUN_227__(__NFUN_196__(PlayerOwner.Health, PlayerOwner.HealthCap), 0, 1);
	return;
}

final function float GetEgoPCT()
{
	return __NFUN_227__(__NFUN_196__(PlayerOwner.Ego, PlayerOwner.EgoCap), 0, 1);
	return;
}

final function float GetAmmoPCT()
{
	// End:0x1C
	if(__NFUN_339__(PlayerOwner.Weapon, none))
	{
		return 0;
	}
	// End:0x42
	if(__NFUN_173__(PlayerOwner.Weapon.GetMaximumAmmo(), 0))
	{
		return 1;
	}
	return __NFUN_227__(__NFUN_196__(float(PlayerOwner.Weapon.GetTotalAmmo()), float(PlayerOwner.Weapon.GetMaximumAmmo())), 0, 1);
	return;
}

function int AddToOverlayList(Actor A)
{
	OverlayList[OverlayList.Add(1)] = A;
	return __NFUN_166__(string(OverlayList), 1);
	return;
}

function RemoveFromOverlayList(int Index)
{
	OverlayList.Remove(Index, 1);
	return;
}

// Export UDukeHUD::execPostRender(FFrame&, void* const)
native simulated function PostRender(Canvas C)
{
	//native.C;	
}

simulated event PostPostRender(Canvas C)
{
	return;
}

simulated event DrawDebugHUDs(Canvas C)
{
	local Actor A;
	local Vector Min, Max;

	// End:0x14
	if(bDrawDebugBlend)
	{
		DrawDebugBlend(C);
	}
	// End:0x28
	if(bDrawCoordsHUD)
	{
		DrawCoordsHUD(C);
	}
	// End:0x3C
	if(bDrawDebugHUD)
	{
		DrawDebugHUD(C);
	}
	// End:0x50
	if(bDrawDebugAnimHUD)
	{
		DrawDebugAnimHUD(C);
	}
	// End:0x64
	if(bDrawScaleModDebugHUD)
	{
		DrawDebugScaleModHUD(C);
	}
	// End:0x78
	if(bDrawNetWeapDebugHUD)
	{
		DrawNetWeapDebugHUD(C);
	}
	// End:0x8C
	if(bDrawWeapDebugHUD)
	{
		DrawWeapDebugHud(C);
	}
	// End:0xA0
	if(bDrawNetPlayerDebugHUD)
	{
		DrawNetPlayerDebugHUD(C);
	}
	// End:0xB4
	if(bDrawDamageDebugHUD)
	{
		DrawDamageDebugHUD(C);
	}
	// End:0xC8
	if(bDrawActorDebugHUD)
	{
		DrawActorDebugHUD(C);
	}
	// End:0xDC
	if(bDrawKarmaDebugHUD)
	{
		DrawKarmaDebugHUD(C);
	}
	// End:0xF0
	if(bDrawVehicleDebugHUD)
	{
		DrawVehicleDebugHUD(C);
	}
	// End:0x543
	if(bDrawBounds)
	{
		C.DrawColor.R = 255;
		C.DrawColor.G = 0;
		C.DrawColor.B = 255;
		// End:0x542
		foreach __NFUN_747__(class'Actor', A)
		{
			// End:0x541
			if(__NFUN_148__(__NFUN_145__(A.bHidden), __NFUN_173__(int(A.DrawType), int(2))))
			{
				C.__NFUN_1246__(A, Min, Max);
				C.__NFUN_1240__(__NFUN_232__(Min.X, Min.Y, Min.Z), __NFUN_232__(Min.X, Min.Y, Max.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Max.X, Min.Y, Min.Z), __NFUN_232__(Max.X, Min.Y, Max.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Min.X, Max.Y, Min.Z), __NFUN_232__(Min.X, Max.Y, Max.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Max.X, Max.Y, Min.Z), __NFUN_232__(Max.X, Max.Y, Max.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Min.X, Min.Y, Min.Z), __NFUN_232__(Min.X, Max.Y, Min.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Max.X, Min.Y, Min.Z), __NFUN_232__(Max.X, Max.Y, Min.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Min.X, Min.Y, Max.Z), __NFUN_232__(Min.X, Max.Y, Max.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Max.X, Min.Y, Max.Z), __NFUN_232__(Max.X, Max.Y, Max.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Min.X, Min.Y, Min.Z), __NFUN_232__(Max.X, Min.Y, Min.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Min.X, Max.Y, Min.Z), __NFUN_232__(Max.X, Max.Y, Min.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Min.X, Min.Y, Max.Z), __NFUN_232__(Max.X, Min.Y, Max.Z), true);
				C.__NFUN_1240__(__NFUN_232__(Min.X, Max.Y, Max.Z), __NFUN_232__(Max.X, Max.Y, Max.Z), true);
			}			
		}		
	}
	// End:0x5F2
	if(bDrawCyl)
	{
		C.DrawColor.R = 0;
		C.DrawColor.G = 0;
		C.DrawColor.B = 255;
		// End:0x5F1
		foreach __NFUN_747__(class'Actor', A)
		{
			// End:0x5F0
			if(__NFUN_145__(A.bHidden))
			{
				C.__NFUN_1247__(A.Location, A.CollisionRadius, A.CollisionHeight);
			}			
		}		
	}
	return;
}

simulated event DrawWeaponSelect(Canvas C)
{
	local float X, Y, ButtonPressDelta;
	local bool bShowWeaponSelectMenu;

	// End:0x3C
	if(PlayerOwner.bWeaponSelectPressed)
	{
		ButtonPressDelta = __NFUN_199__(Level.TimeSeconds, PlayerOwner.WeaponSelectStartTime);		
	}
	else
	{
		ButtonPressDelta = -1;
	}
	bShowWeaponSelectMenu = __NFUN_201__(ButtonPressDelta, PlayerOwner.WeaponSelectActivateTime);
	// End:0x102
	if(__NFUN_148__(bShowWeaponSelectMenu, __NFUN_145__(IsMyDigs())))
	{
		DrawWeaponSelectEntry(C, GetWeaponSelectEntry(PlayerOwner.PrimaryWeapon1), 0);
		DrawWeaponSelectEntry(C, GetWeaponSelectEntry(PlayerOwner.PrimaryWeapon2), 1);
		DrawWeaponSelectEntry(C, GetWeaponSelectEntry(PlayerOwner.PrimaryWeapon3), 2);
		DrawWeaponSelectEntry(C, GetWeaponSelectEntry(PlayerOwner.PrimaryWeapon4), 3);
	}
	return;
}

simulated function SWeaponSelectEntry GetWeaponSelectEntry(Weapon TheWeapon)
{
	local SWeaponSelectEntry Entry;

	// End:0x63
	if(__NFUN_340__(TheWeapon, none))
	{
		Entry.TheWeapon = TheWeapon;
		Entry.Name = GetWeaponName(TheWeapon);
		Entry.Icon = GetWeaponIcon(TheWeapon);
		Entry.AmmoCount = TheWeapon.GetTotalAmmo();
	}
	return Entry;
	return;
}

simulated function DrawWeaponSelectEntry(Canvas C, SWeaponSelectEntry Entry, DukeHUD.EWeaponSelectPosition pos)
{
	local float X, Y, XL, YL, EntryWidth, EntryHeight,
		EntryCenterX, EntryCenterY;

	local Color HighlightColor, TextColor;
	local float EntryPadX, EntryPadY, AmmoPadX;
	local string Text;
	local float CenterX, CenterY;
	local MaterialEx BackgroundTex;
	local bool bSelected;

	HighlightColor = NewColorBytes(255, 255, 0, 255);
	TextColor = NewColorBytes(255, 255, 255, 255);
	EntryWidth = __NFUN_195__(235, CenterScale);
	EntryHeight = __NFUN_195__(60, CenterScale);
	EntryPadX = __NFUN_195__(60, CenterScale);
	EntryPadY = __NFUN_195__(40, CenterScale);
	AmmoPadX = __NFUN_195__(25, CenterScale);
	CenterX = __NFUN_195__(C.ClipX, 0.5);
	CenterY = __NFUN_195__(C.ClipY, 0.5);
	switch(pos)
	{
		// End:0xF5
		case 0:
			EntryCenterX = CenterX;
			EntryCenterY = __NFUN_199__(__NFUN_199__(CenterY, __NFUN_195__(EntryHeight, 0.5)), EntryPadY);
			// End:0x191
			break;
		// End:0x128
		case 1:
			EntryCenterX = CenterX;
			EntryCenterY = __NFUN_198__(__NFUN_198__(CenterY, __NFUN_195__(EntryHeight, 0.5)), EntryPadY);
			// End:0x191
			break;
		// End:0x15B
		case 2:
			EntryCenterX = __NFUN_199__(__NFUN_199__(CenterX, __NFUN_195__(EntryWidth, 0.5)), EntryPadX);
			EntryCenterY = CenterY;
			// End:0x191
			break;
		// End:0x18E
		case 3:
			EntryCenterX = __NFUN_198__(__NFUN_198__(CenterX, __NFUN_195__(EntryWidth, 0.5)), EntryPadX);
			EntryCenterY = CenterY;
			// End:0x191
			break;
		// End:0xFFFF
		default:
			break;
	}
	bSelected = __NFUN_148__(__NFUN_340__(PlayerOwner.WeaponSelectSelectedWeapon, none), __NFUN_339__(PlayerOwner.WeaponSelectSelectedWeapon, Entry.TheWeapon));
	// End:0x1E3
	if(bSelected)
	{
		BackgroundTex = WeaponSelectBackgroundHighlighted;		
	}
	else
	{
		BackgroundTex = WeaponSelectBackground;
	}
	X = __NFUN_199__(EntryCenterX, __NFUN_195__(__NFUN_195__(float(BackgroundTex.__NFUN_1191__()), 0.5), CenterScale));
	Y = __NFUN_199__(EntryCenterY, __NFUN_195__(__NFUN_195__(float(BackgroundTex.__NFUN_1192__()), 0.5), CenterScale));
	C.__NFUN_1250__(X, Y);
	C.DrawColor = NewColorBytes(255, 255, 255, 255);
	C.DrawRect(BackgroundTex, __NFUN_195__(float(BackgroundTex.__NFUN_1191__()), CenterScale), __NFUN_195__(float(BackgroundTex.__NFUN_1192__()), CenterScale));
	X = __NFUN_199__(EntryCenterX, __NFUN_195__(__NFUN_195__(float(Entry.Icon.__NFUN_1191__()), 0.5), CenterScale));
	Y = __NFUN_199__(EntryCenterY, __NFUN_195__(__NFUN_195__(float(Entry.Icon.__NFUN_1192__()), 0.5), CenterScale));
	C.__NFUN_1250__(X, Y);
	C.DrawColor = NewColorBytes(255, 255, 255, 255);
	C.DrawRect(Entry.Icon, __NFUN_195__(float(Entry.Icon.__NFUN_1191__()), CenterScale), __NFUN_195__(float(Entry.Icon.__NFUN_1192__()), CenterScale));
	// End:0x3B4
	if(bSelected)
	{
		C.DrawColor = HighlightColor;		
	}
	else
	{
		C.DrawColor = TextColor;
	}
	C.Font = AmmoCountFont;
	Text = Entry.Name;
	C.__NFUN_1238__(Text, XL, YL, TTFontScale, TTFontScale);
	X = __NFUN_199__(EntryCenterX, __NFUN_195__(XL, 0.5));
	Y = __NFUN_199__(Y, __NFUN_195__(YL, 0.5));
	C.__NFUN_1250__(X, Y);
	C.__NFUN_1233__(Text,,,, TTFontScale, TTFontScale);
	// End:0x53A
	if(__NFUN_340__(Entry.TheWeapon, none))
	{
		Text = string(Entry.AmmoCount);
		C.__NFUN_1238__(Text, XL, YL, TTFontScale, TTFontScale);
		X = __NFUN_199__(__NFUN_199__(__NFUN_198__(EntryCenterX, __NFUN_195__(EntryWidth, 0.5)), XL), AmmoPadX);
		Y = __NFUN_199__(EntryCenterY, __NFUN_195__(YL, 0.5));
		C.__NFUN_1250__(X, Y);
		C.__NFUN_1233__(Text,,,, TTFontScale, TTFontScale);
	}
	return;
}

simulated function MaterialEx GetWeaponIcon(Weapon TheWeapon)
{
	return IconTable.default.PickupEventIcons[TheWeapon.HUDPickupEventIcon].Success;
	return;
}

simulated function string GetWeaponName(Weapon TheWeapon)
{
	// End:0x48
	if(__NFUN_148__(__NFUN_340__(TheWeapon, none), __NFUN_340__(class<WeaponPickup>(TheWeapon.PickupClass), none)))
	{
		return class<WeaponPickup>(TheWeapon.PickupClass).default.ItemName;
	}
	return string(TheWeapon.Class);
	return;
}

// Export UDukeHUD::execGetLookActor(FFrame&, void* const)
native simulated function GetLookActor();

simulated event int DrawUseContextInfo(Canvas C, string Commands, optional float Alpha)
{
	local float XL, YL;
	local Font f;

	// End:0x13
	if(__NFUN_170__(UseInfoPosition, 10))
	{
		UseInfoPosition = 0;
	}
	// End:0x2F
	if(__NFUN_150__(__NFUN_308__(Commands, ""), __NFUN_171__(UseInfoPosition, 0)))
	{
		return 0;
	}
	f = C.Font;
	C.Font = AmmoCountFont;
	C.Style = 1;
	C.DrawColor.R = 228;
	C.DrawColor.G = 228;
	C.DrawColor.B = 228;
	C.__NFUN_1238__(Commands, XL, YL, TTFontScale, TTFontScale);
	C.__NFUN_1250__(__NFUN_199__(__NFUN_196__(float(C.SizeX), 2), __NFUN_196__(XL, 2)), __NFUN_198__(float(__NFUN_163__(C.SizeY, 2)), __NFUN_195__(CenterScale, AmmoCountOffsetX)));
	C.__NFUN_1233__(Commands,,,, TTFontScale, TTFontScale, Alpha);
	C.Font = f;
	return 1;
	return;
}

final simulated function GetUseInfoPositon(Canvas C, float XL, float YL)
{
	local float leftX, CenterX, rightX, bottomY, CenterY, UpperY,
		Border;

	Border = __NFUN_195__(YL, 0.5);
	leftX = Border;
	CenterX = __NFUN_199__(__NFUN_195__(__NFUN_195__(float(DefaultResX), HUDScaleX), 0.5), __NFUN_195__(XL, 0.5));
	rightX = __NFUN_199__(__NFUN_199__(__NFUN_195__(float(DefaultResX), HUDScaleX), XL), Border);
	bottomY = __NFUN_199__(__NFUN_199__(__NFUN_195__(float(DefaultResY), HUDScaleY), YL), Border);
	CenterY = __NFUN_195__(__NFUN_195__(float(DefaultResY), HUDScaleY), 0.5);
	UpperY = Border;
	switch(UseInfoPosition)
	{
		// End:0xD2
		case 1:
			C.__NFUN_1250__(CenterX, bottomY);
			// End:0x214
			break;
		// End:0xF1
		case 2:
			C.__NFUN_1250__(rightX, bottomY);
			// End:0x214
			break;
		// End:0x110
		case 3:
			C.__NFUN_1250__(rightX, CenterY);
			// End:0x214
			break;
		// End:0x12F
		case 4:
			C.__NFUN_1250__(rightX, UpperY);
			// End:0x214
			break;
		// End:0x14E
		case 5:
			C.__NFUN_1250__(CenterX, UpperY);
			// End:0x214
			break;
		// End:0x16D
		case 6:
			C.__NFUN_1250__(leftX, UpperY);
			// End:0x214
			break;
		// End:0x18C
		case 7:
			C.__NFUN_1250__(leftX, CenterY);
			// End:0x214
			break;
		// End:0x1B7
		case 8:
			C.__NFUN_1250__(leftX, __NFUN_199__(bottomY, __NFUN_195__(float(128), HUDScaleY)));
			// End:0x214
			break;
		// End:0x1E4
		case 9:
			C.__NFUN_1250__(CenterX, __NFUN_199__(CenterY, __NFUN_195__(YL, 2.5)));
			// End:0x214
			break;
		// End:0x211
		case 10:
			C.__NFUN_1250__(CenterX, __NFUN_198__(CenterY, __NFUN_195__(YL, 1.5)));
			// End:0x214
			break;
		// End:0xFFFF
		default:
			break;
	}
	return;
}

final function bool pointInRect(int X, int Y, int Left, int Top, int Right, int Bottom)
{
	// End:0x11
	if(__NFUN_169__(X, Left))
	{
		return false;
	}
	// End:0x22
	if(__NFUN_170__(X, Right))
	{
		return false;
	}
	// End:0x33
	if(__NFUN_169__(Y, Top))
	{
		return false;
	}
	// End:0x44
	if(__NFUN_170__(Y, Bottom))
	{
		return false;
	}
	return true;
	return;
}

simulated function RegisterWeaponChange(Weapon NewWeapon)
{
	// End:0x2F
	if(__NFUN_148__(__NFUN_340__(NewWeapon, none), __NFUN_145__(NewWeapon.WeaponConfig.default.bStandardWeaponSwitch)))
	{
		return;
	}
	WeaponChangeTime = Level.GameTimeSeconds;
	WeaponChangedTo = NewWeapon;
	return;
}

simulated function BuildQuickWeaponList()
{
	local int Crap;

	QuickWeaponList.Empty();
	Crap = QuickWeaponList.Add(string(QuickWeaponListClassNames));
	return;
}

simulated event DrawTypingPrompt(Canvas C, optional bool bTeam)
{
	local int Count;
	local float X, Y, XL, YL, SelX, SelXL;

	// End:0x23
	if(__NFUN_148__(__NFUN_340__(PlayerOwner, none), PlayerOwner.bTakingCubeShot))
	{
		return;
	}
	C.Font = C.HUDFontSmall;
	C.Style = 1;
	C.DrawColor = MainHUDColor;
	C.__NFUN_1238__("SOS:\\>", XL, YL, TTFontScale, TTFontScale);
	X = __NFUN_195__(YL, 0.25);
	Y = X;
	// End:0xEA
	if(__NFUN_148__(__NFUN_414__(), __NFUN_200__(TTFontScale, 1)))
	{
		X = __NFUN_195__(45, CenterScale);
		Y = __NFUN_195__(40, CenterScale);
	}
	C.__NFUN_1250__(X, Y);
	C.__NFUN_1233__("SOS:\\>", false,,, TTFontScale, TTFontScale);
	__NFUN_209__(X, XL);
	// End:0x4A9
	if(__NFUN_174__(PlayerOwner.Player.Console.TypingCursorPos, PlayerOwner.Player.Console.SelectionPos))
	{
		// End:0x332
		if(__NFUN_170__(PlayerOwner.Player.Console.TypingCursorPos, PlayerOwner.Player.Console.SelectionPos))
		{
			Count = __NFUN_166__(PlayerOwner.Player.Console.TypingCursorPos, PlayerOwner.Player.Console.SelectionPos);
			C.__NFUN_1238__(__NFUN_317__(PlayerOwner.Player.Console.TypedStr, PlayerOwner.Player.Console.SelectionPos), XL, YL, TTFontScale, TTFontScale);
			C.__NFUN_1238__(__NFUN_316__(PlayerOwner.Player.Console.TypedStr, PlayerOwner.Player.Console.SelectionPos, __NFUN_166__(PlayerOwner.Player.Console.TypingCursorPos, PlayerOwner.Player.Console.SelectionPos)), SelXL, YL, TTFontScale, TTFontScale);			
		}
		else
		{
			C.__NFUN_1238__(__NFUN_317__(PlayerOwner.Player.Console.TypedStr, PlayerOwner.Player.Console.TypingCursorPos), XL, YL, TTFontScale, TTFontScale);
			C.__NFUN_1238__(__NFUN_316__(PlayerOwner.Player.Console.TypedStr, PlayerOwner.Player.Console.TypingCursorPos, __NFUN_166__(PlayerOwner.Player.Console.SelectionPos, PlayerOwner.Player.Console.TypingCursorPos)), SelXL, YL, TTFontScale, TTFontScale);
		}
		C.__NFUN_1250__(__NFUN_198__(X, XL), Y);
		C.DrawColor = NewColorBytes(0, 0, 128, 255);
		C.DrawRect(WhiteTexture, SelXL, YL);
	}
	C.__NFUN_1250__(X, Y);
	C.DrawColor = MainHUDColor;
	C.__NFUN_1233__(PlayerOwner.Player.Console.TypedStr, false,,, TTFontScale, TTFontScale);
	// End:0x61B
	if(__NFUN_201__(__NFUN_212__(__NFUN_195__(Level.TimeSeconds, __NFUN_196__(10, Level.TimeDilation))), 0))
	{
		// End:0x5E4
		if(__NFUN_170__(PlayerOwner.Player.Console.TypingCursorPos, 0))
		{
			C.__NFUN_1238__(__NFUN_317__(PlayerOwner.Player.Console.TypedStr, PlayerOwner.Player.Console.TypingCursorPos), XL, YL, TTFontScale, TTFontScale);
			__NFUN_209__(X, XL);
		}
		C.__NFUN_1240__(__NFUN_232__(X, Y, 0), __NFUN_232__(X, __NFUN_198__(Y, YL), 0), false);
	}
	return;
}

simulated event DrawMessageArea(Canvas C)
{
	local int i, j;
	local float Alpha;
	local int YPosMA;
	local Font f;
	local bool ScrollUp;

	ScrollUp = false;
	i = 0;
	J0x0F:

	// End:0x72 [Loop If]
	if(__NFUN_169__(i, string(MessageQueue)))
	{
		// End:0x68
		if(__NFUN_150__(__NFUN_339__(MessageQueue[i].Message, none), __NFUN_203__(Level.GameTimeSeconds, MessageQueue[i].EndOfLife)))
		{
			MessageQueue.Remove(i, 1);
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x0F;
	}
	// End:0x80
	if(__NFUN_171__(string(MessageQueue), 0))
	{
		return;
	}
	// End:0xAF
	if(ScrollUp)
	{
		YPosMA = int(__NFUN_199__(float(C.SizeY), __NFUN_195__(float(30), CenterScale)));		
	}
	else
	{
		YPosMA = int(__NFUN_195__(float(30), CenterScale));
	}
	f = C.Font;
	C.Font = C.HUDFontSmall;
	i = __NFUN_166__(string(MessageQueue), 1);
	J0x103:

	// End:0x30A [Loop If]
	if(__NFUN_172__(i, __NFUN_189__(__NFUN_166__(__NFUN_166__(string(MessageQueue), BroadcastLogLineMax), 1), 0)))
	{
		// End:0x300
		if(__NFUN_340__(MessageQueue[i].Message, none))
		{
			C.bCenter = false;
			C.DrawColor = MainHUDColor;
			C.Style = 1;
			C.__NFUN_1238__(MessageQueue[i].StringMessage, MessageQueue[i].XL, MessageQueue[i].YL, __NFUN_195__(MessageQueue[i].Message.default.FontScaleX, TTFontScale), __NFUN_195__(MessageQueue[i].Message.default.FontScaleY, TTFontScale));
			C.__NFUN_1250__(__NFUN_195__(9.375, CenterScale), float(YPosMA));
			Alpha = 1;
			C.__NFUN_1233__(MessageQueue[i].StringMessage, false, true,, __NFUN_195__(MessageQueue[i].Message.default.FontScaleX, TTFontScale), __NFUN_195__(MessageQueue[i].Message.default.FontScaleY, TTFontScale), Alpha, 1);
			// End:0x2BF
			if(ScrollUp)
			{
				YPosMA = int(__NFUN_199__(__NFUN_199__(float(YPosMA), MessageQueue[i].YL), __NFUN_195__(float(ItemSpace), CenterScale)));				
			}
			else
			{
				YPosMA = int(__NFUN_198__(C.CurY, __NFUN_195__(float(ItemSpace), CenterScale)));
			}
			// End:0x300
			if(__NFUN_172__(YPosMA, C.SizeY))
			{
				// [Explicit Break]
				goto J0x30A;
			}
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x103;
	}
	J0x30A:

	C.Font = f;
	return;
}

simulated function Message(PlayerReplicationInfo PRI, coerce string msg, name MsgType)
{
	local int i;
	local class<LocalMessage> MessageClass;

	switch(MsgType)
	{
		// End:0x1E
		case 'Say':
			MessageClass = class'dnSayMessage';
			// End:0x87
			break;
		// End:0x34
		case 'TeamSay':
			MessageClass = class'dnTeamSayMessage';
			// End:0x87
			break;
		// End:0x4A
		case 'SpectatorSay':
			MessageClass = class'dnSpectatorSayMessage';
			// End:0x87
			break;
		// End:0x60
		case 'Private':
			MessageClass = class'dnPrivateMessage';
			// End:0x87
			break;
		// End:0x76
		case 'CriticalEvent':
			MessageClass = class'CriticalString';
			// End:0x87
			break;
		// End:0xFFFF
		default:
			MessageClass = class'StringMessage';
			// End:0x87
			break;
			break;
	}
	AddMessage(MessageClass, PRI, msg);
	return;
}

simulated function LocalizedMessage(class<LocalMessage> Message, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject, optional string CriticalString, optional Class OptionalClass)
{
	AddLocalMessage(Message, Switch, RelatedPRI_1, RelatedPRI_2, OptionalObject, CriticalString, OptionalClass);
	return;
}

simulated function AddMessage(class<LocalMessage> Message, PlayerReplicationInfo PRI, string msg)
{
	local int i;

	i = MessageQueue.Add(1);
	MessageQueue[i].Message = Message;
	MessageQueue[i].Switch = 0;
	MessageQueue[i].RelatedPRI = PRI;
	MessageQueue[i].EndOfLife = __NFUN_198__(float(Message.default.Lifetime), Level.GameTimeSeconds);
	MessageQueue[i].StringMessage = Message.static.AssembleString(self, 0, PRI, msg);
	// End:0xE2
	if(__NFUN_150__(__NFUN_339__(Message, class'dnSayMessage'), __NFUN_339__(Message, class'dnPrivateMessage')))
	{
		MessageQueue[i].bIcon = true;		
	}
	else
	{
		MessageQueue[i].bIcon = false;
	}
	return;
}

simulated function AddLocalMessage(class<LocalMessage> Message, optional int Switch, optional PlayerReplicationInfo RelatedPRI_1, optional PlayerReplicationInfo RelatedPRI_2, optional Object OptionalObject, optional string CriticalString, optional Class OptionalClass)
{
	local int i;

	i = MessageQueue.Add(1);
	MessageQueue[i].Message = Message;
	MessageQueue[i].Switch = Switch;
	MessageQueue[i].RelatedPRI = RelatedPRI_1;
	MessageQueue[i].OptionalObject = OptionalObject;
	MessageQueue[i].EndOfLife = __NFUN_198__(float(Message.default.Lifetime), Level.GameTimeSeconds);
	MessageQueue[i].StringMessage = Message.static.GetString(Switch, RelatedPRI_1, RelatedPRI_2, OptionalObject, OptionalClass);
	// End:0x109
	if(__NFUN_150__(__NFUN_339__(Message, class'dnSayMessage'), __NFUN_339__(Message, class'dnPrivateMessage')))
	{
		MessageQueue[i].bIcon = true;		
	}
	else
	{
		MessageQueue[i].bIcon = false;
	}
	return;
}

simulated function bool DisplayMessages(Canvas C)
{
	return true;
	return;
}

simulated event DeactivateHUD()
{
	bFading = true;
	FadeStartTime = Level.GameTimeSeconds;
	__NFUN_608__('DeactivateHUD');
	return;
}

simulated event ActivateHUD()
{
	// End:0x38
	if(__NFUN_148__(__NFUN_145__(bFading), __NFUN_145__(bActive)))
	{
		bFading = true;
		FadeStartTime = Level.GameTimeSeconds;		
	}
	else
	{
		// End:0x5F
		if(__NFUN_148__(bActive, __NFUN_145__(bFading)))
		{
			__NFUN_607__(HUDPersistTime, false, 'DeactivateHUD');			
		}
		else
		{
			// End:0x90
			if(__NFUN_148__(bActive, bFading))
			{
				bActive = false;
				FadeStartTime = Level.GameTimeSeconds;
			}
		}
	}
	return;
}

simulated event bool GetPipeBombs(out int Ammo, out int MaxClip, out int bIsActive)
{
	local PipeBomb pipe;

	pipe = PipeBomb(PlayerOwner.__NFUN_919__(class'PipeBomb'));
	bIsActive = 0;
	// End:0xAF
	if(__NFUN_340__(pipe, none))
	{
		Ammo = pipe.GetTotalAmmo();
		MaxClip = pipe.GetMaxClip();
		// End:0xAD
		if(__NFUN_148__(__NFUN_340__(pipe.DetonatorRef, none), __NFUN_150__(pipe.bActive, pipe.DetonatorRef.bActive)))
		{
			bIsActive = 1;
		}
		return true;
	}
	Ammo = 0;
	MaxClip = 0;
	return false;
	return;
}

simulated event bool GetTripMines(out int Ammo, out int MaxClip)
{
	local TripMine trip;

	trip = TripMine(PlayerOwner.__NFUN_919__(class'TripMine'));
	// End:0x57
	if(__NFUN_340__(trip, none))
	{
		Ammo = trip.GetTotalAmmo();
		MaxClip = trip.GetMaxClip();
		return true;
	}
	Ammo = 0;
	MaxClip = 0;
	return false;
	return;
}

simulated function initStickyBombTexture()
{
	// End:0x77
	if(__NFUN_148__(OnlineAgent(class'Engine'.static.__NFUN_503__()).IsDLCInstalled('DLC01'), __NFUN_339__(WeaponAmmoStickyBomb, none)))
	{
		WeaponAmmoStickyBomb = Texture(__NFUN_366__("DLC01_dt_hud.ingame_hud.StickyGrenade_ammocount", class'Texture'));
	}
	return;
}

simulated event bool GetStickyBombs(out int Ammo, out int MaxClip)
{
	local MP_PipeBombBase stickybomb;

	// End:0x63
	if(__NFUN_340__(StickyBombClass, none))
	{
		stickybomb = MP_PipeBombBase(PlayerOwner.__NFUN_919__(StickyBombClass));
		// End:0x63
		if(__NFUN_340__(stickybomb, none))
		{
			Ammo = stickybomb.GetTotalAmmo();
			MaxClip = stickybomb.GetMaxClip();
			return true;
		}
	}
	Ammo = 0;
	MaxClip = 0;
	return false;
	return;
}

simulated event DrawNukeSymbol(Canvas C)
{
	return;
}

exec function GrowHUD()
{
	// End:0x14
	if(bHideCrosshair)
	{
		bHideCrosshair = false;		
	}
	else
	{
		// End:0x25
		if(bHideHUD)
		{
			bHideHUD = false;
		}
	}
	return;
}

exec function ShrinkHUD()
{
	// End:0x16
	if(__NFUN_145__(bHideHUD))
	{
		bHideHUD = true;		
	}
	else
	{
		// End:0x29
		if(__NFUN_145__(bHideCrosshair))
		{
			bHideCrosshair = true;
		}
	}
	return;
}

simulated function Tick(float Delta)
{
	super.Tick(Delta);
	// End:0x19
	if(__NFUN_339__(PlayerOwner, none))
	{
		return;
	}
	// End:0x2E
	if(Level.bPaused)
	{
		return;
	}
	__NFUN_209__(HUDTimeSeconds, Delta);
	TickEgoChanges(Delta);
	TickPickupEvents(Delta);
	TickStatusIndex(Delta);
	TickHUDEffects(Delta);
	TickQuestItemInfo(Delta);
	TickInventory(Delta);
	return;
}

simulated function TickInventory(float Delta)
{
	local float DpadTimeout;

	DpadTimeout = 0.2;
	// End:0x37
	if(__NFUN_201__(LastDpadTime, float(0)))
	{
		__NFUN_210__(LastDpadTime, Delta);
		// End:0x37
		if(__NFUN_202__(LastDpadTime, float(0)))
		{
			LastDpadDown = 204;
		}
	}
	// End:0x45
	if(__NFUN_339__(PlayerOwner, none))
	{
		return;
	}
	// End:0x6A
	if(PlayerOwner.__NFUN_999__(200))
	{
		LastDpadDown = 200;
		LastDpadTime = DpadTimeout;
	}
	// End:0x8F
	if(PlayerOwner.__NFUN_999__(201))
	{
		LastDpadDown = 201;
		LastDpadTime = DpadTimeout;
	}
	// End:0xB4
	if(PlayerOwner.__NFUN_999__(202))
	{
		LastDpadDown = 202;
		LastDpadTime = DpadTimeout;
	}
	// End:0xD9
	if(PlayerOwner.__NFUN_999__(203))
	{
		LastDpadDown = 203;
		LastDpadTime = DpadTimeout;
	}
	return;
}

final simulated function EgoCapIncreaseBegin()
{
	EgoCapIncreaseFlash();
	// End:0x7C
	if(__NFUN_340__(PlayerOwner, none))
	{
		PlayerOwner.FindAndStopSound('EgoCap_Increase');
		// End:0x67
		if(__NFUN_200__(PlayerOwner.EgoCap, DukePlayer(PlayerOwner).MaxEgoCap))
		{
			PlayerOwner.FindAndPlaySound('EgoCap_Increase');			
		}
		else
		{
			PlayerOwner.FindAndPlaySound('EgoCap_Max');
		}
	}
	return;
}

final simulated function EgoCapIncreaseFlash()
{
	EgoCapIncreaseFlashVal = 1;
	// End:0x36
	if(__NFUN_340__(PlayerOwner, none))
	{
		PlayerOwner.AddRumble(PlayerOwner.EgoCapIncreaseRumbleInfo);
	}
	return;
}

simulated function TickEgoChanges(float Delta)
{
	local float EgoPCT, TimerAdjust;
	local DukePlayer DukeOwner;

	EgoPCT = GetEgoPCT();
	// End:0x2E
	if(__NFUN_201__(EgoCapIncreaseFlashVal, 0))
	{
		__NFUN_210__(EgoCapIncreaseFlashVal, __NFUN_195__(2, Delta));
	}
	// End:0x35F
	if(__NFUN_148__(bNotFirstDraw, __NFUN_206__(LastFrameEgoCap, PlayerOwner.EgoCap)))
	{
		__NFUN_209__(EgoCapIncreaseAmount, __NFUN_199__(PlayerOwner.EgoCap, LastFrameEgoCap));
		LastFrameEgoPCT = EgoPCT;
		LastFrameEgoCap = PlayerOwner.EgoCap;
		EgoGhostFadeDelay = 0;
		EgoGhostPCT = 0;
		DukeOwner = DukePlayer(PlayerOwner);
		// End:0x35C
		if(__NFUN_148__(__NFUN_148__(__NFUN_340__(DukeOwner, none), __NFUN_145__(IsMP())), __NFUN_201__(Level.GameTimeSeconds, 2)))
		{
			// End:0x173
			if(__NFUN_145__(DukeOwner.bDisplayedEgoCapIncreaseHint))
			{				
				ConsoleCommand("set DukePlayer bDisplayedEgoCapIncreaseHint true");
				HUDMessages[4].TargetAlpha = 1;
				HUDMessages[4].HoldTimer = 4;
				HUDMessages[4].Message = MaxEgoCapHintMessage;				
			}
			else
			{
				// End:0x1D7
				if(__NFUN_200__(DukeOwner.EgoCap, DukePlayer(PlayerOwner).MaxEgoCap))
				{
					HUDMessages[4].TargetAlpha = 1;
					HUDMessages[4].HoldTimer = 4;
					HUDMessages[4].Message = MaxEgoCapMessage;					
				}
				else
				{
					HUDMessages[4].TargetAlpha = 1;
					HUDMessages[4].HoldTimer = 4;
					HUDMessages[4].Message = MaxEgoCapAcheivedMessage;
				}
			}
			ActiveHint = none;
			ActivateHUD();
			// End:0x246
			if(__NFUN_200__(HUDAlpha, 1))
			{
				__NFUN_209__(TimerAdjust, __NFUN_195__(__NFUN_199__(1, HUDAlpha), FadeTotalTime));
			}
			__NFUN_607__(__NFUN_198__(0, TimerAdjust), false, 'EgoCapIncreaseBegin', true, true);
			__NFUN_607__(__NFUN_198__(0.21, TimerAdjust), false, 'EgoCapIncreaseFlash', true, true);
			__NFUN_607__(__NFUN_198__(0.64, TimerAdjust), false, 'EgoCapIncreaseFlash', true, true);
			// End:0x33D
			if(__NFUN_203__(DukeOwner.EgoCap, DukePlayer(PlayerOwner).MaxEgoCap))
			{
				__NFUN_607__(__NFUN_198__(1.28, TimerAdjust), false, 'EgoCapIncreaseFlash', true, true);
				__NFUN_607__(__NFUN_198__(1.5, TimerAdjust), false, 'EgoCapIncreaseFlash', true, true);
				__NFUN_607__(__NFUN_198__(1.92, TimerAdjust), false, 'EgoCapIncreaseFlash', true, true);
				__NFUN_607__(__NFUN_198__(5.14, TimerAdjust), false, 'EgoCapIncreaseFlash', true, true);
				__NFUN_607__(__NFUN_198__(5.35, TimerAdjust), false, 'EgoCapIncreaseFlash', true, true);
				__NFUN_607__(__NFUN_198__(6.85, TimerAdjust), false, 'EgoCapIncreaseFlash', true, true);
			}
			__NFUN_608__('ResetEgoCapIncrease');
			__NFUN_607__(__NFUN_198__(3, TimerAdjust), false, 'ResetEgoCapIncrease', true, true);
		}		
	}
	else
	{
		// End:0x396
		if(__NFUN_201__(LastFrameEgoPCT, EgoPCT))
		{
			// End:0x388
			if(__NFUN_201__(LastFrameEgoPCT, EgoGhostPCT))
			{
				EgoGhostPCT = LastFrameEgoPCT;
			}
			EgoGhostFadeDelay = default.EgoGhostFadeDelay;			
		}
		else
		{
			// End:0x3BB
			if(__NFUN_200__(LastFrameEgoPCT, EgoPCT))
			{
				EgoGhostFadeDelay = 0;
				EgoGhostPCT = 0;
			}
		}
	}
	LastFrameEgoPCT = EgoPCT;
	// End:0x400
	if(__NFUN_206__(EgoGhostPCT, float(0)))
	{
		// End:0x3ED
		if(__NFUN_201__(EgoGhostFadeDelay, float(0)))
		{
			__NFUN_210__(EgoGhostFadeDelay, Delta);			
		}
		else
		{
			__NFUN_210__(EgoGhostPCT, __NFUN_195__(EgoGhostFadeRate, Delta));
		}
	}
	return;
}

final simulated function ResetEgoCapIncrease()
{
	EgoCapIncreaseAmount = 0;
	return;
}

simulated function TickStatusIndex(float Delta)
{
	// End:0x35
	if(__NFUN_200__(LookPopoutTimer, 0.1))
	{
		__NFUN_209__(LookPopoutTimer, Delta);
		// End:0x35
		if(__NFUN_201__(LookPopoutTimer, 0.1))
		{
			LookPopoutTimer = 0.1;
		}
	}
	// End:0x61
	if(__NFUN_201__(IndexTop, DesiredIndexTop))
	{
		// End:0x5E
		if(__NFUN_200__(IndexTop, DesiredIndexTop))
		{
			IndexTop = DesiredIndexTop;
		}		
	}
	else
	{
		// End:0x8A
		if(__NFUN_200__(IndexTop, DesiredIndexTop))
		{
			// End:0x8A
			if(__NFUN_201__(IndexTop, DesiredIndexTop))
			{
				IndexTop = DesiredIndexTop;
			}
		}
	}
	return;
}

function ShowStatic(float inStaticLength)
{
	StaticTime = Level.GameTimeSeconds;
	StaticLength = inStaticLength;
	return;
}

exec function DebugBlend()
{
	bDrawDebugBlend = __NFUN_145__(bDrawDebugBlend);
	return;
}

simulated function DrawDebugBlend(Canvas C)
{
	local float XL, YL, XL2, YL2, XPos, YPos;

	C.Font = C.SmallFont;
	C.Style = 1;
	XPos = __NFUN_195__(9, HUDScaleX);
	YPos = __NFUN_195__(60, HUDScaleY);
	C.__NFUN_1250__(XPos, YPos);
	C.DrawColor = WhiteColor;
	C.__NFUN_1234__(WhiteTexture, 32, 32, 1, 1, 1, 1);
	C.__NFUN_1232__("White / No Alpha Blend");
	C.__NFUN_1250__(XPos, C.CurY);
	C.DrawColor = RedColor;
	C.__NFUN_1234__(WhiteTexture, 32, 32, 1, 1, 1, 1);
	C.__NFUN_1232__("Red / No Alpha Blend");
	C.__NFUN_1250__(XPos, C.CurY);
	C.Style = 3;
	C.DrawColor.R = byte(__NFUN_163__(int(255), 2));
	C.DrawColor.G = byte(__NFUN_163__(int(255), 2));
	C.DrawColor.B = byte(__NFUN_163__(int(255), 2));
	C.__NFUN_1234__(WhiteTexture, 32, 32, 1, 1, 1, 1);
	C.__NFUN_1232__("Gray 0.5 0.5 0.5  / Alpha 1 / STY_Translucent");
	C.__NFUN_1250__(XPos, C.CurY);
	C.Style = 3;
	C.DrawColor.R = byte(__NFUN_163__(int(255), 2));
	C.DrawColor.G = 0;
	C.DrawColor.B = 0;
	C.__NFUN_1234__(WhiteTexture, 32, 32, 1, 1, 1, 1);
	C.__NFUN_1232__("Red 0.5 1 1  / Alpha 1 / STY_Translucent");
	C.__NFUN_1250__(XPos, C.CurY);
	C.Style = 5;
	C.DrawColor.R = 255;
	C.DrawColor.G = 255;
	C.DrawColor.B = 255;
	C.__NFUN_1234__(WhiteTexture, 32, 32, 1, 1, 1, 1,,,,, 0.5);
	C.__NFUN_1232__("White / Alpha 0.5 / STY_Translucent2");
	C.__NFUN_1250__(XPos, C.CurY);
	C.Style = 5;
	C.DrawColor.R = 255;
	C.DrawColor.G = 0;
	C.DrawColor.B = 0;
	C.__NFUN_1234__(WhiteTexture, 32, 32, 1, 1, 1, 1,,,,, 0.5);
	C.__NFUN_1232__("Red / Alpha 0.5 / STY_Translucent2");
	C.__NFUN_1250__(XPos, C.CurY);
	C.Style = 6;
	C.DrawColor.R = byte(__NFUN_196__(float(255), 1.5));
	C.DrawColor.G = byte(__NFUN_196__(float(255), 1.5));
	C.DrawColor.B = byte(__NFUN_196__(float(255), 1.5));
	C.__NFUN_1234__(WhiteTexture, 32, 32, 1, 1, 1, 1);
	C.__NFUN_1232__("Gray 0.66 0.66 0.66 / Alpha 1 / STY_LightenModulate");
	C.__NFUN_1250__(XPos, C.CurY);
	C.Style = 7;
	C.DrawColor.R = byte(__NFUN_163__(int(255), 4));
	C.DrawColor.G = byte(__NFUN_163__(int(255), 4));
	C.DrawColor.B = byte(__NFUN_163__(int(255), 4));
	C.__NFUN_1234__(WhiteTexture, 32, 32, 1, 1, 1, 1);
	C.__NFUN_1232__("Gray 0.25 0.25 0.25 / Alpha 1 / STY_DarkenModulate");
	return;
}

exec function CoordsHUD()
{
	bDrawCoordsHUD = __NFUN_145__(bDrawCoordsHUD);
	return;
}

simulated function DrawCoordsHUD(Canvas C)
{
	local float XL, YL, XL2, YL2, XPos, YPos;

	local class<Material> m;

	C.Font = C.SmallFont;
	C.Style = 1;
	XPos = 0;
	YPos = __NFUN_196__(C.ClipY, float(2));
	C.__NFUN_1238__("Player Coordinates", XL, YL);
	C.__NFUN_1238__("View Rotation: ", XL2, YL2);
	C.DrawColor = GoldColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(0))));
	C.__NFUN_1232__("Player Coordinates");
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(1))));
	C.__NFUN_1232__("Location:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(2))));
	C.__NFUN_1232__("Rotation:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(3))));
	C.__NFUN_1232__("View Location:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(4))));
	C.__NFUN_1232__("View Rotation:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(5))));
	C.__NFUN_1232__("Acceleration:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(6))));
	C.__NFUN_1232__("Velocity:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(7))));
	C.__NFUN_1232__("Speed:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(8))));
	C.__NFUN_1232__("Standing On:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(9))));
	C.__NFUN_1232__("Region:");
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(1))));
	C.__NFUN_1232__(string(PlayerOwner.Location));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(2))));
	C.__NFUN_1232__(string(PlayerOwner.Rotation));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(3))));
	C.__NFUN_1232__(string(PlayerOwner.CalcedViewLocation));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(4))));
	C.__NFUN_1232__(string(PlayerOwner.ViewRotation));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(5))));
	C.__NFUN_1232__(string(PlayerOwner.Acceleration));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(6))));
	C.__NFUN_1232__(string(PlayerOwner.Velocity));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(7))));
	C.__NFUN_1232__(string(__NFUN_251__(PlayerOwner.Velocity)));
	m = PlayerOwner.LastWalkMaterial;
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(8))));
	C.__NFUN_1232__(string(m));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(9))));
	C.__NFUN_1232__(PlayerOwner.Region.Zone.ZoneName);
	return;
}

exec function DebugAnimHUD()
{
	bDrawDebugAnimHUD = __NFUN_145__(bDrawDebugAnimHUD);
	return;
}

final simulated function DrawAnimsInternal(Canvas C, RenderActor A, float XPos, out float YPos, float YL, optional name GroupName)
{
	local SAllAnimInfo AnimInfo;
	local string str;

	// End:0x0E
	if(__NFUN_339__(A, none))
	{
		return;
	}
	// End:0x27B
	foreach A.__NFUN_840__(AnimInfo, GroupName)
	{
		C.DrawColor = WhiteColor;
		str = __NFUN_303__(__NFUN_303__(string(AnimInfo.Channel), ":"), string(AnimInfo.Sequence));
		str = __NFUN_303__(__NFUN_303__(__NFUN_303__(str, "{{"), string(AnimInfo.RefId)), "}}");
		str = __NFUN_302__(__NFUN_302__(__NFUN_303__(str, "["), string(AnimInfo.Blend)), "]  (op:");
		switch(int(AnimInfo.Op))
		{
			// End:0xE0
			case 1:
				str = __NFUN_303__(str, "Replace");
				// End:0x135
				break;
			// End:0xFB
			case 2:
				str = __NFUN_303__(str, "Add");
				// End:0x135
				break;
			// End:0x11B
			case 3:
				str = __NFUN_303__(str, "Subtract");
				// End:0x135
				break;
			// End:0xFFFF
			default:
				str = __NFUN_303__(str, "NULL");
				// End:0x135
				break;
				break;
		}
		str = __NFUN_302__(str, ")");
		// End:0x17B
		if(__NFUN_145__(AnimInfo.bIsGroup))
		{
			str = __NFUN_302__(__NFUN_302__(__NFUN_303__(str, "`"), string(AnimInfo.Time)), "`");
		}
		// End:0x1A7
		if(AnimInfo.bEventEnabled)
		{
			str = __NFUN_303__(str, "[Events On]");			
		}
		else
		{
			str = __NFUN_303__(str, "[Events Off]");
		}
		// End:0x209
		if(A.__NFUN_568__().__NFUN_552__(AnimInfo.Channel, GroupName).bLoop)
		{
			str = __NFUN_303__(str, "[Looping]");
		}
		C.__NFUN_1250__(XPos, YPos);
		C.__NFUN_1232__(str);
		__NFUN_209__(YPos, YL);
		// End:0x27A
		if(AnimInfo.bIsGroup)
		{
			super(DukeHUD).DrawAnimsInternal(C, A, __NFUN_198__(XPos, float(8)), YPos, YL, AnimInfo.Sequence);
		}		
	}	
	return;
}

simulated function DrawAnims(Canvas C, RenderActor A, float XPos, out float YPos, float YL)
{
	C.DrawColor = GoldColor;
	C.__NFUN_1250__(XPos, YPos);
	C.__NFUN_1232__(__NFUN_302__("Actor:", string(A)));
	__NFUN_209__(YPos, YL);
	DrawAnimsInternal(C, A, XPos, YPos, YL);
	return;
}

function float GetDebugAnimHUDStartPosition(out float XPos, out float YPos)
{
	XPos = __NFUN_198__(DebugTreeBGSizeX, __NFUN_195__(float(9), HUDScaleX));
	YPos = __NFUN_195__(9, HUDScaleY);
	return;
}

simulated function DrawDebugAnimHUD(Canvas C)
{
	local float XL, YL, XPos, YPos;
	local RenderActor A;

	C.Font = C.SmallFont;
	C.Style = 1;
	GetDebugAnimHUDStartPosition(XPos, YPos);
	C.__NFUN_1238__("JUNKJUNK", XL, YL);
	C.DrawColor = GoldColor;
	C.__NFUN_1250__(XPos, YPos);
	C.__NFUN_1232__("Animations");
	C.DrawColor = WhiteColor;
	__NFUN_209__(YPos, YL);
	DrawAnims(C, PlayerOwner, XPos, YPos, YL);
	// End:0x165
	if(__NFUN_342__(AnimWatchClassName, 'None'))
	{
		// End:0x164
		foreach __NFUN_747__(class'RenderActor', A)
		{
			// End:0x163
			if(A.__NFUN_358__(AnimWatchClassName))
			{
				DrawAnims(C, A, XPos, YPos, YL);
				__NFUN_209__(YPos, YL);
				// End:0x163
				if(__NFUN_201__(YPos, C.ClipY))
				{
					// End:0x164
					break;
				}
			}			
		}		
	}
	return;
}

exec function WatchAnimClass(name InClassName)
{
	AnimWatchClassName = InClassName;
	return;
}

exec function DebugScaleMod(name InName)
{
	// End:0x2D
	if(__NFUN_341__(InName, 'None'))
	{
		bDrawScaleModDebugHUD = __NFUN_145__(bDrawScaleModDebugHUD);
		ScaleModDebugHUDGroup = 'None';		
	}
	else
	{
		// End:0x4B
		if(__NFUN_341__(InName, 'All'))
		{
			ScaleModDebugHUDGroup = 'None';			
		}
		else
		{
			bDrawScaleModDebugHUD = true;
			ScaleModDebugHUDGroup = InName;
		}
	}
	return;
}

simulated function DrawDebugScaleModHUD(Canvas C)
{
	local int i, E;
	local float XPos, YPos, XL, YL;

	C.Font = C.SmallFont;
	C.Style = 1;
	XPos = __NFUN_195__(9, HUDScaleX);
	YPos = __NFUN_195__(60, HUDScaleY);
	C.__NFUN_1238__("PADDING PADDING PAD", XL, YL);
	i = __NFUN_166__(string(PlayerOwner.ScaleModifierGroupList), 1);
	J0x9A:

	// End:0x5D9 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x5CF
		if(__NFUN_150__(__NFUN_341__(ScaleModDebugHUDGroup, 'None'), __NFUN_341__(PlayerOwner.ScaleModifierGroupList[i].Identifier, ScaleModDebugHUDGroup)))
		{
			C.DrawColor = GoldColor;
			C.__NFUN_1250__(XPos, YPos);
			C.__NFUN_1232__(__NFUN_302__("Group ID:        ", string(PlayerOwner.ScaleModifierGroupList[i].Identifier)));
			__NFUN_209__(YPos, YL);
			C.DrawColor = WhiteColor;
			C.__NFUN_1250__(XPos, YPos);
			C.__NFUN_1232__(__NFUN_302__("DefaultModValue: ", string(PlayerOwner.ScaleModifierGroupList[i].DefaultModValue)));
			__NFUN_209__(YPos, YL);
			C.__NFUN_1250__(XPos, YPos);
			C.__NFUN_1232__(__NFUN_302__("LastValue:       ", string(PlayerOwner.ScaleModifierGroupList[i].LastValue)));
			__NFUN_209__(YPos, YL);
			E = __NFUN_166__(string(PlayerOwner.ScaleModifierGroupList[i].Modifiers), 1);
			J0x24D:

			// End:0x5CF [Loop If]
			if(__NFUN_172__(E, 0))
			{
				C.DrawColor = GoldColor;
				C.__NFUN_1250__(__NFUN_198__(XPos, __NFUN_195__(60, HUDScaleX)), YPos);
				C.__NFUN_1232__(__NFUN_302__("Identifier:  ", string(PlayerOwner.ScaleModifierGroupList[i].Modifiers[E].Identifier)));
				__NFUN_209__(YPos, YL);
				C.DrawColor = WhiteColor;
				C.__NFUN_1250__(__NFUN_198__(XPos, __NFUN_195__(60, HUDScaleX)), YPos);
				C.__NFUN_1232__(__NFUN_302__("Style:       ", string(__NFUN_365__(class'EScaleModifier', int(PlayerOwner.ScaleModifierGroupList[i].Modifiers[E].Style)))));
				__NFUN_209__(YPos, YL);
				C.__NFUN_1250__(__NFUN_198__(XPos, __NFUN_195__(60, HUDScaleX)), YPos);
				C.__NFUN_1232__(__NFUN_302__("ScaleStart:  ", string(PlayerOwner.ScaleModifierGroupList[i].Modifiers[E].ScaleStart)));
				__NFUN_209__(YPos, YL);
				C.__NFUN_1250__(__NFUN_198__(XPos, __NFUN_195__(60, HUDScaleX)), YPos);
				C.__NFUN_1232__(__NFUN_302__("ScaleTarget: ", string(PlayerOwner.ScaleModifierGroupList[i].Modifiers[E].ScaleTarget)));
				__NFUN_209__(YPos, YL);
				C.__NFUN_1250__(__NFUN_198__(XPos, __NFUN_195__(60, HUDScaleX)), YPos);
				C.__NFUN_1232__(__NFUN_302__("Scale:       ", string(PlayerOwner.ScaleModifierGroupList[i].Modifiers[E].Scale)));
				__NFUN_209__(YPos, YL);
				C.__NFUN_1250__(__NFUN_198__(XPos, __NFUN_195__(60, HUDScaleX)), YPos);
				C.__NFUN_1232__(__NFUN_302__("TimeRamp:    ", string(PlayerOwner.ScaleModifierGroupList[i].Modifiers[E].TimeRamp)));
				__NFUN_209__(YPos, YL);
				C.__NFUN_1250__(__NFUN_198__(XPos, __NFUN_195__(60, HUDScaleX)), YPos);
				C.__NFUN_1232__(__NFUN_302__("Timer:       ", string(PlayerOwner.ScaleModifierGroupList[i].Modifiers[E].Timer)));
				__NFUN_209__(YPos, YL);
				__NFUN_185__(E);
				// [Loop Continue]
				goto J0x24D;
			}
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x9A;
	}
	return;
}

exec function DebugHUD()
{
	bDrawDebugHUD = __NFUN_145__(bDrawDebugHUD);
	return;
}

simulated function DrawDebugHUD(Canvas C)
{
	local float XL, YL, XL2, YL2, XPos, YPos;

	local int i, j, V, saveRow;
	local Actor A;
	local Texture t;
	local class<Material> m;
	local bool bNoMaterial;
	local MeshInstance minst;
	local Decoration D;
	local int NumDecos, NumNoneDecorations, NumFallingDecorations;
	local Inventory Inv;
	local string InvName;
	local AnimChanInfo ChanInfo;
	local Pawn PawnIter;

	C.Font = C.SmallFont;
	C.Style = 1;
	XPos = __NFUN_195__(9, HUDScaleX);
	YPos = __NFUN_195__(60, HUDScaleY);
	i = 0;
	C.DrawColor = GoldColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Weapon Status");
	C.__NFUN_1238__("Weapon Status", XL, YL);
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Class:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("State:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Sequence:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("bIFire:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Total Ammo:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("AmmoLoaded:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("WeaponState:");
	i = 1;
	C.__NFUN_1238__("PADDING PADDING PAD", XL2, YL2);
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	// End:0x5AB
	if(__NFUN_340__(PlayerOwner.Weapon, none))
	{
		C.__NFUN_1232__(string(PlayerOwner.Weapon.Class));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(PlayerOwner.Weapon.__NFUN_399__()));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		// End:0x432
		if(__NFUN_340__(PlayerOwner.Weapon.__NFUN_568__(), none))
		{
			ChanInfo = PlayerOwner.Weapon.MeshInstance.__NFUN_552__(0);
			C.__NFUN_1232__(string(ChanInfo.Sequence));			
		}
		else
		{
			C.__NFUN_1232__("None");
		}
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(PlayerOwner.bIFire));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(int(PlayerOwner.Weapon.Ammo.Charge)));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(PlayerOwner.Weapon.AmmoLoaded));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(__NFUN_365__(class'EWeaponState', int(PlayerOwner.Weapon.WeaponState))));		
	}
	else
	{
		C.__NFUN_1232__("None");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("None");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("None");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(PlayerOwner.bIFire));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("N/A");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("N/A");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("N/A");
	}
	saveRow = i;
	C.DrawColor = OrangeColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Look Actor");
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Name:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("State:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Location:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Rotation:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Tag:");
	i = saveRow;
	__NFUN_184__(i);
	// End:0xB7A
	if(__NFUN_340__(OldLookActor, none))
	{
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(OldLookActor));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(OldLookActor.__NFUN_399__()));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(OldLookActor.Location));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(OldLookActor.Rotation));
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(OldLookActor.Tag));
		// End:0xB77
		if(OldLookActor.bIsPlayerPawn)
		{
			C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
			C.__NFUN_1232__("Physics:");
			C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
			C.__NFUN_1232__("UpperBody:");
			C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
			C.__NFUN_1232__(string(__NFUN_365__(class'EPhysics', int(PlayerPawn(OldLookActor).Physics))));
		}		
	}
	else
	{
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("N/A");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("N/A");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("N/A");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("N/A");
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("N/A");
	}
	A = PlayerOwner.TraceFromCrosshairMesh(65535);
	C.DrawColor = OrangeColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(i))));
	C.__NFUN_1232__("Trace Actor:");
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	// End:0xDDB
	if(__NFUN_340__(A, none))
	{
		C.__NFUN_1232__(__NFUN_302__(__NFUN_302__(__NFUN_303__(__NFUN_302__(__NFUN_302__(string(A), "  [Event: "), string(A.Event)), "Tag: "), string(A.Tag)), "]"));		
	}
	else
	{
		C.__NFUN_1232__("N/A");
	}
	saveRow = i;
	C.DrawColor = GoldColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Player Coordinates");
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Location:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Rotation:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("View Rotation:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Acceleration:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Velocity:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Speed:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Standing On:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Region:");
	i = saveRow;
	__NFUN_184__(i);
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.Location));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.Rotation));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.ViewRotation));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.Acceleration));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.Velocity));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(__NFUN_251__(PlayerOwner.Velocity)));
	m = PlayerOwner.LastWalkMaterial;
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(m));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(PlayerOwner.Region.Zone.ZoneName);
	// End:0x135A
	foreach __NFUN_747__(class'Decoration', D,, true)
	{
		__NFUN_184__(NumDecos);
		// End:0x133A
		if(__NFUN_173__(int(D.Physics), int(0)))
		{
			__NFUN_184__(NumNoneDecorations);
			// End:0x1359
			continue;
		}
		// End:0x1359
		if(__NFUN_173__(int(D.Physics), int(2)))
		{
			__NFUN_184__(NumFallingDecorations);
		}		
	}	
	saveRow = i;
	C.DrawColor = OrangeColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Decoration Summary");
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Total Decorations:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("PHYS_None:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("PHYS_Falling:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Overlay Actor:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Carried Actor:");
	i = saveRow;
	__NFUN_184__(i);
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(NumDecos));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(NumNoneDecorations));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(NumFallingDecorations));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.OverlayActor));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.CarriedActor));
	C.DrawColor = GoldColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Touching Actors");
	C.DrawColor = WhiteColor;
	// End:0x177B
	if(__NFUN_340__(PlayerOwner, none))
	{
		// End:0x177A
		foreach PlayerOwner.__NFUN_749__(class'Actor', A)
		{
			C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
			C.__NFUN_1232__(string(A));
			__NFUN_184__(j);			
		}		
	}
	C.DrawColor = GoldColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Pawn List");
	C.DrawColor = WhiteColor;
	PawnIter = Level.PawnList;
	J0x17FA:

	// End:0x187B [Loop If]
	if(__NFUN_340__(PawnIter, none))
	{
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(__NFUN_303__(__NFUN_302__(string(PawnIter), ":"), PawnIter.PlayerReplicationInfo.PlayerName));
		PawnIter = PawnIter.NextPawn;
		// [Loop Continue]
		goto J0x17FA;
	}
	C.DrawColor = OrangeColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Pawn Mounted Actors");
	PawnIter = Level.PawnList;
	J0x18EF:

	// End:0x19E2 [Loop If]
	if(__NFUN_340__(PawnIter, none))
	{
		C.DrawColor = GoldColor;
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(PawnIter.PlayerReplicationInfo.PlayerName);
		C.DrawColor = WhiteColor;
		// End:0x19C9
		foreach PawnIter.__NFUN_753__(class'Actor', A)
		{
			C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
			C.__NFUN_1232__(string(A));			
		}		
		PawnIter = PawnIter.NextPawn;
		// [Loop Continue]
		goto J0x18EF;
	}
	XPos = __NFUN_198__(__NFUN_196__(C.ClipX, float(2)), __NFUN_195__(float(9), HUDScaleX));
	YPos = __NFUN_195__(60, HUDScaleY);
	i = 1;
	C.DrawColor = OrangeColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Player States");
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Game State:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Posture State:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Physics:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Physics Volume:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Ground Actor:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Base:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("CollisionRadius:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("CollisionHeight:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Mesh:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Self:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Health:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("HealthCap:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Ego:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("EgoCap:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Difficulty:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("HealthRecovery:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("EgoRecovery:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("NumCorpses:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("NumGibs:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("DOF_BlurAmount:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("DOF_FocalDist:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("DOF_FocalRangeMin:");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("DOF_FocalRangeMax:");
	i = 2;
	__NFUN_209__(XL2, float(15));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(__NFUN_365__(class'EGameState', int(PlayerOwner.PlayerReplicationInfo.GameState))));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(__NFUN_365__(class'EPostureStateEx', int(PlayerOwner.PostureStateEx))));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(__NFUN_365__(class'EPhysics', int(PlayerOwner.Physics))));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.PhysicsVolume));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.__NFUN_959__()));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.Base));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.CollisionRadius));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.CollisionHeight));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.Mesh));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.Health));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.HealthCap));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.Ego));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.EgoCap));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	// End:0x2558
	if(__NFUN_340__(PlayerOwner.Level.Game, none))
	{
		C.__NFUN_1232__(string(PlayerOwner.Level.Game.Difficulty));		
	}
	else
	{
		// End:0x2581
		if(__NFUN_173__(int(Level.NetMode), int(NM_Client)))
		{
			C.__NFUN_1232__("-1");
		}
	}
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(__NFUN_365__(class'EHealthRecoveryState', int(PlayerOwner.HealthRecoveryState))));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(__NFUN_365__(class'EHealthRecoveryState', int(PlayerOwner.EgoRecoveryState))));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(string(Level.Corpses)));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(string(Level.CorpseLimbs)));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.DOF_BlurAmount));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.DOF_FocalDist));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.DOF_FocalRangeMin));
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(string(PlayerOwner.DOF_FocalRangeMax));
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(i))));
	C.__NFUN_1232__("HUD Effects:");
	C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(__NFUN_302__(__NFUN_302__(string(NumHUDEffects), "/"), string(MaxHUDEffects)));
	__NFUN_184__(i);
	C.DrawColor = GoldColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Active Camera Shakes");
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__(__NFUN_303__("Old Shake:", string(PlayerOwner.CompOldShakes)));
	C.DrawColor = WhiteColor;
	// End:0x2AC7
	if(__NFUN_170__(string(PlayerOwner.ActiveShakes), 0))
	{
		V = 0;
		J0x2974:

		// End:0x2AC4 [Loop If]
		if(__NFUN_169__(V, string(PlayerOwner.ActiveShakes)))
		{
			C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
			// End:0x2A64
			if(__NFUN_201__(PlayerOwner.ActiveShakes[V].Duration, 0))
			{
				C.__NFUN_1232__(__NFUN_303__(__NFUN_303__(__NFUN_303__(__NFUN_302__(__NFUN_302__("#", string(V)), ":"), string(PlayerOwner.ActiveShakes[V].ShakeName)), "- TimeLeft:"), string(__NFUN_195__(PlayerOwner.ActiveShakes[V].Duration, PlayerOwner.ActiveShakes[V].Scalar))));
				// [Explicit Continue]
				goto J0x2ABA;
			}
			C.__NFUN_1232__(__NFUN_303__(__NFUN_303__(__NFUN_302__(__NFUN_302__("#", string(V)), ":"), string(PlayerOwner.ActiveShakes[V].ShakeName)), "- TimeLeft: Forever!"));
			J0x2ABA:

			__NFUN_184__(V);
			// [Loop Continue]
			goto J0x2974;
		}		
	}
	else
	{
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__("None");
	}
	__NFUN_184__(i);
	C.DrawColor = OrangeColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
	C.__NFUN_1232__("Inventory/State");
	C.DrawColor = WhiteColor;
	Inv = PlayerOwner.InventoryListHead;
	J0x2B8E:

	// End:0x2C71 [Loop If]
	if(__NFUN_340__(Inv, none))
	{
		InvName = string(Inv);
		j = __NFUN_315__(InvName, ".");
		InvName = __NFUN_318__(InvName, __NFUN_166__(__NFUN_166__(__NFUN_314__(InvName), j), 1));
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(i))));
		C.__NFUN_1232__(InvName);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL2), __NFUN_198__(YPos, __NFUN_195__(YL, float(__NFUN_184__(i)))));
		C.__NFUN_1232__(string(Inv.__NFUN_399__()));
		Inv = Inv.NextInventory;
		// [Loop Continue]
		goto J0x2B8E;
	}
	C.DrawColor = WhiteColor;
	C.Style = 3;
	return;
}

exec function NetWeapDebugHUD()
{
	__NFUN_355__("NetWeapDebugHud");
	bDrawNetWeapDebugHUD = __NFUN_145__(bDrawNetWeapDebugHUD);
	return;
}

simulated function DrawNetWeapDebugHUD(Canvas C)
{
	local float XL, YL, XL2, YL2, XPos, YPos;

	local int i, j;
	local Pawn P;
	local Inventory Inv;
	local string InvName;

	__NFUN_355__(__NFUN_303__("DrawNetWeapDebugHUD", string(C)));
	C.Font = C.SmallFont;
	C.Style = 1;
	YPos = __NFUN_195__(64, HUDScaleY);
	C.__NFUN_1238__("PADDING PADDING PAD", XL, YL);
	P = Level.PawnList;
	J0xA5:

	// End:0x437 [Loop If]
	if(__NFUN_340__(P, none))
	{
		XPos = __NFUN_195__(9, HUDScaleX);
		C.DrawColor = WhiteColor;
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
		C.__NFUN_1232__("PlayerName:");
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(2))));
		C.__NFUN_1232__("Weapon:");
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(3))));
		C.__NFUN_1232__("Sequence:");
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(4))));
		C.__NFUN_1232__("State:");
		// End:0x2B3
		if(__NFUN_340__(P.Weapon, none))
		{
			C.__NFUN_1250__(__NFUN_198__(XPos, XL), __NFUN_198__(YPos, YL));
			C.__NFUN_1232__(P.PlayerReplicationInfo.PlayerName);
			C.__NFUN_1250__(__NFUN_198__(XPos, XL), __NFUN_198__(YPos, __NFUN_195__(YL, float(2))));
			C.__NFUN_1232__(string(P.Weapon));
			C.__NFUN_1250__(__NFUN_198__(XPos, XL), __NFUN_198__(YPos, __NFUN_195__(YL, float(3))));
			C.__NFUN_1232__(string(P.Weapon.__NFUN_399__()));
		}
		__NFUN_209__(YPos, __NFUN_195__(YL, float(4)));
		XPos = __NFUN_195__(15, HUDScaleX);
		C.DrawColor = OrangeColor;
		C.__NFUN_1250__(XPos, YPos);
		C.__NFUN_1232__("Inventory");
		C.DrawColor = WhiteColor;
		Inv = P.InventoryListHead;
		J0x344:

		// End:0x413 [Loop If]
		if(__NFUN_340__(Inv, none))
		{
			__NFUN_209__(YPos, YL);
			InvName = string(Inv);
			j = __NFUN_315__(InvName, ".");
			InvName = __NFUN_318__(InvName, __NFUN_166__(__NFUN_166__(__NFUN_314__(InvName), j), 1));
			C.__NFUN_1250__(XPos, YPos);
			C.__NFUN_1232__(InvName);
			C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
			C.__NFUN_1232__(string(Inv.__NFUN_399__()));
			Inv = Inv.NextInventory;
			// [Loop Continue]
			goto J0x344;
		}
		__NFUN_209__(YPos, YL);
		P = P.NextPawn;
		// [Loop Continue]
		goto J0xA5;
	}
	return;
}

exec function WeapDebugHUD()
{
	bDrawWeapDebugHUD = __NFUN_145__(bDrawWeapDebugHUD);
	return;
}

simulated function DrawWeapDebugHud(Canvas C)
{
	local float XL, YL, XL2, YL2, XPos, YPos;

	local int i, j;
	local Pawn P;
	local Inventory Inv;
	local Weapon W;
	local string InvName;

	C.Font = C.SmallFont;
	C.Style = 1;
	YPos = __NFUN_195__(64, HUDScaleY);
	C.__NFUN_1238__("PADDING PADDING PAD", XL, YL);
	P = Level.PawnList;
	J0x84:

	// End:0x417 [Loop If]
	if(__NFUN_340__(P, none))
	{
		XPos = __NFUN_195__(9, HUDScaleX);
		C.DrawColor = WhiteColor;
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
		C.__NFUN_1232__("PlayerName:");
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(2))));
		C.__NFUN_1232__("Weapon:");
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(3))));
		C.__NFUN_1232__("Sequence:");
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, __NFUN_195__(YL, float(4))));
		C.__NFUN_1232__("State:");
		// End:0x292
		if(__NFUN_340__(P.Weapon, none))
		{
			C.__NFUN_1250__(__NFUN_198__(XPos, XL), __NFUN_198__(YPos, YL));
			C.__NFUN_1232__(P.PlayerReplicationInfo.PlayerName);
			C.__NFUN_1250__(__NFUN_198__(XPos, XL), __NFUN_198__(YPos, __NFUN_195__(YL, float(2))));
			C.__NFUN_1232__(string(P.Weapon));
			C.__NFUN_1250__(__NFUN_198__(XPos, XL), __NFUN_198__(YPos, __NFUN_195__(YL, float(3))));
			C.__NFUN_1232__(string(P.Weapon.__NFUN_399__()));
		}
		__NFUN_209__(YPos, __NFUN_195__(YL, float(4)));
		XPos = __NFUN_195__(15, HUDScaleX);
		C.DrawColor = OrangeColor;
		C.__NFUN_1250__(XPos, YPos);
		C.__NFUN_1232__("Weapons");
		C.DrawColor = WhiteColor;
		__NFUN_209__(YPos, YL);
		// End:0x3F2
		foreach __NFUN_747__(class'Weapon', W)
		{
			// End:0x346
			if(__NFUN_340__(W.Instigator, P))
			{
				continue;				
			}
			__NFUN_209__(YPos, YL);
			InvName = string(W);
			j = __NFUN_315__(InvName, ".");
			InvName = __NFUN_318__(InvName, __NFUN_166__(__NFUN_166__(__NFUN_314__(InvName), j), 1));
			C.__NFUN_1250__(XPos, YPos);
			C.__NFUN_1232__(InvName);
			C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
			C.__NFUN_1232__(string(W.__NFUN_399__()));			
		}		
		__NFUN_209__(YPos, YL);
		P = P.NextPawn;
		// [Loop Continue]
		goto J0x84;
	}
	return;
}

exec function NetPlayerDebugHUD()
{
	bDrawNetPlayerDebugHUD = __NFUN_145__(bDrawNetPlayerDebugHUD);
	return;
}

simulated function DrawNetPlayerDebugHUD(Canvas C)
{
	local float XL, YL, XL2, YL2, XPos, YPos;

	local int i, j;
	local Pawn P;

	C.Font = C.SmallFont;
	C.Style = 1;
	YPos = __NFUN_195__(64, HUDScaleY);
	C.__NFUN_1238__("PADDING PADDING PAD", XL, YL);
	__NFUN_209__(YL, float(1));
	P = Level.PawnList;
	J0x8D:

	// End:0x45C [Loop If]
	if(__NFUN_340__(P, none))
	{
		XPos = __NFUN_195__(9, HUDScaleX);
		C.DrawColor = WhiteColor;
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
		C.__NFUN_1232__("PlayerName:");
		C.DrawColor = GoldColor;
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(P.PlayerReplicationInfo.PlayerName);
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Location:", string(P.Location)));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Role:", string(__NFUN_365__(class'ENetRole', int(P.Role)))));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Physics:", string(__NFUN_365__(class'EPhysics', int(P.Physics)))));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Collision Height:", string(P.CollisionHeight)));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Collision Radius:", string(P.CollisionRadius)));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Block Karma:", string(P.bBlockKarma)));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Velocity:", string(P.Velocity)));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("PostureState:", string(__NFUN_365__(class'EPostureStateEx', int(P.PostureStateEx)))));
		__NFUN_209__(YPos, __NFUN_195__(YL, float(5)));
		P = P.NextPawn;
		// [Loop Continue]
		goto J0x8D;
	}
	C.DrawColor = WhiteColor;
	C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
	C.__NFUN_1232__("PRI Array:");
	i = 0;
	J0x4AF:

	// End:0x5D8 [Loop If]
	if(__NFUN_169__(i, string(PlayerOwner.GameReplicationInfo.PRIArray)))
	{
		C.DrawColor = GoldColor;
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Name: ", PlayerOwner.GameReplicationInfo.PRIArray[i].PlayerName));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(__NFUN_198__(XPos, XL), YPos);
		C.__NFUN_1232__(__NFUN_303__("Game State: ", string(__NFUN_365__(class'EGameState', int(PlayerOwner.GameReplicationInfo.PRIArray[i].GameState)))));
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x4AF;
	}
	return;
}

exec function DebugDamageHUD()
{
	bDrawDamageDebugHUD = __NFUN_145__(bDrawDamageDebugHUD);
	return;
}

simulated function DrawDamageDebugHUD(Canvas C)
{
	local float XL, YL, XL2, YL2, XPos, YPos;

	local int i, j;
	local Pawn P;

	C.Font = C.SmallFont;
	C.Style = 1;
	YPos = __NFUN_195__(64, HUDScaleY);
	C.__NFUN_1238__("PADDING PADDING PAD", XL, YL);
	i = 0;
	J0x76:

	// End:0x14D [Loop If]
	if(__NFUN_169__(i, 32))
	{
		XPos = __NFUN_195__(9, HUDScaleX);
		// End:0xD3
		if(__NFUN_173__(i, __NFUN_164__(PlayerOwner.GameReplicationInfo.DmgStrIndex, 32)))
		{
			C.DrawColor = GoldColor;			
		}
		else
		{
			C.DrawColor = WhiteColor;
		}
		C.__NFUN_1250__(XPos, YPos);
		C.__NFUN_1232__(__NFUN_303__("Damage:", PlayerOwner.GameReplicationInfo.DebugDamageStrings[i]));
		__NFUN_209__(YPos, YL);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x76;
	}
	return;
}

exec function ActorDebugHUD()
{
	bDrawActorDebugHUD = __NFUN_145__(bDrawActorDebugHUD);
	return;
}

exec function VehicleDebugHUD()
{
	bDrawVehicleDebugHUD = __NFUN_145__(bDrawVehicleDebugHUD);
	return;
}

exec function KarmaDebugHUD()
{
	bDrawKarmaDebugHUD = __NFUN_145__(bDrawKarmaDebugHUD);
	return;
}

exec function DebugActor(string aClass)
{
	ActorClass = class<Actor>(__NFUN_366__(aClass, class'Class'));
	BroadcastMessage(__NFUN_303__("Now Debugging", string(ActorClass)));
	return;
}

exec function DebugActorRadius(int Radius)
{
	ActorRadius = float(Radius);
	BroadcastMessage(__NFUN_303__("Debug Actor Radius Change", string(Radius)));
	return;
}

exec function DebugActorTag(coerce name dTag)
{
	ActorTag = dTag;
	BroadcastMessage(__NFUN_303__("Debug Actor Tag", string(dTag)));
	return;
}

simulated function DrawKarmaDebugHUD(Canvas C)
{
	local int i;
	local KarmaActor A;
	local float XL, YL, XL2, YL2, XPos, YPos;

	C.Font = C.SmallFont;
	C.Style = 1;
	YPos = __NFUN_195__(64, HUDScaleY);
	C.__NFUN_1238__("PADDING PADDING PAD", XL, YL);
	C.DrawColor = WhiteColor;
	C.__NFUN_1232__("Debugging Karma Objects");
	__NFUN_209__(YPos, YL);
	return;
}

simulated function DrawVehicleDebugHUD(Canvas C)
{
	local float XL, YL, XPos, YPos;
	local VehicleSpaceBase A;

	C.Font = C.SmallFont;
	C.Style = 1;
	C.__NFUN_1238__("PADDING PADDING PAD", XL, YL);
	C.DrawColor = WhiteColor;
	XPos = __NFUN_195__(9, HUDScaleX);
	YPos = __NFUN_195__(60, HUDScaleY);
	// End:0x2EA
	foreach __NFUN_747__(class'VehicleSpaceBase', A)
	{
		XPos = __NFUN_195__(9, HUDScaleX);
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
		C.__NFUN_1232__(string(A.Name));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
		C.__NFUN_1232__(__NFUN_303__("Location:", string(A.Location)));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
		C.__NFUN_1232__(__NFUN_303__("Game Velocity:", string(__NFUN_251__(A.Vehicle.Velocity))));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
		C.__NFUN_1232__(__NFUN_303__("Vehicle Speed:", string(A.Vehicle.oForwardVelocity)));
		__NFUN_209__(YPos, YL);
		C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
		C.__NFUN_1232__(__NFUN_303__("User:", string(A.User)));
		__NFUN_209__(YPos, YL);
		// End:0x2E9
		if(__NFUN_340__(A.User, none))
		{
			C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
			C.__NFUN_1232__(__NFUN_303__("User Location:", string(A.User.Location)));
			__NFUN_209__(YPos, YL);
		}		
	}	
	return;
}

simulated function DrawActorDebugHUD(Canvas C)
{
	local float XL, YL, XL2, YL2, XPos, YPos;

	local int i, j;
	local Actor A;
	local float Distance;
	local Vector Delta;

	C.Font = C.SmallFont;
	C.Style = 1;
	YPos = __NFUN_195__(64, HUDScaleY);
	C.__NFUN_1238__("PADDING PADDING PAD", XL, YL);
	C.DrawColor = WhiteColor;
	// End:0x15B
	if(__NFUN_201__(ActorRadius, float(0)))
	{
		// End:0x158
		if(__NFUN_340__(Owner, none))
		{
			// End:0x157
			foreach Owner.__NFUN_751__(ActorClass, A, ActorRadius)
			{
				Delta = __NFUN_239__(A.Location, Owner.Location);
				Distance = __NFUN_251__(Delta);
				XPos = __NFUN_195__(9, HUDScaleX);
				C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
				C.__NFUN_1232__(__NFUN_302__(__NFUN_302__(string(A.Name), ":"), string(Distance)));
				__NFUN_209__(YPos, YL);				
			}			
		}		
	}
	else
	{
		// End:0x207
		foreach __NFUN_747__(ActorClass, A)
		{
			Delta = __NFUN_239__(A.Location, Owner.Location);
			Distance = __NFUN_251__(Delta);
			XPos = __NFUN_195__(9, HUDScaleX);
			C.__NFUN_1250__(XPos, __NFUN_198__(YPos, YL));
			C.__NFUN_1232__(__NFUN_302__(__NFUN_302__(string(A.Name), ":"), string(Distance)));
			__NFUN_209__(YPos, YL);			
		}		
	}
	return;
}

function DrawOutlineActorFrame(Canvas C, Actor A, Color DrawColor)
{
	local float x1, y1, x2, y2, Width, Height;

	local int BarSize;

	BarSize = 2;
	C.DrawColor = DrawColor;
	C.__NFUN_1243__(A, x1, x2, y1, y2);
	Width = __NFUN_199__(x2, x1);
	Height = __NFUN_199__(y2, y1);
	BarSize = 2;
	C.__NFUN_1250__(x1, y1);
	C.__NFUN_1234__(WhiteTexture, float(BarSize), Height, 0, 0, 1, 1);
	C.__NFUN_1250__(x2, y1);
	C.__NFUN_1234__(WhiteTexture, float(BarSize), Height, 0, 0, 1, 1);
	C.__NFUN_1250__(x1, y1);
	C.__NFUN_1234__(WhiteTexture, __NFUN_195__(Width, 0.1), float(BarSize), 0, 0, 1, 1);
	C.__NFUN_1250__(x1, y2);
	C.__NFUN_1234__(WhiteTexture, __NFUN_195__(Width, 0.1), float(BarSize), 0, 0, 1, 1);
	C.__NFUN_1250__(__NFUN_199__(x2, __NFUN_195__(Width, 0.1)), y1);
	C.__NFUN_1234__(WhiteTexture, __NFUN_198__(__NFUN_195__(Width, 0.1), float(BarSize)), float(BarSize), 0, 0, 1, 1);
	C.__NFUN_1250__(__NFUN_199__(x2, __NFUN_195__(Width, 0.1)), y2);
	C.__NFUN_1234__(WhiteTexture, __NFUN_198__(__NFUN_195__(Width, 0.1), float(BarSize)), float(BarSize), 0, 0, 1, 1);
	return;
}

final function float ConvertNumber(float SourceNumber, float SourceRes, float DefaultRes)
{
	return __NFUN_195__(__NFUN_196__(SourceNumber, SourceRes), DefaultRes);
	return;
}

simulated function RegisterPickupEvent(int IconIndex, bool bPickupFailed, float Count)
{
	local int i, j;
	local MaterialEx Mat;

	// End:0x37
	if(__NFUN_150__(__NFUN_150__(__NFUN_339__(IconTable, none), __NFUN_169__(IconIndex, 0)), __NFUN_172__(IconIndex, string(IconTable.default.PickupEventIcons))))
	{
		return;
	}
	// End:0x63
	if(bPickupFailed)
	{
		Mat = IconTable.default.PickupEventIcons[IconIndex].Fail;		
	}
	else
	{
		Mat = IconTable.default.PickupEventIcons[IconIndex].Success;
	}
	// End:0x230
	if(__NFUN_340__(Mat, none))
	{
		// End:0x120
		if(bPickupFailed)
		{
			i = __NFUN_166__(string(PickupEvents), 1);
			J0xA7:

			// End:0x120 [Loop If]
			if(__NFUN_172__(i, 0))
			{
				// End:0x116
				if(__NFUN_150__(__NFUN_339__(PickupEvents[i].EventTexture, IconTable.default.PickupEventIcons[IconIndex].Success), __NFUN_339__(PickupEvents[i].EventTexture, IconTable.default.PickupEventIcons[IconIndex].Fail)))
				{
					return;
				}
				__NFUN_185__(i);
				// [Loop Continue]
				goto J0xA7;
			}
		}
		j = __NFUN_166__(string(PickupEvents), 1);
		J0x12F:

		// End:0x1A9 [Loop If]
		if(__NFUN_172__(j, 0))
		{
			// End:0x19F
			if(__NFUN_148__(__NFUN_339__(PickupEvents[j].EventTexture, IconTable.default.PickupEventIcons[IconIndex].Success), __NFUN_204__(PickupEvents[j].EventTime, PickupEventLifetime)))
			{
				__NFUN_209__(PickupEvents[j].EventNumber, Count);
				return;
			}
			__NFUN_185__(j);
			// [Loop Continue]
			goto J0x12F;
		}
		i = PickupEvents.Add(1);
		PickupEvents[i].EventTexture = Mat;
		PickupEvents[i].EventTime = PickupEventLifetime;
		PickupEvents[i].EventNumber = Count;
		// End:0x21A
		if(bPickupFailed)
		{
			PickupEvents[i].EventColor = DisabledInventoryIconColor;			
		}
		else
		{
			PickupEvents[i].EventColor = WhiteColor;
		}
	}
	return;
}

simulated function RegisterPickupEventDLC(Texture Icon, bool bPickupFailed, float Count)
{
	local int i, j;
	local MaterialEx Mat;

	// End:0x0E
	if(__NFUN_339__(Icon, none))
	{
		return;
	}
	Mat = Icon;
	// End:0x16A
	if(__NFUN_340__(Mat, none))
	{
		// End:0x6F
		if(bPickupFailed)
		{
			i = __NFUN_166__(string(PickupEvents), 1);
			J0x3D:

			// End:0x6F [Loop If]
			if(__NFUN_172__(i, 0))
			{
				// End:0x65
				if(__NFUN_339__(PickupEvents[i].EventTexture, Mat))
				{
					return;
				}
				__NFUN_185__(i);
				// [Loop Continue]
				goto J0x3D;
			}
		}
		j = __NFUN_166__(string(PickupEvents), 1);
		J0x7E:

		// End:0xE3 [Loop If]
		if(__NFUN_172__(j, 0))
		{
			// End:0xD9
			if(__NFUN_148__(__NFUN_339__(PickupEvents[j].EventTexture, Mat), __NFUN_204__(PickupEvents[j].EventTime, PickupEventLifetime)))
			{
				__NFUN_209__(PickupEvents[j].EventNumber, Count);
				return;
			}
			__NFUN_185__(j);
			// [Loop Continue]
			goto J0x7E;
		}
		i = PickupEvents.Add(1);
		PickupEvents[i].EventTexture = Mat;
		PickupEvents[i].EventTime = PickupEventLifetime;
		PickupEvents[i].EventNumber = Count;
		// End:0x154
		if(bPickupFailed)
		{
			PickupEvents[i].EventColor = DisabledInventoryIconColor;			
		}
		else
		{
			PickupEvents[i].EventColor = WhiteColor;
		}
	}
	return;
}

simulated function TickPickupEvents(float Delta)
{
	local int i;

	i = __NFUN_166__(string(PickupEvents), 1);
	J0x0F:

	// End:0x61 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		__NFUN_210__(PickupEvents[i].EventTime, Delta);
		// End:0x57
		if(__NFUN_202__(PickupEvents[i].EventTime, 0))
		{
			PickupEvents.Remove(i, 1);
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x0F;
	}
	return;
}

simulated function RegisterQuestItem(class<Inventory> NewQuestItemClass)
{
	local int i;

	// End:0x4A
	if(__NFUN_339__(NewQuestItemClass, none))
	{
		Warn(__NFUN_302__(string(self), ":RegisterQuestItem - NewQuestItemClass is None."));
		return;
	}
	// End:0xAB
	if(__NFUN_145__(__NFUN_357__(NewQuestItemClass, class'dnQuestItem')))
	{
		Warn(__NFUN_303__(__NFUN_303__(__NFUN_302__(string(self), ":RegisterQuestItem -"), string(NewQuestItemClass)), "is not a child of dnQuestItem."));
		return;
	}
	i = 0;
	J0xB2:

	// End:0xE9 [Loop If]
	if(__NFUN_169__(i, string(QuestItems)))
	{
		// End:0xDF
		if(__NFUN_339__(QuestItems[i].Class, NewQuestItemClass))
		{
			return;
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0xB2;
	}
	i = QuestItems.Add(1);
	QuestItems[i].Class = class<dnQuestItem>(NewQuestItemClass);
	QuestItems[i].Alpha = 0;
	QuestItems[i].AlphaTarget = 1;
	QuestItems[i].GlowAlpha = 0;
	QuestItems[i].GlowAlphaTarget = 1;
	QuestItems[i].GlowHoldTime = QuestItemGlowHoldTime;
	// End:0x1E3
	if(__NFUN_309__(QuestItems[i].Class.default.QuestItemTip, ""))
	{
		ActiveHint = none;
		HUDMessages[4].TargetAlpha = 1;
		HUDMessages[4].Message = QuestItems[i].Class.default.QuestItemTip;
	}
	return;
}

simulated function UnregisterQuestItem()
{
	local int i;

	i = 0;
	J0x07:

	// End:0x37 [Loop If]
	if(__NFUN_169__(i, string(QuestItems)))
	{
		QuestItems[i].AlphaTarget = 0;
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

final function TickQuestItemInfo(float Delta)
{
	local int i;

	i = __NFUN_166__(string(QuestItems), 1);
	J0x0F:

	// End:0x2D2 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x93
		if(__NFUN_201__(QuestItems[i].AlphaTarget, QuestItems[i].Alpha))
		{
			QuestItems[i].Alpha = __NFUN_227__(__NFUN_198__(QuestItems[i].Alpha, __NFUN_195__(Delta, QuestItemFadeRate)), QuestItems[i].Alpha, QuestItems[i].AlphaTarget);			
		}
		else
		{
			// End:0x109
			if(__NFUN_200__(QuestItems[i].AlphaTarget, QuestItems[i].Alpha))
			{
				QuestItems[i].Alpha = __NFUN_227__(__NFUN_199__(QuestItems[i].Alpha, __NFUN_195__(Delta, QuestItemFadeRate)), QuestItems[i].AlphaTarget, QuestItems[i].Alpha);
			}
		}
		// End:0x14E
		if(__NFUN_148__(__NFUN_204__(QuestItems[i].Alpha, 0), __NFUN_204__(QuestItems[i].AlphaTarget, 0)))
		{
			QuestItems.Remove(i, 1);
			// [Explicit Continue]
			goto J0x2C8;
		}
		// End:0x1C7
		if(__NFUN_201__(QuestItems[i].GlowAlphaTarget, QuestItems[i].GlowAlpha))
		{
			QuestItems[i].GlowAlpha = __NFUN_227__(__NFUN_198__(QuestItems[i].GlowAlpha, __NFUN_195__(Delta, QuestItemGlowFadeRate)), QuestItems[i].GlowAlpha, QuestItems[i].GlowAlphaTarget);
			// [Explicit Continue]
			goto J0x2C8;
		}
		// End:0x252
		if(__NFUN_148__(__NFUN_204__(QuestItems[i].GlowAlpha, QuestItems[i].GlowAlphaTarget), __NFUN_201__(QuestItems[i].GlowHoldTime, 0)))
		{
			__NFUN_210__(QuestItems[i].GlowHoldTime, Delta);
			// End:0x24F
			if(__NFUN_202__(QuestItems[i].GlowHoldTime, 0))
			{
				QuestItems[i].GlowAlphaTarget = 0;
			}
			// [Explicit Continue]
			goto J0x2C8;
		}
		// End:0x2C8
		if(__NFUN_200__(QuestItems[i].GlowAlphaTarget, QuestItems[i].GlowAlpha))
		{
			QuestItems[i].GlowAlpha = __NFUN_227__(__NFUN_199__(QuestItems[i].GlowAlpha, __NFUN_195__(Delta, QuestItemGlowFadeRate)), QuestItems[i].GlowAlphaTarget, QuestItems[i].GlowAlpha);
		}
		J0x2C8:

		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x0F;
	}
	return;
}

simulated function AddBossMeter(RenderActor BossActor, string BossName, optional Actor triggerreference)
{
	// End:0x0E
	if(__NFUN_339__(BossActor, none))
	{
		return;
	}
	// End:0x2B
	if(__NFUN_148__(bDrawBossMeter, __NFUN_339__(BossActor, BossMeterActor)))
	{
		return;
	}
	bDrawBossMeter = true;
	BossMeterActor = BossActor;
	PrevBossHealthPct = 1;
	BossMeterText = BossName;
	BossMeterReference = TriggerPlayer(triggerreference);
	return;
}

simulated function RemoveBossMeter(RenderActor BossActor)
{
	bDrawBossMeter = false;
	BossMeterActor = none;
	return;
}

simulated event UpdateBossName()
{
	// End:0x21
	if(__NFUN_340__(BossMeterReference, none))
	{
		BossMeterText = BossMeterReference.BossMeterName;
	}
	return;
}

simulated function AddActivePipeBomb(dnGrenade PipeBomb)
{
	// End:0x17
	if(__NFUN_145__(PipeBomb.bShowHUDWarning))
	{
		return;
	}
	ActivePipeBombs[ActivePipeBombs.Add(1)] = PipeBomb;
	return;
}

simulated function RemoveActivePipeBomb(dnGrenade PipeBomb)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x45 [Loop If]
	if(__NFUN_169__(i, string(ActivePipeBombs)))
	{
		// End:0x3B
		if(__NFUN_339__(ActivePipeBombs[i], PipeBomb))
		{
			ActivePipeBombs.Remove(__NFUN_185__(i), 1);
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

// Export UDukeHUD::execDrawStatusTimerHUD(FFrame&, void* const)
native function DrawStatusTimerHUD(Canvas C)
{
	//native.C;	
}

simulated function ClearKeyInfoAlpha()
{
	local int i;

	i = 0;
	J0x07:

	// End:0x33 [Loop If]
	if(__NFUN_169__(i, 9))
	{
		InteractKeyInfo[i].Alpha = 0;
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1269__(class'crosshair11bc_fb_gs');
	PrecacheIndex.__NFUN_1269__(WeaponAmmoBackdrop);
	PrecacheIndex.__NFUN_1269__(WeaponAmmoDirtyOverlay);
	// End:0x6A
	if(__NFUN_309__(Level.LevelEnterText, ""))
	{
		PrecacheIndex.__NFUN_1269__(TitleBackgroundMaterial);
	}
	PrecacheIndex.__NFUN_1269__(GrenadeIndicatorMaterial);
	PrecacheIndex.__NFUN_1269__(InventoryDpadSplash);
	PrecacheIndex.__NFUN_1269__(EgoBackdrop);
	PrecacheIndex.__NFUN_1269__(EgoBar);
	PrecacheIndex.__NFUN_1269__(EgoBarFill);
	PrecacheIndex.__NFUN_1269__(BlackTexture);
	PrecacheIndex.__NFUN_1269__(WhiteTexture);
	PrecacheIndex.__NFUN_1269__(CrouchingIcon);
	PrecacheIndex.__NFUN_1269__(StandingIcon);
	// End:0x131
	if(Level.bPlayerCanSwim)
	{
		PrecacheIndex.__NFUN_1269__(BoostMeter);
	}
	PrecacheIndex.__NFUN_1269__(FilmGrainVignetteMaterial);
	PrecacheIndex.__NFUN_1269__(class'Menu_nuke_Saving_Data_FB');
	PrecacheIndex.__NFUN_1269__(class'Logo');
	PrecacheIndex.__NFUN_1269__(class'Border_Cap');
	PrecacheIndex.__NFUN_1269__(class'Border_Straight');
	PrecacheIndex.__NFUN_1269__(class'Backdrop');
	PrecacheIndex.__NFUN_1269__(class'XboxButtons');
	PrecacheIndex.__NFUN_1269__(class'XBox_Controller');
	PrecacheIndex.__NFUN_1269__(class'PS3Buttons');
	PrecacheIndex.__NFUN_1269__(class'PS3_Controller');
	PrecacheIndex.__NFUN_1269__(class'scroll_bg');
	// End:0x24E
	if(__NFUN_145__(PrecacheIndex.bIsMP))
	{
		PrecacheIndex.__NFUN_1277__(class'DukePlayer'.default.VoicePack, 'EgoCap_Increase');
		PrecacheIndex.__NFUN_1277__(class'DukePlayer'.default.VoicePack, 'EgoCap_Max');
	}
	PrecacheIndex.__NFUN_1269__(WeaponSelectBackground);
	PrecacheIndex.__NFUN_1269__(WeaponSelectBackgroundHighlighted);
	return;
}

defaultproperties
{
	TextColor=(B=121,G=2,R=1,A=128)
	HUDColor=(B=121,G=2,R=1,A=128)
	TextAltColor=(B=121,G=2,R=1,A=0)
	TitleBackgroundMaterial='dt_hud.ingame_hud.hintbox_75'
	TitleBackgroundPadding=24
	RootIndexTop=660
	IndexAdjust=20
	ItemSpace=5
	UseInfoPosition=1
	CrosshairTextures(0)='dnDeathmatchGameReplicationInfo'
	CrosshairTextures(1)='dt_hud.crosshairs.crosshair11bc_fb_gs'
	CrosshairTextures(2)='dt_hud.crosshairs.crosshair_at_fb'
	CrosshairTextures(3)='dt_hud.crosshairs.crosshair_atc_fb'
	CrosshairTextures(4)='dt_hud.crosshairs.crosshair_devastator_fb'
	CrosshairTextures(5)='dt_hud.crosshairs.crosshair_enforcer_fb'
	CrosshairTextures(6)='dt_hud.crosshairs.crosshair_freezeray_fb'
	CrosshairTextures(7)='dt_hud.crosshairs.crosshair_ripper_fb'
	CrosshairTextures(8)='dt_hud.crosshairs.crosshair_shotgun_fb'
	CrosshairTextures(9)='dt_hud.crosshairs.crosshair_shrinkray_fb'
	CrosshairTextures(10)='dt_hud.crosshairs.crosshair_sniper_fb'
	CrosshairTextures(11)='dt_hud.ingame_hud.sniperoverlay_dot'
	CrosshairTextures(12)='dt_hud.crosshairs.crosshair_rpg'
	CrosshairTextures(13)='dt_hud.crosshairs.crosshair_rpg2'
	CrosshairTextures(14)='dt_hud.crosshairs.crosshair_rpg3'
	CrosshairTextures(15)=FloatProperty'dnCamera.fNetPositionTime'
	CrosshairTextures(16)=ObjectProperty'dnControl_CameraViewer_Fullscreen.CurrentCamera'
	CrosshairTextures(17)=none
	CrosshairTextures(18)=none
	CrosshairTextures(19)=ArrayProperty'DukeHUD.QuickWeaponList'
	CrosshairTextures(20)=ObjectProperty'VehicleBase.Used.Other'
	CrosshairTextures(21)=ObjectProperty'dnControl_CameraViewer_Fullscreen.CurrentCamera'
	CrosshairTextures(22)=none
	CrosshairTextures(23)=none
	CrosshairTextures(24)=IntProperty'DukeHUD.DrawDebugHUD.i'
	CrosshairTextures(25)=FloatProperty'GeoWaterMultisampler.Tick.DeltaSeconds'
	CrosshairTextures(26)='Engine.HUD'
	CrosshairTextures(27)='DukeMultiPlayer'
	CrosshairTextures(28)=ObjectProperty'dnControl_CameraViewer_Fullscreen.CurrentCamera'
}