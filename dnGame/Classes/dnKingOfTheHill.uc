/*******************************************************************************
 * dnKingOfTheHill generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnKingOfTheHill extends dnDeathmatchGame_TeamDM
	config(Multiplayer)
	collapsecategories
	hidecategories(movement,Collision,Lighting,LightColor);

var bool bForceSpectateOnJoin;
var float switchTime;
var() float minSwitchTime;
var() float maxSwitchTime;
var float targetSwitchTime;
var() int maxOwnage;
var float hillmovesoundwarningtime;
var bool bAlertedHillMove;
var bool bInitMarkers;
var array<dnKingOfTheHill_Marker> markers;
var float markerUpdateDelta;
var dnKingOfTheHill_Marker InitialHill;
var dnKingOfTheHill_Marker CurrentMarker;
var bool bUseInitialHill;
var bool bGameStarted;
var int LastControlled;
var float CheckAnnounceStep;
var bool bCanSwitch;
var bool bCountdownValidated;

function PostBeginPlay()
{
	super.PostBeginPlay();
	__NFUN_607__(CheckAnnounceStep, true, 'AnnounceHillChangeMaybe');
	return;
}

function AnnounceHillChangeMaybe()
{
	// End:0xA1
	if(__NFUN_148__(__NFUN_174__(CurrentMarker.Fresh, LastControlled), __NFUN_201__(__NFUN_199__(targetSwitchTime, switchTime), CheckAnnounceStep)))
	{
		switch(CurrentMarker.Fresh)
		{
			// End:0x63
			case -1:
				Announcer.TriggerQueueAnnounce('Announce_ControlContest');
				// End:0xA1
				break;
			// End:0x7F
			case 0:
				Announcer.TriggerQueueAnnounce('Announce_Control_Blue');
				// End:0xA1
				break;
			// End:0x9B
			case 1:
				Announcer.TriggerQueueAnnounce('Announce_Control_Red');
				// End:0xA1
				break;
			// End:0xFFFF
			default:
				// End:0xA1
				break;
				break;
		}
	}
	LastControlled = CurrentMarker.Fresh;
	return;
}

function ScoreKill(Pawn Killer, Pawn Victim)
{
	BaseMutator.ScoreKill(Killer, Victim);
	// End:0x69
	if(__NFUN_148__(__NFUN_340__(dnKotHPlayer(Victim), none), dnKotHPlayer(Victim).Capturing))
	{
		dnKotHPlayer(Killer).PlayerProgress.Stat_HTTKKillerInCapturePoint(Victim);
	}
	return;
}

function RequestEndGame(string Reason)
{
	local int i;

	super(dnDeathmatchGame).RequestEndGame(Reason);
	J0x0B:

	// End:0x3C [Loop If]
	if(__NFUN_169__(i, string(markers)))
	{
		markers[i].SetActive(false);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x0B;
	}
	return;
}

function ScorePoint(DukeMultiPlayer Scorer)
{
	local Pawn P;

	// End:0x23
	if(__NFUN_150__(__NFUN_150__(bEndOfGameRequest, __NFUN_145__(bGameStarted)), IsAlone()))
	{
		return;
	}
	__NFUN_184__(Teams[int(Scorer.PlayerReplicationInfo.Team)].Score);
	P = Level.PawnList;
	J0x64:

	// End:0xEE [Loop If]
	if(__NFUN_340__(P, none))
	{
		// End:0xD6
		if(__NFUN_148__(__NFUN_340__(dnKotHPlayer(P), none), __NFUN_173__(int(dnKotHPlayer(P).PlayerReplicationInfo.Team), int(Scorer.PlayerReplicationInfo.Team))))
		{
			dnKotHPlayer(P).AlertSound();
		}
		P = P.NextPawn;
		// [Loop Continue]
		goto J0x64;
	}
	super.ScorePoint(Scorer);
	// End:0x158
	if(__NFUN_148__(__NFUN_145__(bOvertime), __NFUN_170__(GoalTeamScore, 0)))
	{
		// End:0x158
		if(__NFUN_172__(Teams[int(Scorer.PlayerReplicationInfo.Team)].Score, GoalTeamScore))
		{
			RequestEndGame("ownagelimit");
		}
	}
	return;
}

function GameEndWaitTimer()
{
	super(dnDeathmatchGame).GameEndWaitTimer();
	return;
}

event InitGame(string Options, out string Error)
{
	super.InitGame(Options, Error);
	GoalTeamScore = GetIntOption(Options, "CaptureTime", GoalTeamScore);
	InitMarkers();
	return;
}

function InitMarkers()
{
	local dnKingOfTheHill_Marker marker;

	// End:0x56
	if(__NFUN_145__(bInitMarkers))
	{
		// End:0x4D
		foreach __NFUN_747__(class'dnKingOfTheHill_Marker', marker)
		{
			// End:0x39
			if(marker.bInitial)
			{
				InitialHill = marker;
			}
			markers[markers.Add(1)] = marker;			
		}		
		bInitMarkers = true;
	}
	return;
}

function NoTimerUpdate()
{
	local int i;
	local dnKingOfTheHill_Projector Projector;

	bGameStarted = false;
	// End:0x132
	if(__NFUN_145__(bUseInitialHill))
	{
		Projector = dnKotHGameReplicationInfo(Level.GRI).GetProjector();
		J0x38:

		// End:0x9A [Loop If]
		if(__NFUN_169__(i, string(markers)))
		{
			// End:0x78
			if(markers[i].bActive)
			{
				markers[i].SetActive(false);
			}
			markers[i].bHasBeenUsed = false;
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x38;
		}
		bCanSwitch = true;
		switchTime = default.switchTime;
		targetSwitchTime = default.targetSwitchTime;
		bUseInitialHill = true;
		bCountdownValidated = false;
		dnKotHGameReplicationInfo(GameReplicationInfo).HillCountdown = 0;
		dnKotHGameReplicationInfo(Level.GRI).Cylinder.__NFUN_590__(true);
		dnKotHGameReplicationInfo(Level.GRI).Projector.TurnOffGroup();
	}
	return;
}

function GameSpeedCallback()
{
	local Pawn P;

	Timer();
	// End:0x6B
	if(__NFUN_203__(GameReplicationInfo.CountDown, 0))
	{
		// End:0x40
		if(__NFUN_201__(GameReplicationInfo.CountDown, 0))
		{
			bCountdownValidated = true;
		}
		__NFUN_355__(__NFUN_302__("CountDown=", string(GameReplicationInfo.CountDown)));
		CountDownTimer();		
	}
	else
	{
		// End:0xB7
		if(__NFUN_201__(GameReplicationInfo.ShowWinnerSeconds, 0))
		{
			__NFUN_355__(__NFUN_302__("ShowWinnerSeconds=", string(GameReplicationInfo.ShowWinnerSeconds)));
			GameEndWaitTimer();			
		}
		else
		{
			// End:0xF7
			if(__NFUN_148__(__NFUN_145__(IsAlone()), bCountdownValidated))
			{
				// End:0xEE
				if(__NFUN_145__(bGameStarted))
				{
					__NFUN_608__('NoTimerUpdate');
					__NFUN_607__(0.1, true, 'GameTimerUpdate');
				}
				GameTimer();				
			}
			else
			{
				// End:0x116
				if(bGameStarted)
				{
					__NFUN_608__('GameTimerUpdate');
					__NFUN_607__(0.1, true, 'NoTimerUpdate');
				}
				NoTimer();
			}
		}
	}
	return;
}

function GameTimerUpdate()
{
	local int temp;
	local Pawn P;

	bGameStarted = true;
	// End:0x1E
	if(__NFUN_150__(bGameEnded, bEndOfGameRequest))
	{
		return;
	}
	// End:0x33
	if(__NFUN_202__(switchTime, float(0)))
	{
		ChooseHill();		
	}
	else
	{
		bCanSwitch = true;
	}
	// End:0x6B
	if(__NFUN_148__(__NFUN_148__(__NFUN_202__(switchTime, hillmovesoundwarningtime), __NFUN_201__(switchTime, float(0))), __NFUN_145__(bUseInitialHill)))
	{
		AlertHillMove();
	}
	temp = int(dnKotHGameReplicationInfo(GameReplicationInfo).HillCountdown);
	switchTime = float(int(__NFUN_197__(float(GameReplicationInfo.GetRemainingRoundTime()), targetSwitchTime)));
	// End:0xE4
	if(__NFUN_148__(__NFUN_203__(switchTime, float(0)), __NFUN_202__(GameReplicationInfo.CountDown, float(0))))
	{
		dnKotHGameReplicationInfo(GameReplicationInfo).HillCountdown = switchTime;
	}
	// End:0x19D
	if(__NFUN_148__(__NFUN_148__(__NFUN_206__(float(temp), dnKotHGameReplicationInfo(GameReplicationInfo).HillCountdown), __NFUN_201__(dnKotHGameReplicationInfo(GameReplicationInfo).HillCountdown, float(0))), __NFUN_202__(dnKotHGameReplicationInfo(GameReplicationInfo).HillCountdown, float(3))))
	{
		P = Level.PawnList;
		J0x153:

		// End:0x19D [Loop If]
		if(__NFUN_340__(P, none))
		{
			// End:0x185
			if(__NFUN_340__(dnKotHPlayer(P), none))
			{
				dnKotHPlayer(P).AlertSound();
			}
			P = P.NextPawn;
			// [Loop Continue]
			goto J0x153;
		}
	}
	return;
}

function AlertHillMove()
{
	local Pawn P;

	// End:0x0B
	if(bAlertedHillMove)
	{
		return;
	}
	bAlertedHillMove = true;
	Announcer.TriggerQueueAnnounce('Announce_ControlMove');
	return;
}

function ChooseHill()
{
	local dnKingOfTheHill_Marker vol;
	local int newHill, i;
	local array<dnKingOfTheHill_Marker> unusedhills;
	local int CurrentIndex;
	local Pawn P;

	// End:0x0D
	if(__NFUN_145__(bCanSwitch))
	{
		return;
	}
	bAlertedHillMove = false;
	bCanSwitch = false;
	J0x1D:

	// End:0x10C [Loop If]
	if(__NFUN_173__(string(unusedhills), 0))
	{
		i = 0;
		J0x30:

		// End:0xB9 [Loop If]
		if(__NFUN_169__(i, string(markers)))
		{
			// End:0x64
			if(markers[i].bActive)
			{
				CurrentIndex = i;
			}
			markers[i].SetActive(false);
			// End:0xAF
			if(__NFUN_145__(markers[i].bHasBeenUsed))
			{
				unusedhills[unusedhills.Add(1)] = markers[i];
			}
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x30;
		}
		i = 0;
		// End:0x109
		if(__NFUN_173__(string(unusedhills), 0))
		{
			J0xCC:

			// End:0x109 [Loop If]
			if(__NFUN_169__(i, string(markers)))
			{
				markers[i].bHasBeenUsed = __NFUN_173__(i, CurrentIndex);
				__NFUN_184__(i);
				// [Loop Continue]
				goto J0xCC;
			}
		}
		// [Loop Continue]
		goto J0x1D;
	}
	newHill = __NFUN_187__(string(unusedhills));
	// End:0x16A
	if(__NFUN_148__(__NFUN_340__(InitialHill, none), bUseInitialHill))
	{
		bUseInitialHill = false;
		InitialHill.SetActive(true);
		InitialHill.bHasBeenUsed = true;
		CurrentMarker = InitialHill;		
	}
	else
	{
		P = Level.PawnList;
		J0x17F:

		// End:0x1CA [Loop If]
		if(__NFUN_340__(P, none))
		{
			// End:0x1B2
			if(__NFUN_340__(dnKotHPlayer(P), none))
			{
				dnKotHPlayer(P).AlertSound(true);
			}
			P = P.NextPawn;
			// [Loop Continue]
			goto J0x17F;
		}
		unusedhills[newHill].SetActive(true);
		unusedhills[newHill].bHasBeenUsed = true;
		CurrentMarker = unusedhills[newHill];
	}
	targetSwitchTime = __NFUN_198__(float(__NFUN_187__(int(__NFUN_199__(maxSwitchTime, minSwitchTime)))), minSwitchTime);
	return;
}

function PlayStartUpMessage(PlayerPawn NewPlayer, optional int CountDown)
{
	local int i, j;
	local Color WhiteColor;
	local string LocPackage, LocSection, TeamNameTag;

	LocSection = "dnKingOfTheHill";
	LocPackage = "dngame";
	NewPlayer.ClearProgressMessages();
	NewPlayer.SetProgressMessage(LocSection, "GameName", LocPackage, __NFUN_184__(i), true);
	// End:0x159
	if(__NFUN_169__(int(NewPlayer.PlayerReplicationInfo.Team), 2))
	{
		NewPlayer.SetProgressColor(TeamColor[int(NewPlayer.PlayerReplicationInfo.Team)], i);
		TeamNameTag = "TeamNamesMessages0";
		// End:0x10B
		if(__NFUN_173__(int(NewPlayer.PlayerReplicationInfo.Team), 1))
		{
			TeamNameTag = "TeamNamesMessages1";
		}
		NewPlayer.SetProgressMessageSplitByStr(LocSection, "StartupTeamMessage", TeamNameTag, "StartupTeamTrailer", LocPackage, __NFUN_184__(i));
	}
	// End:0x1A4
	if(__NFUN_170__(GoalTeamScore, 0))
	{
		NewPlayer.SetProgressMessageSplitByNum(LocSection, "GameGoalPrefix", GoalTeamScore, "GameGoal", LocPackage, __NFUN_184__(i));
	}
	// End:0x205
	if(__NFUN_170__(RoundTimeLimit, 0))
	{
		NewPlayer.SetProgressMessageSplitByNum(LocSection, "TimeLimitMessageStart", __NFUN_163__(RoundTimeLimit, 60), "TimeLimitMessageEnd", LocPackage, __NFUN_184__(i));
	}
	NewPlayer.SetProgressMessage(LocSection, "RulesMessage0", LocPackage, __NFUN_184__(i));
	// End:0x279
	if(bFriendlyFire)
	{
		NewPlayer.SetProgressMessage(LocSection, "FriendlyFireOnMessage", LocPackage, __NFUN_184__(i));		
	}
	else
	{
		NewPlayer.SetProgressMessage(LocSection, "FriendlyFireOffMessage", LocPackage, __NFUN_184__(i));
	}
	NewPlayer.SetProgressTime(float(StartupMessageDuration));
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'dnKingOfTheHill_Cylinder');
	PrecacheIndex.__NFUN_1266__(class'dnKingOfTheHill_Marker');
	PrecacheIndex.__NFUN_1266__(class'dnKingOfTheHill_Projector');
	PrecacheIndex.__NFUN_1266__(class'dnKingOfTheHill_ProjectorTeam0');
	PrecacheIndex.__NFUN_1266__(class'dnKingOfTheHill_ProjectorTeam1');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_MP_Announcer', 'Announce_ControlContest');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_MP_Announcer', 'Announce_Control_Blue');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_MP_Announcer', 'Announce_Control_Red');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_MP_Announcer', 'Announce_ControlMove');
	return;
}

defaultproperties
{
	minSwitchTime=60
	maxSwitchTime=60
	hillmovesoundwarningtime=10
	markerUpdateDelta=0.2
	bUseInitialHill=true
	LastControlled=-2
	CheckAnnounceStep=10
	bCanSwitch=true
	GoalTeamScore=100
	FragLimit=-1
	StartMessage="<?int?dnGame.dnKingOfTheHill.StartMessage?>"
	StartUpMessage="<?int?dnGame.dnKingOfTheHill.StartUpMessage?>"
	CountdownMessage="<?int?dnGame.dnKingOfTheHill.CountdownMessage?>"
	WaitingMessage1="<?int?dnGame.dnKingOfTheHill.WaitingMessage1?>"
	WaitingMessage2="<?int?dnGame.dnKingOfTheHill.WaitingMessage2?>"
	ReadyMessage="<?int?dnGame.dnKingOfTheHill.ReadyMessage?>"
	NotReadyMessage="<?int?dnGame.dnKingOfTheHill.NotReadyMessage?>"
	GameGoalPrefix="<?int?dnGame.dnKingOfTheHill.GameGoalPrefix?>"
	GameGoal="<?int?dnGame.dnKingOfTheHill.GameGoal?>"
	RulesMessage="<?int?dnGame.dnKingOfTheHill.RulesMessage?>"
	TimeLimitMessageStart="<?int?dnGame.dnKingOfTheHill.TimeLimitMessageStart?>"
	TimeLimitMessageEnd="<?int?dnGame.dnKingOfTheHill.TimeLimitMessageEnd?>"
	EndRoundMessage="<?int?dnGame.dnKingOfTheHill.EndRoundMessage?>"
	GameEndedMessage="<?int?dnGame.dnKingOfTheHill.GameEndedMessage?>"
	GameType=4
	bScoreTeamKills=false
	bDeathMatch=false
	ScoreboardType='dnDeathmatchGameScoreboard'
	RulesMenuType="dnWindow.UDukeMultiRulesSC"
	HUDType='dnKotHHUD'
	GameName="<?int?dnGame.dnKingOfTheHill.GameName?>"
	bOverridePlayerMesh=false
	GameReplicationInfoClass='dnKotHGameReplicationInfo'
	OverridePlayerClass='dnKotHPlayer'
}