/*******************************************************************************
 * MP_FreezeRay generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MP_FreezeRay extends MP_dnContinuousFireWeapon;

var Weapon_LightEx_FreezeRay_Siren SirenLightEx;
var float Frostiness;
var FreezeRayBeam FreezeBeam;
var Rotator FreezeBeamDir;
var SoftParticleSystem FreezeImpactEffect;
var() float BeamMaxLength;
var() float DamagePerSecond;
var() float RechargeFrequency;

simulated event PostNetInitial()
{
	super(Weapon).PostNetInitial();
	// End:0x1A
	foreach __NFUN_753__(class'Weapon_LightEx_FreezeRay_Siren', SirenLightEx)
	{
		// End:0x1A
		break;		
	}	
	FreezeBeam = FreezeRayBeam(FindMountedActor(, class'FreezeRayBeam'));
	FreezeImpactEffect = __NFUN_615__(class'FreezeRay_Impact_Flow');
	// End:0x5E
	if(__NFUN_340__(FreezeImpactEffect, none))
	{
		FreezeImpactEffect.Enabled = false;
	}
	TurnOffMountedLights();
	__NFUN_577__('SirenPulse', 'SirenPulse', 255, 0, 0.1, 2);
	return;
}

final simulated function EnableFreezeBeam()
{
	local Vector Start, Forward;

	// End:0x65
	if(__NFUN_173__(string(FreezeBeam.Segments), 0))
	{
		Instigator.GetWeaponAim(Start, Forward);
		FreezeBeamDir = Rotator(Forward);
		FreezeBeam.AddSegmentActorAndLoc(self, __NFUN_232__(0, 0, 0),,, 'mount_muzzle');
	}
	// End:0x7E
	if(__NFUN_173__(int(WeaponState), int(5)))
	{
		FindAndStopSound('FiringLoopBeam');
	}
	FindAndPlaySound('FiringLoopBeam', 1);
	__NFUN_605__(0.03, true, 'ExpendFreezeAmmo');
	__NFUN_608__('RechargeFreezeAmmo');
	return;
}

final simulated function DisableFreezeBeam()
{
	// End:0x1C
	if(__NFUN_340__(FreezeBeam, none))
	{
		FreezeBeam.EmptyControlPoints();
	}
	// End:0x4C
	if(__NFUN_340__(FreezeImpactEffect, none))
	{
		FreezeImpactEffect.Enabled = false;
		FreezeImpactEffect.DisableTickWhenEmpty = true;
	}
	FindAndStopSound('FiringLoopBeam', 3);
	FindAndStopSound('FiringLoop_Impact',, FreezeImpactEffect);
	__NFUN_606__('ExpendFreezeAmmo');
	__NFUN_607__(RechargeFrequency, true, 'RechargeFreezeAmmo');
	return;
}

final function ExpendFreezeAmmo()
{
	ExpendAmmo(1);
	return;
}

final function RechargeFreezeAmmo()
{
	// End:0x36
	if(__NFUN_200__(Ammo.Charge, Ammo.MaxCharge))
	{
		__NFUN_209__(Ammo.Charge, float(1));
	}
	return;
}

simulated event Tick(float DeltaTime)
{
	local Vector Start, End, Forward;
	local STraceFlags TraceFlags;
	local STraceHitResult TraceHitResult;
	local Actor HitActor;
	local bool bFreezeBeamActive;

	// End:0x2C
	if(__NFUN_148__(__NFUN_340__(FreezeBeam, none), __NFUN_170__(string(FreezeBeam.Segments), 0)))
	{
		bFreezeBeamActive = true;
	}
	// End:0xA8
	if(__NFUN_150__(__NFUN_173__(int(WeaponState), int(4)), __NFUN_173__(int(WeaponState), int(5))))
	{
		HandleSelfFreeze();
		Frostiness = __NFUN_227__(__NFUN_198__(Frostiness, __NFUN_195__(0.1, DeltaTime)), 0, 1);
		// End:0xA5
		if(__NFUN_148__(__NFUN_145__(bFreezeBeamActive), __NFUN_145__(Instigator.IsFrozen())))
		{
			EnableFreezeBeam();
			bFreezeBeamActive = true;
		}		
	}
	else
	{
		Frostiness = __NFUN_227__(__NFUN_199__(Frostiness, __NFUN_195__(0.1, DeltaTime)), 0, 1);
	}
	// End:0x451
	if(bFreezeBeamActive)
	{
		FreezeBeam.BeamStartWidth = __NFUN_195__(FreezeBeam.default.BeamStartWidth, Instigator.ShrinkScale);
		FreezeBeam.BeamEndWidth = __NFUN_195__(FreezeBeam.default.BeamEndWidth, Instigator.ShrinkScale);
		FreezeBeam.MaxAmplitude = __NFUN_195__(FreezeBeam.default.MaxAmplitude, Instigator.ShrinkScale);
		FreezeBeam.Noise = __NFUN_195__(FreezeBeam.default.Noise, Instigator.ShrinkScale);
		Instigator.GetWeaponAim(Start, Forward);
		FreezeBeamDir = __NFUN_287__(__NFUN_224__(1, __NFUN_195__(20, DeltaTime)), FreezeBeamDir, Rotator(Forward));
		End = __NFUN_238__(Start, __NFUN_234__(__NFUN_235__(BeamMaxLength, Vector(FreezeBeamDir)), Instigator.ShrinkScale));
		TraceFlags.bTraceActors = true;
		TraceFlags.bMeshAccurate = true;
		TraceFlags.bShotTrace = true;
		TraceFlags.bNoFudge = true;
		HitActor = __NFUN_736__(Start, End, TraceFlags, TraceHitResult);
		// End:0x400
		if(__NFUN_340__(HitActor, none))
		{
			FreezeBeam.Segments[0].Location2 = TraceHitResult.Location;
			FreezeBeam.BeamEndWidth = __NFUN_228__(__NFUN_196__(__NFUN_251__(__NFUN_239__(TraceHitResult.Location, Start)), BeamMaxLength), FreezeBeam.BeamEndWidth, FreezeBeam.BeamStartWidth);
			// End:0x3FD
			if(__NFUN_173__(int(WeaponState), int(4)))
			{
				FreezeImpactEffect.Enabled = true;
				FreezeImpactEffect.DisableTickWhenEmpty = false;
				FreezeImpactEffect.TickStyle = FreezeImpactEffect.default.TickStyle;
				FreezeImpactEffect.__NFUN_645__(TraceHitResult.Location);
				FreezeImpactEffect.__NFUN_652__(Rotator(TraceHitResult.Normal));
				FreezeImpactEffect.InitialVelocity = HitActor.Velocity;
				FreezeImpactEffect.SystemSizeScale = __NFUN_195__(FreezeImpactEffect.default.SystemSizeScale, Instigator.ShrinkScale);
				HitActor.TakeDamage(Instigator, __NFUN_195__(__NFUN_195__(DeltaTime, DamagePerSecond), Instigator.DrawScale), TraceHitResult.Location, Vector(FreezeBeamDir), class'ColdDamage', 'None', Start);
				FindAndPlaySound('FiringLoop_Impact',,,, FreezeImpactEffect);
			}			
		}
		else
		{
			FreezeBeam.Segments[0].Location2 = End;
			FreezeImpactEffect.Enabled = false;
			FreezeImpactEffect.DisableTickWhenEmpty = true;
			FindAndStopSound('FiringLoop_Impact',, FreezeImpactEffect);
		}
	}
	super(Weapon).Tick(DeltaTime);
	return;
}

simulated event ScriptGetActorColor()
{
	local byte ColorIntensity;

	ColorIntensity = byte(__NFUN_195__(Frostiness, float(103)));
	__NFUN_601__('Generic0', NewColorBytes(ColorIntensity, ColorIntensity, ColorIntensity));
	// End:0xD1
	if(__NFUN_173__(int(Instigator.PlayerReplicationInfo.Team), 0))
	{
		SirenLightEx.LightColor.R = 0;
		SirenLightEx.LightColor.B = byte(__NFUN_585__('SirenPulse', 'SirenPulse'));
		SirenLightEx.LightColor.G = byte(__NFUN_195__(float(SirenLightEx.LightColor.B), 0.11764));
		__NFUN_601__('Generic1', NewColorBytes(0, 30, 255));		
	}
	else
	{
		SirenLightEx.LightColor.R = byte(__NFUN_585__('SirenPulse', 'SirenPulse'));
		SirenLightEx.LightColor.B = 0;
		SirenLightEx.LightColor.G = 0;
		__NFUN_601__('Generic1', NewColorBytes(255, 0, 0));
	}
	super(Actor).ScriptGetActorColor();
	return;
}

simulated function bool CanFire()
{
	// End:0x34
	if(__NFUN_150__(__NFUN_173__(int(Instigator.FrozenState), int(1)), __NFUN_173__(int(Instigator.FrozenState), int(2))))
	{
		return false;
	}
	return super(MP_Weapon).CanFire();
	return;
}

simulated function FireSuccess(bool bContinueFire)
{
	super.FireSuccess(bContinueFire);
	return;
}

simulated function SetWeaponState(byte NewWeaponState)
{
	super.SetWeaponState(NewWeaponState);
	// End:0x40
	if(__NFUN_148__(__NFUN_340__(FreezeBeam, none), __NFUN_150__(__NFUN_173__(int(WeaponState), int(4)), __NFUN_173__(int(WeaponState), int(5)))))
	{
		EnableFreezeBeam();		
	}
	else
	{
		DisableFreezeBeam();
	}
	return;
}

simulated function OwnerDied()
{
	DisableFreezeBeam();
	super(Inventory).OwnerDied();
	return;
}

simulated function OwnerPause()
{
	super.OwnerPause();
	DisableFreezeBeam();
	return;
}

simulated function OwnerUnpause()
{
	super.OwnerUnpause();
	// End:0x38
	if(__NFUN_148__(__NFUN_340__(FreezeBeam, none), __NFUN_150__(__NFUN_173__(int(WeaponState), int(4)), __NFUN_173__(int(WeaponState), int(5)))))
	{
		EnableFreezeBeam();
	}
	return;
}

simulated function bool BringUp()
{
	// End:0x26
	if(super(Weapon).BringUp())
	{
		AnimationController.SetAnimState('SirenSpin');
		TurnOnMountedLights();
		return true;
	}
	return false;
	return;
}

simulated function bool PutDown()
{
	// End:0x11
	if(super.PutDown())
	{
		TurnOffMountedLights();
		return true;
	}
	return false;
	return;
}

simulated event HiddenChanged()
{
	super(Actor).HiddenChanged();
	// End:0x76
	if(__NFUN_340__(SirenLightEx, none))
	{
		// End:0x45
		if(bHidden)
		{
			SirenLightEx.LightRadius = 0;
			SirenLightEx.bAlwaysVisible = false;			
		}
		else
		{
			SirenLightEx.LightRadius = SirenLightEx.default.LightRadius;
			SirenLightEx.bAlwaysVisible = true;
		}
	}
	return;
}

event Projectile ProjectileFire(class<Projectile> ProjClass)
{
	// End:0x0B
	if(HandleSelfFreeze())
	{
		return none;
	}
	return super(MP_Weapon).ProjectileFire(ProjClass);
	return;
}

final function bool HandleSelfFreeze()
{
	local Vector BarrelLoc;
	local Pawn Victim;

	// End:0xD7
	if(PhysicsVolume.bWaterVolume)
	{
		GetCurrentBarrelLocation(BarrelLoc);
		// End:0xD4
		foreach __NFUN_754__(class'Pawn', Victim, 128, BarrelLoc,, true)
		{
			// End:0x51
			if(Victim.bGodMode)
			{
				continue;				
			}
			Victim.Ego = 0;
			Victim.__NFUN_832__(4);
			Victim.TakeDamage(Instigator, 1, BarrelLoc, __NFUN_253__(__NFUN_239__(Victim.Location, BarrelLoc)), class'ColdDamage');
			Victim.StartFreezing(class'ColdDamage'.default.FreezeDuration);			
		}		
		return true;
	}
	return false;
	return;
}

k2call simulated function Fire_Effects(optional EventInfo AnimEventInfo)
{
	SelectNextFireMuzzle();
	return;
}

simulated event class<Projectile> GetProjectileClass()
{
	return class'dnRocket_IceBlast';
	return;
}

simulated function OnDestroyed()
{
	super.OnDestroyed();
	// End:0x1F
	if(__NFUN_340__(FreezeImpactEffect, none))
	{
		FreezeImpactEffect.__NFUN_614__();
	}
	return;
}

simulated function SelectNextFireMuzzle()
{
	MuzzleFireIndex = 0;
	return;
}

simulated function bool CanPlaySound(name GroupName)
{
	// End:0x12
	if(__NFUN_341__(GroupName, 'Fire'))
	{
		return false;
	}
	return super(Weapon).CanPlaySound(GroupName);
	return;
}

simulated function bool HasUnfire()
{
	return super(Weapon).HasUnfire();
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	local int i, j;

	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'dnControl_Execution');
	PrecacheIndex.__NFUN_1266__(class'FreezeRay_Impact_Flow');
	PrecacheIndex.__NFUN_1279__(class'FrozenShatterDamage');
	PrecacheIndex.__NFUN_1276__(class'Pawn'.default.FreezingSound);
	PrecacheIndex.__NFUN_1276__(class'Pawn'.default.ThawingSound);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Activate');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Deactivate');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'idle');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'FiringLoopBeam');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'FiringLoop_Impact');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'freezeray_melee');
	PrecacheIndex.__NFUN_1283__('SirenSpin', AnimationControllerClass, Mesh);
	PrecacheIndex.__NFUN_1269__(class'crosshair_freezeray_fb');
	PrecacheIndex.__NFUN_1269__(class'DukeHUD'.default.FrozenOverlay);
	i = __NFUN_166__(string(class'Corpse'.default.FrozenPhysicsSoundOverrides), 1);
	J0x166:

	// End:0x1E1 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		j = __NFUN_166__(string(class'Corpse'.default.FrozenPhysicsSoundOverrides[i].Sounds), 1);
		J0x195:

		// End:0x1D7 [Loop If]
		if(__NFUN_172__(j, 0))
		{
			PrecacheIndex.__NFUN_1274__(class'Corpse'.default.FrozenPhysicsSoundOverrides[i].Sounds[j]);
			__NFUN_185__(j);
			// [Loop Continue]
			goto J0x195;
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x166;
	}
	return;
}

state Activating
{
	simulated function EndState()
	{
		FindAndPlaySound('idle');
		super(Object).EndState();
		return;
	}
	stop;
}

state Deactivating
{
	simulated function BeginState()
	{
		FindAndStopSound('idle');
		DisableFreezeBeam();
		super.BeginState();
		return;
	}
	stop;
}

defaultproperties
{
	BeamMaxLength=900
	DamagePerSecond=320
	RechargeFrequency=0.15
	WeaponConfig='MP_FreezeRayWeaponConfig'
	AmmoLoaded=16
	HUDAmmoClipIcon=15
	DOFWeapDist=11.5
	CrosshairIndex=5
	dnInventoryCategory=5
	dnCategoryPriority=2
	CommandAlias="UseWeapon dnGame.MP_FreezeRay"
	InventoryReferenceClass='MP_FreezeRay'
	PickupClass='MP_FreezeRayPickup'
	bIsPrimaryWeapon=true
	HUDPickupEventIcon=8
}