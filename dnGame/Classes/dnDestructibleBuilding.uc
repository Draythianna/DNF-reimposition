/*******************************************************************************
 * dnDestructibleBuilding generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnDestructibleBuilding extends RenderActor
	native
	collapsecategories
	dependson(dnDestructibleBuildingPart)
	hidecategories(Actor,Advanced,Animation,Collision,Crushing,Destruction,Display,Filter,Health,HeatVision,IK,Interpolation,Karma,KarmaCollision,KarmaDamage,KarmaEvents,Lighting,Material,Mounting,Network,Networking,RenderActor,Sound,Tick,TickRules,VertexFunction);

const kMinNumDesiredParts = 4;
const kMaxNumParts = 12;
const kAvgSurvivalRate = 0.30;

var() noexport bool bGibCastShadows "If true, gibs will cast shadows after the building has been destroyed.";
var() noexport class<dnDestructibleBuildingDefinition> Definition "Definition to use for part layout.";
var() noexport int RandomSeed "Seed to use for randomness.";
var() noexport Vector Noise "Vector to be used as a variance as random noise for the parts.";
var() noexport float SkewXFromY "Skew factor along the x axis based on y position.";
var() noexport float SkewXFromZ "Skew factor along the x axis based on z position.";
var() noexport float SkewYFromX "Skew factor along the y axis based on x position.";
var() noexport float SkewYFromZ "Skew factor along the y axis based on z position.";
var() noexport float SkewZFromX "Skew factor along the z axis based on x position.";
var() noexport float SkewZFromY "Skew factor along the z axis based on y position.";
var() noexport float PartSurvivalChance "Chance from 0.0 - 1.0 for parts surviving the explosion.";
var() noexport float PartCollisionChance "Chance from 0.0 - 1.0 for parts colliding after the explosion.  If they don't collide, they will go through everything.";
var() noexport bool bEnableExplosiveDestruction "If true, explosions will be considered for destruction of this building.";
var() noexport float ExplosiveDamageRequired "Amount of damage required in one explosion to cause destruction.";
var() noexport bool bEnableVehicularDestruction "If true, vehicles will be considered for destruction of this building.";
var() noexport float VehicleVelocityRequired "Amount of velocity required from 1 vehicle impact to cause destruction.";
var float DamageRadius;
var array<dnDestructibleBuildingPart> Parts;
var transient int EditorRenderDatas;
var dnDestructibleBuildingPart ShellPart;

// Export UdnDestructibleBuilding::execComputeSpawnInfoForPart(FFrame&, void* const)
native final simulated function ComputeSpawnInfoForPart(out SDestructibleBuildingPart Part, out Vector SpawnLocation, out Rotator SpawnRotation)
{
	//native.Part;
	//native.SpawnLocation;
	//native.SpawnRotation;	
}

function PreSpawnPart(out SDestructibleBuildingPart partDef, bool bIsShellPart)
{
	local dnDestructibleBuildingPart Part;
	local Vector SpawnLocation;
	local Rotator SpawnRotation;

	// End:0x22
	if(bIsShellPart)
	{
		SpawnLocation = Location;
		SpawnRotation = Rotation;		
	}
	else
	{
		ComputeSpawnInfoForPart(partDef, SpawnLocation, SpawnRotation);
	}
	Part = __NFUN_615__(class'dnDestructibleBuildingPart', self,, SpawnLocation, SpawnRotation,, true);
	// End:0x119
	if(__NFUN_145__(bIsShellPart))
	{
		// End:0x8F
		if(__NFUN_201__(partDef.OverrideCollisionChance, 0))
		{
			Part.CollisionChance = partDef.OverrideCollisionChance;			
		}
		else
		{
			Part.CollisionChance = PartCollisionChance;
		}
		// End:0xD2
		if(__NFUN_201__(partDef.OverrideDensity, 0))
		{
			Part.Density = partDef.OverrideDensity;
		}
		// End:0xFD
		if(__NFUN_201__(partDef.Mass, 0))
		{
			Part.__NFUN_639__(partDef.Mass);
		}
		Part.bDefaultInteractionClass = partDef.bDefaultInteractionClass;
	}
	// End:0x144
	if(__NFUN_340__(partDef.PhysicsMaterial, none))
	{
		Part.PhysicsMaterial = partDef.PhysicsMaterial;
	}
	Part.OwnerBuilding = self;
	Part.__NFUN_595__(partDef.StaticMesh);
	// End:0x1B2
	if(__NFUN_145__(bIsShellPart))
	{
		Part.__NFUN_592__(partDef.Scale);
		Part.__NFUN_590__(true);
		Parts[Parts.Add(1)] = Part;		
	}
	else
	{
		Part.__NFUN_621__(,,, true);
		ShellPart = Part;
	}
	return;
}

simulated event PreBeginPlay()
{
	local int i, j;
	local Vector Center, Extent;
	local Box RenderBounds, PartBounds;
	local array<int> partsLeft, partsMustSpawn, partsCouldSpawn;
	local float fCurSurvivalChance;
	local bool bSurvived;
	local int nCurPartIndex, nCurRandomSeed, nNumPartsCap;

	DrawType = 1;
	Texture = none;
	// End:0x5DF
	if(__NFUN_340__(Definition, none))
	{
		nNumPartsCap = __NFUN_191__(int(__NFUN_195__(float(string(Definition.default.Parts)), 0.3)), 4, 12);
		nNumPartsCap = __NFUN_188__(nNumPartsCap, string(Definition.default.Parts));
		i = 0;
		J0x64:

		// End:0x198 [Loop If]
		if(__NFUN_169__(i, string(Definition.default.Parts)))
		{
			// End:0x104
			if(__NFUN_339__(Definition.default.Parts[i].StaticMesh, none))
			{
				Warn(__NFUN_302__(__NFUN_303__(__NFUN_303__("dnDestructibleBuilding definition", string(Definition)), "has a missing StaticMesh at Part #"), string(i)));
				// [Explicit Continue]
				goto J0x18E;
			}
			// End:0x14B
			if(__NFUN_201__(Definition.default.Parts[i].OverrideSurvivalChance, 0))
			{
				fCurSurvivalChance = Definition.default.Parts[i].OverrideSurvivalChance;				
			}
			else
			{
				fCurSurvivalChance = PartSurvivalChance;
			}
			// End:0x17B
			if(__NFUN_203__(fCurSurvivalChance, 1))
			{
				partsMustSpawn[partsMustSpawn.Add(1)] = i;
				// [Explicit Continue]
				goto J0x18E;
			}
			partsLeft[partsLeft.Add(1)] = i;
			J0x18E:

			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x64;
		}
		// End:0x34B
		if(__NFUN_169__(string(partsMustSpawn), nNumPartsCap))
		{
			i = 0;
			J0x1AF:

			// End:0x34B [Loop If]
			if(__NFUN_169__(i, string(partsLeft)))
			{
				nCurPartIndex = partsLeft[i];
				// End:0x1DE
				if(__NFUN_169__(nCurPartIndex, 0))
				{
					// [Explicit Continue]
					goto J0x341;
				}
				// End:0x225
				if(__NFUN_201__(Definition.default.Parts[nCurPartIndex].OverrideSurvivalChance, 0))
				{
					fCurSurvivalChance = Definition.default.Parts[nCurPartIndex].OverrideSurvivalChance;					
				}
				else
				{
					fCurSurvivalChance = PartSurvivalChance;
					// End:0x24A
					if(__NFUN_204__(fCurSurvivalChance, 0.5))
					{
						fCurSurvivalChance = 0.3;
					}
				}
				bSurvived = __NFUN_202__(__NFUN_222__(), fCurSurvivalChance);
				// End:0x276
				if(bSurvived)
				{
					partsCouldSpawn[partsCouldSpawn.Add(1)] = nCurPartIndex;
				}
				nCurRandomSeed = Definition.default.Parts[nCurPartIndex].RandomSeed;
				// End:0x326
				if(__NFUN_170__(nCurRandomSeed, 0))
				{
					j = __NFUN_165__(i, 1);
					J0x2AF:

					// End:0x326 [Loop If]
					if(__NFUN_169__(j, string(partsLeft)))
					{
						// End:0x31C
						if(__NFUN_173__(Definition.default.Parts[partsLeft[j]].RandomSeed, nCurRandomSeed))
						{
							// End:0x30B
							if(bSurvived)
							{
								partsCouldSpawn[partsCouldSpawn.Add(1)] = partsLeft[j];
							}
							partsLeft[j] = -1;
						}
						__NFUN_184__(j);
						// [Loop Continue]
						goto J0x2AF;
					}
				}
				// End:0x341
				if(__NFUN_172__(__NFUN_165__(string(partsMustSpawn), string(partsCouldSpawn)), nNumPartsCap))
				{
					// [Explicit Break]
					goto J0x34B;
				}
				J0x341:

				__NFUN_184__(i);
				// [Loop Continue]
				goto J0x1AF;
			}
		}
		J0x34B:

		i = 0;
		J0x352:

		// End:0x38E [Loop If]
		if(__NFUN_169__(i, string(partsMustSpawn)))
		{
			PreSpawnPart(Definition.default.Parts[partsMustSpawn[i]], false);
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x352;
		}
		i = 0;
		J0x395:

		// End:0x3D1 [Loop If]
		if(__NFUN_169__(i, string(partsCouldSpawn)))
		{
			PreSpawnPart(Definition.default.Parts[partsCouldSpawn[i]], false);
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x395;
		}
		PreSpawnPart(Definition.default.ShellPart, true);
		ShellPart.__NFUN_838__(PartBounds.Min, PartBounds.Max);
		// End:0x453
		if(__NFUN_173__(int(RenderBounds.IsValid), 0))
		{
			RenderBounds.IsValid = 1;
			RenderBounds.Min = PartBounds.Min;
			RenderBounds.Max = PartBounds.Max;			
		}
		else
		{
			// End:0x495
			if(__NFUN_200__(PartBounds.Min.X, RenderBounds.Min.X))
			{
				RenderBounds.Min.X = PartBounds.Min.X;
			}
			// End:0x4D7
			if(__NFUN_200__(PartBounds.Min.Y, RenderBounds.Min.Y))
			{
				RenderBounds.Min.Y = PartBounds.Min.Y;
			}
			// End:0x519
			if(__NFUN_200__(PartBounds.Min.Z, RenderBounds.Min.Z))
			{
				RenderBounds.Min.Z = PartBounds.Min.Z;
			}
			// End:0x55B
			if(__NFUN_201__(PartBounds.Max.X, RenderBounds.Max.X))
			{
				RenderBounds.Max.X = PartBounds.Max.X;
			}
			// End:0x59D
			if(__NFUN_201__(PartBounds.Max.Y, RenderBounds.Max.Y))
			{
				RenderBounds.Max.Y = PartBounds.Max.Y;
			}
			// End:0x5DF
			if(__NFUN_201__(PartBounds.Max.Z, RenderBounds.Max.Z))
			{
				RenderBounds.Max.Z = PartBounds.Max.Z;
			}
		}
	}
	Extent = __NFUN_235__(0.5, __NFUN_239__(RenderBounds.Max, RenderBounds.Min));
	Center = __NFUN_238__(RenderBounds.Min, Extent);
	__NFUN_620__(__NFUN_251__(__NFUN_232__(Extent.X, Extent.Y, 0)), Extent.Z);
	DamageRadius = __NFUN_195__(1.5, __NFUN_251__(Extent));
	super.PreBeginPlay();
	return;
}

simulated function bool VerifySelf()
{
	// End:0x0E
	if(__NFUN_171__(string(Parts), 0))
	{
		return false;
	}
	return super(Actor).VerifySelf();
	return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	local Actor Damager;

	// End:0x6C
	if(__NFUN_148__(__NFUN_148__(bEnableExplosiveDestruction, __NFUN_203__(Damage, ExplosiveDamageRequired)), __NFUN_357__(DamageType, class'ExplosionDamage')))
	{
		// End:0x46
		if(__NFUN_340__(Instigator, none))
		{
			Damager = Instigator;			
		}
		else
		{
			Damager = self;
		}
		PerformExplosiveDestruction(Damager, Damage, DamageOrigin, DamageDirection, DamageType);
	}
	return;
}

simulated event Trigger(Actor Other, Pawn EventInstigator)
{
	local Actor Damager;

	super(Actor).Trigger(Other, EventInstigator);
	// End:0x2A
	if(__NFUN_340__(EventInstigator, none))
	{
		Damager = EventInstigator;		
	}
	else
	{
		// End:0x44
		if(__NFUN_340__(Other, none))
		{
			Damager = Other;			
		}
		else
		{
			Damager = self;
		}
	}
	PerformExplosiveDestruction(Damager, ExplosiveDamageRequired, Location, __NFUN_235__(-1, __NFUN_253__(__NFUN_640__())), class'ExplosionDamage');
	return;
}

simulated event bool TakePhysicsImpactDamage(float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, Pawn Instigator, KarmaActor DamageActor)
{
	local Actor Damager;
	local Vector VehicleVelocity;
	local float VehicleVelocitySize;

	// End:0xAF
	if(__NFUN_148__(bEnableVehicularDestruction, DamageActor.bIsVehicle))
	{
		// End:0x38
		if(__NFUN_340__(Instigator, none))
		{
			Damager = Instigator;			
		}
		else
		{
			// End:0x52
			if(__NFUN_340__(DamageActor, none))
			{
				Damager = DamageActor;				
			}
			else
			{
				Damager = self;
			}
		}
		DamageActor.__NFUN_794__(VehicleVelocity);
		VehicleVelocitySize = __NFUN_251__(VehicleVelocity);
		// End:0xAF
		if(__NFUN_203__(VehicleVelocitySize, VehicleVelocityRequired))
		{
			PerformExplosiveDestruction(Damager, ExplosiveDamageRequired, Location, __NFUN_235__(-1, __NFUN_253__(__NFUN_640__())), class'ExplosionDamage');
			return true;
		}
	}
	return false;
	return;
}

final simulated function PerformExplosiveDestruction(Actor DamageInstigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType)
{
	local int i;
	local float Scale;
	local dnFriendFX_Spawners Spawner;
	local HUDEffects Effect;

	// End:0x0E
	if(__NFUN_171__(string(Parts), 0))
	{
		return;
	}
	// End:0x4B
	if(__NFUN_148__(__NFUN_340__(Definition, none), __NFUN_342__(Definition.default.DestroyedSoundName, 'None')))
	{
		FindAndPlaySound(Definition.default.DestroyedSoundName);
	}
	i = __NFUN_166__(string(Definition.default.ParticleEffects), 1);
	J0x64:

	// End:0x1A7 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x93
		if(__NFUN_339__(Definition.default.ParticleEffects[i].SpawnerClass, none))
		{
			// [Explicit Continue]
			goto J0x19D;
		}
		Spawner = FindFriendSpawner(Definition.default.ParticleEffects[i].SpawnerClass);
		// End:0xC8
		if(__NFUN_339__(Spawner, none))
		{
			// [Explicit Continue]
			goto J0x19D;
		}
		Scale = Definition.default.ParticleEffects[i].Scale;
		// End:0x102
		if(__NFUN_202__(Scale, 0))
		{
			Scale = 1;
		}
		Spawner.__NFUN_645__(__NFUN_238__(Location, __NFUN_241__(Definition.default.ParticleEffects[i].LocationOffset, Rotation)));
		Spawner.__NFUN_652__(__NFUN_269__(Definition.default.ParticleEffects[i].RotationOffset, Rotation));
		Spawner.SystemSizeScale = __NFUN_195__(Spawner.default.SystemSizeScale, Scale);
		Spawner.ExecuteEffect(true);
		J0x19D:

		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x64;
	}
	i = __NFUN_166__(string(Definition.default.HUDEffects), 1);
	J0x1C0:

	// End:0x396 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x1EF
		if(__NFUN_339__(Definition.default.HUDEffects[i].EffectClass, none))
		{
			// [Explicit Continue]
			goto J0x38C;
		}
		Effect = __NFUN_615__(Definition.default.HUDEffects[i].EffectClass, self);
		// End:0x222
		if(__NFUN_339__(Effect, none))
		{
			// [Explicit Continue]
			goto J0x38C;
		}
		Scale = Definition.default.HUDEffects[i].Scale;
		// End:0x25C
		if(__NFUN_202__(Scale, 0))
		{
			Scale = 1;
		}
		Effect.__NFUN_645__(__NFUN_238__(Location, Definition.default.HUDEffects[i].LocationOffset));
		Effect.ExecuteEffect(Scale);
		__NFUN_355__(__NFUN_303__(__NFUN_303__(string(self), string(Effect)), "Executed"));
		__NFUN_355__(__NFUN_303__(__NFUN_303__(string(Location.X), string(Location.Y)), string(Location.Z)));
		__NFUN_355__(__NFUN_303__(__NFUN_303__(string(Effect.Location.X), string(Effect.Location.Y)), string(Effect.Location.Z)));
		__NFUN_355__(__NFUN_303__(__NFUN_303__(string(Level.__NFUN_1161__().Location.X), string(Level.__NFUN_1161__().Location.Y)), string(Level.__NFUN_1161__().Location.Z)));
		J0x38C:

		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x1C0;
	}
	// End:0x3AF
	if(__NFUN_340__(ShellPart, none))
	{
		ShellPart.__NFUN_614__();
	}
	i = __NFUN_166__(string(Parts), 1);
	J0x3BE:

	// End:0x5C4 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x3DE
		if(__NFUN_339__(Parts[i], none))
		{
			// [Explicit Continue]
			goto J0x5BA;
		}
		// End:0x473
		if(__NFUN_200__(__NFUN_222__(), Parts[i].CollisionChance))
		{
			// End:0x42B
			if(Parts[i].bDefaultInteractionClass)
			{
				Parts[i].__NFUN_812__(0);				
			}
			else
			{
				Parts[i].__NFUN_812__(2);
			}
			Parts[i].bEnableImpactSounds = true;
			Parts[i].bEnableImpactEffects = true;			
		}
		else
		{
			Parts[i].LifeSpan = __NFUN_226__(15, 10);
		}
		Parts[i].TickStyle = 2;
		Parts[i].bIgnoresPhysicsDamage = true;
		Parts[i].bBlockCamera = false;
		Parts[i].bCastStencilShadows = bGibCastShadows;
		Parts[i].bGibActor = true;
		Level.NoteSpawnedGib(Parts[i]);
		Parts[i].__NFUN_621__(false, false, false, true, false);
		Parts[i].__NFUN_642__(18);
		Parts[i].__NFUN_817__();
		Parts[i].__NFUN_590__(false);
		Parts[i].HurtRadiusActivity(DamageInstigator, Damage, DamageOrigin, DamageRadius, -0.25, DamageType, DamageOrigin);
		J0x5BA:

		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x3BE;
	}
	Parts.Empty();
	__NFUN_614__();
	return;
}

simulated function Destroyed()
{
	super.Destroyed();
	GlobalTrigger(Event);
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(Actor).RegisterPrecacheComponents(PrecacheIndex);
	// End:0x38
	if(__NFUN_340__(Definition, none))
	{
		PrecacheIndex.__NFUN_1277__(VoicePack, Definition.default.DestroyedSoundName);
	}
	return;
}

defaultproperties
{
	Definition='dnDestructibleBuildingDefinition'
	PartSurvivalChance=0.5
	PartCollisionChance=0.5
	bEnableExplosiveDestruction=true
	ExplosiveDamageRequired=25
	bEnableVehicularDestruction=true
	VehicleVelocityRequired=200
	bTraceUsable=false
	bTraceShootable=false
	bUseCylinderCollision=true
	bCollideActors=true
	TickStyle=0
	VoicePack='SoundConfig.Interactive.VoicePack_Decorations'
}