/*******************************************************************************
 * ParticleSystemTimer generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ParticleSystemTimer extends Triggers
	collapsecategories
	hidecategories(Filter,Interactivity,Karma,Lighting,Networking,Actor,Collision,Display,HeatVision,Interpolation,Material,Tick,TickTules);

var(ParticleSystemTimer_Display) noexport class<SoftParticleSystem> ParticleSystemClass "Class to use for our particle.";
var(ParticleSystemTimer_Display) noexport class<TriggerLightEx> LightClass "Class to use for our light.  Optional.";
var() noexport bool bAllowLight "If true, light will be spawned.";
var() noexport bool bDontScaleByDrawScale "If true, effect/light will not be scaled by our DrawScale.";
var() noexport bool bEffectActive "If true, timer will start with particle system enabled.";
var() noexport bool bTimerActive "If true, timer will be actively counting at startup.";
var() noexport float Delay "Time to wait after turning off particle system before turning on again.";
var() noexport float DelayVariance "Variance for Delay.";
var() noexport float Duration "Time to wait after turning on particle system before turning off again.";
var() noexport float DurationVariance "Variance for Duration.";
var() noexport float TimerDisableDelay "If > 0, timer will be disable this many seconds after it has been started.";
var() noexport float TimerDisableDelayVariance "Variance for TimerDisableDelay.";
var(ParticleSystemTimer_Events) noexport deprecated name SE_EnableEffect "Trigger this event to force timer to turn on particle system.";
var(ParticleSystemTimer_Events) noexport deprecated name SE_DisableEffect "Trigger this event to force timer to turn off particle system.";
var(ParticleSystemTimer_Events) noexport deprecated name SE_EnableTimer "Trigger this event to turn the timer on.";
var(ParticleSystemTimer_Events) noexport deprecated name SE_DisableTimer "Trigger this event to turn the timer off.";
var(ParticleSystemTimer_Events) noexport deprecated name TurnOnEvent "This event will be triggered when the particle system is enabled.";
var(ParticleSystemTimer_Events) noexport deprecated name TurnOffEvent "This event will be triggered when the particle system is disbaled.";
var(ParticleSystemTimer_Sound) noexport name SoundName "VoicePack entry to play when particle system is enabled.";
var(ParticleSystemTimer_Sound) noexport float SoundFadeInTime "Time it takes for sound to fade in.";
var(ParticleSystemTimer_Sound) noexport float SoundFadeOutTime "Time it takes for sound to fade out.";
var(ParticleSystemTimer_Damage) noexport bool bDoesDamage "False by default";
var(ParticleSystemTimer_Damage) noexport bool bOnlyDamagePawns "If True this will damage pawns only (more efficient)";
var(ParticleSystemTimer_Damage) noexport float DamageRadius "Any Pawn within the sphere defined by this radius will be damaged";
var(ParticleSystemTimer_Damage) float DamagePerTimeUnit;
var(ParticleSystemTimer_Damage) float DamageTimeInterval;
var class<DamageType> DamageTypeDealt;
var SoftParticleSystem ParticleSystem;
var TriggerLightEx Light;
var bool bFadeIn;
var float SoundTime;
var bool bParticleOn;

replication
{
	// Pos:0x000
	reliable if(__NFUN_173__(int(Role), int(ROLE_Authority)))
		bParticleOn;
}

simulated event PreBeginPlay()
{
	__NFUN_718__('EnableEffect', SE_EnableEffect);
	__NFUN_718__('DisableEffect', SE_DisableEffect);
	__NFUN_718__('EnableTimer', SE_EnableTimer);
	__NFUN_718__('DisableTimer', SE_DisableTimer);
	// End:0xDC
	if(__NFUN_340__(ParticleSystemClass, none))
	{
		ParticleSystem = __NFUN_615__(ParticleSystemClass, self);
		// End:0xDC
		if(__NFUN_340__(ParticleSystem, none))
		{
			ParticleSystem.__NFUN_635__(self, true, true, true);
			ParticleSystem.DestroyOnDismount = true;
			// End:0xA9
			if(bDontScaleByDrawScale)
			{
				ParticleSystem.SystemSizeScale = ParticleSystem.default.SystemSizeScale;				
			}
			else
			{
				ParticleSystem.SystemSizeScale = __NFUN_195__(ParticleSystem.default.SystemSizeScale, DrawScale);
			}
			ParticleSystem.__NFUN_1054__();
		}
	}
	// End:0x170
	if(__NFUN_148__(__NFUN_340__(LightClass, none), bAllowLight))
	{
		Light = __NFUN_615__(LightClass, self);
		// End:0x170
		if(__NFUN_340__(Light, none))
		{
			Light.__NFUN_635__(self, true, true, true);
			// End:0x14A
			if(bDontScaleByDrawScale)
			{
				Light.LightRadius = Light.default.LightRadius;				
			}
			else
			{
				Light.LightRadius = __NFUN_195__(Light.default.LightRadius, DrawScale);
			}
		}
	}
	SoundFadeInTime = __NFUN_225__(0, SoundFadeInTime);
	SoundFadeOutTime = __NFUN_225__(0, SoundFadeOutTime);
	super(Actor).PreBeginPlay();
	return;
}

simulated function bool VerifySelf()
{
	// End:0x0E
	if(__NFUN_339__(ParticleSystem, none))
	{
		return false;
	}
	return super(Actor).VerifySelf();
	return;
}

event PostBeginPlay()
{
	super(Actor).PostBeginPlay();
	// End:0x18
	if(bEffectActive)
	{
		TriggerFunc_EnableEffect();		
	}
	else
	{
		TriggerFunc_DisableEffect();
	}
	// End:0x30
	if(bTimerActive)
	{
		TriggerFunc_EnableTimer();		
	}
	else
	{
		TriggerFunc_DisableTimer();
	}
	return;
}

simulated event Destroyed()
{
	super(Actor).Destroyed();
	// End:0x1F
	if(__NFUN_340__(ParticleSystem, none))
	{
		ParticleSystem.__NFUN_614__();
	}
	// End:0x38
	if(__NFUN_340__(Light, none))
	{
		Light.__NFUN_614__();
	}
	return;
}

function DealDamage()
{
	local Pawn P;
	local float IntersectionTime;
	local Vector IntersectionLocation;

	// End:0x163
	if(bOnlyDamagePawns)
	{
		P = Level.PawnList;
		J0x1E:

		// End:0x160 [Loop If]
		if(__NFUN_340__(P, none))
		{
			// End:0x148
			if(__NFUN_148__(P.bCollideActors, __NFUN_145__(P.bHidden)))
			{
				// End:0x148
				if(__NFUN_200__(__NFUN_252__(__NFUN_239__(P.Location, Location)), __NFUN_221__(__NFUN_198__(__NFUN_198__(P.CollisionRadius, P.CollisionHeight), DamageRadius))))
				{
					__NFUN_301__(P.Location, P.CollisionRadius, P.CollisionHeight, Location, __NFUN_238__(Location, __NFUN_234__(__NFUN_253__(__NFUN_239__(P.Location, Location)), DamageRadius)), IntersectionTime, IntersectionLocation);
					// End:0x148
					if(__NFUN_201__(IntersectionTime, 0))
					{
						P.HurtRadiusActivity(self.Instigator, DamagePerTimeUnit, Location, DamageRadius, DamageRadius, DamageTypeDealt, Location, false);
					}
				}
			}
			P = P.NextPawn;
			// [Loop Continue]
			goto J0x1E;
		}		
	}
	else
	{
		HurtRadius(DamagePerTimeUnit, Location, DamageRadius, DamageRadius, DamageTypeDealt);
	}
	return;
}

simulated function bool CanHurtRadiusOther(Actor Other)
{
	// End:0x2A
	if(__NFUN_150__(Other.bIsPawn, Other.bIsVehicle))
	{
		return true;
	}
	return false;
	return;
}

final function TriggerFunc_EnableEffect()
{
	local float t;

	bParticleOn = true;
	ParticleSystem.__NFUN_1055__();
	// End:0x4C
	if(bDoesDamage)
	{
		DealDamage();
		// End:0x3E
		if(IsMP())
		{
			__NFUN_607__(DamageTimeInterval, true, 'DealDamage');			
		}
		else
		{
			__NFUN_605__(DamageTimeInterval, true, 'DealDamage');
		}
	}
	__NFUN_606__('TriggerFunc_EnableEffect');
	t = __NFUN_226__(Duration, DurationVariance);
	// End:0x91
	if(__NFUN_201__(t, 1E-06))
	{
		__NFUN_605__(__NFUN_225__(1E-06, __NFUN_226__(Duration, DurationVariance)), false, 'TriggerFunc_DisableEffect');
	}
	GlobalTrigger(TurnOnEvent);
	// End:0xDC
	if(__NFUN_342__(SoundName, 'None'))
	{
		__NFUN_606__('StopParticleSound');
		FindAndPlaySound(SoundName);
		bFadeIn = true;
		SoundTime = Level.GameTimeSeconds;
	}
	// End:0xF8
	if(__NFUN_340__(Light, none))
	{
		Light.StartTurningOn();
	}
	bEffectActive = true;
	return;
}

final function TriggerFunc_DisableEffect()
{
	bParticleOn = false;
	ParticleSystem.__NFUN_1054__();
	// End:0x29
	if(IsMP())
	{
		__NFUN_608__('DealDamage');		
	}
	else
	{
		__NFUN_606__('DealDamage');
	}
	__NFUN_606__('TriggerFunc_DisableEffect');
	__NFUN_605__(__NFUN_225__(1E-06, __NFUN_226__(Delay, DelayVariance)), false, 'TriggerFunc_EnableEffect');
	GlobalTrigger(TurnOffEvent);
	// End:0x8D
	if(__NFUN_342__(SoundName, 'None'))
	{
		bFadeIn = false;
		SoundTime = Level.GameTimeSeconds;
	}
	// End:0xA9
	if(__NFUN_340__(Light, none))
	{
		Light.StartTurningOff();
	}
	bEffectActive = false;
	return;
}

event Trigger(Actor Other, Pawn EventInstigator)
{
	super(Actor).Trigger(Other, EventInstigator);
	// End:0x22
	if(bEffectActive)
	{
		TriggerFunc_DisableEffect();		
	}
	else
	{
		TriggerFunc_EnableEffect();
	}
	return;
}

final simulated function StopParticleSound()
{
	FindAndStopSound(SoundName);
	return;
}

final simulated function TriggerFunc_EnableTimer()
{
	TickStyle = 2;
	// End:0x30
	if(__NFUN_201__(TimerDisableDelay, float(0)))
	{
		__NFUN_605__(__NFUN_225__(1E-06, __NFUN_226__(TimerDisableDelay, TimerDisableDelayVariance)), false, 'TriggerFunc_DisableTimer');
	}
	return;
}

final simulated function TriggerFunc_DisableTimer()
{
	TickStyle = 0;
	// End:0x1A
	if(__NFUN_201__(TimerDisableDelay, float(0)))
	{
		TriggerFunc_DisableEffect();
	}
	return;
}

simulated event float ScaleSoundRadius(bool bSpoken, float InRadius)
{
	return InRadius;
	return;
}

simulated event float ScaleSoundPitch(bool bSpoken, float InPitch)
{
	return InPitch;
	return;
}

simulated event float ScaleSoundVolume(bool bSpoken, float InVolume)
{
	local float Scale, TimePassed;

	// End:0xCD
	if(__NFUN_201__(SoundTime, 0))
	{
		TimePassed = __NFUN_199__(Level.GameTimeSeconds, SoundTime);
		// End:0x71
		if(bFadeIn)
		{
			// End:0x58
			if(__NFUN_200__(TimePassed, SoundFadeInTime))
			{
				Scale = __NFUN_196__(TimePassed, SoundFadeInTime);				
			}
			else
			{
				Scale = 1;
				SoundTime = 0;
			}			
		}
		else
		{
			// End:0x9C
			if(__NFUN_200__(TimePassed, SoundFadeOutTime))
			{
				Scale = __NFUN_199__(1, __NFUN_196__(TimePassed, SoundFadeOutTime));				
			}
			else
			{
				__NFUN_607__(0.0001, false, 'StopParticleSound');
				Scale = 0;
				SoundTime = 0;
			}
		}
		return __NFUN_195__(InVolume, Scale);
	}
	return InVolume;
	return;
}

simulated function NU_PlayParticle(bool bPlay)
{
	// End:0x12
	if(bPlay)
	{
		Client_TriggerFunc_EnableEffect();		
	}
	else
	{
		Client_TriggerFunc_DisableEffect();
	}
	return;
}

final simulated function Client_TriggerFunc_EnableEffect()
{
	ParticleSystem.__NFUN_1055__();
	// End:0x4D
	if(__NFUN_342__(SoundName, 'None'))
	{
		__NFUN_606__('StopParticleSound');
		FindAndPlaySound(SoundName);
		bFadeIn = true;
		SoundTime = Level.GameTimeSeconds;
	}
	return;
}

final simulated function Client_TriggerFunc_DisableEffect()
{
	ParticleSystem.__NFUN_1054__();
	// End:0x3A
	if(__NFUN_342__(SoundName, 'None'))
	{
		bFadeIn = false;
		SoundTime = Level.GameTimeSeconds;
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	PrecacheIndex.__NFUN_1266__(ParticleSystemClass);
	// End:0x2D
	if(bAllowLight)
	{
		PrecacheIndex.__NFUN_1266__(LightClass);
	}
	PrecacheIndex.__NFUN_1277__(VoicePack, SoundName);
	// End:0x5F
	if(bDoesDamage)
	{
		PrecacheIndex.__NFUN_1279__(DamageTypeDealt);
	}
	return;
}

defaultproperties
{
	bAllowLight=true
	bTimerActive=true
	SoundFadeInTime=0.1
	SoundFadeOutTime=0.25
	bOnlyDamagePawns=true
	DamageRadius=128
	DamagePerTimeUnit=5
	DamageTimeInterval=1
	bTickOnlyZoneRecent=true
	bDirectional=true
	Texture='dt_editor.Icons.ParticleSystemTimer'
	RemoteRole=2
	VoicePack='SoundConfig.Effects.VoicePack_Particles'
}