/*******************************************************************************
 * DukeBot generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DukeBot extends DukeMultiplayerAssets
	config(User)
	collapsecategories;

var Vector NextPathPos;
var Vector PathDestination;
var Vector LastLocation;
var float StuckTime;
var bool bNeverMelee;
var bool bAllowGodMode;
var bool bAllowInfiniteAmmo;
var bool bStopFiring;
var bool bPickupLock;
var float FireWaitTime;
var float FireDelayTime;
var float PipeBombFrequency;
var float TripMineFrequency;
var float BeerFrequency;
var float SteroidsFrequency;
var float JetpackFrequency;
var float HolodukeFrequency;
var float DuckFrequency;
var float JumpFrequency;
var bool bAICanPickupStuff;
var bool bAllowMelee;

simulated event PreBeginPlay()
{
	super(PlayerPawn).PreBeginPlay();
	NextPathPos = Location;
	return;
}

function Restart()
{
	local bool bOnlyAmmo;

	super(DukeMultiPlayer).Restart();
	// End:0x16
	if(__NFUN_169__(int(Role), int(ROLE_Authority)))
	{
		return;
	}
	bOnlyAmmo = false;
	bCheatsEnabled = true;
	bAdmin = true;
	bInfiniteAmmo = true;
	switch(__NFUN_187__(11))
	{
		// End:0x67
		case 0:
			GiveWeaponCheat("dnGame.MP_Pistol_Gold", bOnlyAmmo);
			// End:0x200
			break;
		// End:0x8D
		case 1:
			GiveWeaponCheat("dnGame.MP_RailGun", bOnlyAmmo);
			// End:0x200
			break;
		// End:0xB0
		case 2:
			GiveWeaponCheat("dnGame.MP_RPG", bOnlyAmmo);
			// End:0x200
			break;
		// End:0xDA
		case 3:
			GiveWeaponCheat("dnGame.MP_Devastator", bOnlyAmmo);
			// End:0x200
			break;
		// End:0x103
		case 4:
			GiveWeaponCheat("dnGame.MP_ShrinkRay", bOnlyAmmo);
			// End:0x200
			break;
		// End:0x12C
		case 5:
			GiveWeaponCheat("dnGame.MP_FreezeRay", bOnlyAmmo);
			// End:0x200
			break;
		// End:0x153
		case 6:
			GiveWeaponCheat("dnGame.MP_ATLaser", bOnlyAmmo);
			// End:0x200
			break;
		// End:0x17E
		case 7:
			GiveWeaponCheat("dnGame.MP_EnforcerGun", bOnlyAmmo);
			// End:0x200
			break;
		// End:0x1AC
		case 8:
			GiveWeaponCheat("dnGame.MP_ATCaptainLaser", bOnlyAmmo);
			// End:0x200
			break;
		// End:0x1D3
		case 9:
			GiveWeaponCheat("dnGame.MP_Shotgun", bOnlyAmmo);
			// End:0x200
			break;
		// End:0x1FD
		case 10:
			GiveWeaponCheat("dnGame.MP_MachineGun", bOnlyAmmo);
			// End:0x200
			break;
		// End:0xFFFF
		default:
			break;
	}
	GiveRandomInventoryMP(0.5, 0.5, 0.5, 0.5);
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), PipeBombFrequency), false, 'PipeBombUse');
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), TripMineFrequency), false, 'TripMineUse');
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), BeerFrequency), false, 'FortyOunceBeerUse');
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), SteroidsFrequency), false, 'SteroidsUse');
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), JetpackFrequency), false, 'JetpackUse');
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), HolodukeFrequency), false, 'HolodukeUse');
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), DuckFrequency), false, 'DuckUse');
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), JumpFrequency), false, 'JumpUse');
	return;
}

function DiedActivity(optional Pawn Killer, optional int Damage, optional Vector DamageOrigin, optional Vector DamageDirection, optional class<DamageType> DamageType, optional name HitBoneName)
{
	super(DukeMultiPlayer).DiedActivity(Killer, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName);
	Target = none;
	return;
}

simulated function bool WantsToFire(Weapon W)
{
	// End:0x2A
	if(__NFUN_150__(__NFUN_173__(int(Role), int(ROLE_AutonomousProxy)), __NFUN_173__(int(RemoteRole), int(ROLE_AutonomousProxy))))
	{
		return super(DukeMultiPlayer).WantsToFire(W);
	}
	// End:0x35
	if(bStopFiring)
	{
		return false;
	}
	// End:0x5D
	if(bAllowInfiniteAmmo)
	{
		bInfiniteAmmo = Level.__NFUN_1161__().bInfiniteAmmo;
	}
	return __NFUN_148__(__NFUN_148__(__NFUN_339__(Weapon, W), __NFUN_340__(Target, none)), __NFUN_145__(WantsToMelee(W)));
	return;
}

function bool ImmuneToDamage()
{
	// End:0x28
	if(__NFUN_148__(bAllowGodMode, Level.__NFUN_1161__().bGodMode))
	{
		return true;
	}
	return super(DukePlayer).ImmuneToDamage();
	return;
}

simulated function bool WantsToMelee(Weapon W)
{
	local float MinRadiusSq;

	// End:0x20
	if(__NFUN_150__(__NFUN_145__(bAllowMelee), __NFUN_340__(MP_FreezeRay(Weapon), none)))
	{
		return false;
	}
	// End:0x4A
	if(__NFUN_150__(__NFUN_173__(int(Role), int(ROLE_AutonomousProxy)), __NFUN_173__(int(RemoteRole), int(ROLE_AutonomousProxy))))
	{
		return super(PlayerPawn).WantsToMelee(W);
	}
	// End:0x55
	if(bNeverMelee)
	{
		return false;
	}
	// End:0xBC
	if(__NFUN_148__(__NFUN_339__(Weapon, W), __NFUN_340__(Target, none)))
	{
		MinRadiusSq = __NFUN_221__(__NFUN_198__(__NFUN_198__(CollisionRadius, Target.CollisionRadius), 60));
		// End:0xBC
		if(__NFUN_202__(__NFUN_252__(__NFUN_239__(Location, Target.Location)), MinRadiusSq))
		{
			return true;
		}
	}
	return false;
	return;
}

function bool ShouldInputWakePlayerPhysics()
{
	return true;
	return;
}

function AdditionalAI()
{
	// End:0x3E
	if(bAICanPickupStuff)
	{
		// End:0x3E
		if(__NFUN_148__(__NFUN_340__(TouchingWeaponPickup, none), __NFUN_145__(bPickupLock)))
		{
			ServerUseDown();
			bPickupLock = true;
			__NFUN_607__(3, false, 'PickupTimer');
		}
	}
	return;
}

simulated function bool CanBeUsedBy(Pawn TestPawn)
{
	// End:0x1C
	if(CanBeExecutedBy(TestPawn))
	{
		Used(self, TestPawn);
		return true;
	}
	return super(DukePlayer).CanBeUsedBy(TestPawn);
	return;
}

function PipeBombUse()
{
	local ActivatableInventory D;

	UseWeapon("dnGame.PipeBomb");
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), PipeBombFrequency), false, 'PipeBombUse');
	// End:0x64
	if(__NFUN_201__(__NFUN_222__(), 0.5))
	{
		D = ActivatableInventory(__NFUN_918__('MP_Detonator'));
		// End:0x64
		if(__NFUN_340__(D, none))
		{
			ChangeToWeapon(MP_Detonator(D));
		}
	}
	return;
}

function TripMineUse()
{
	UseWeapon("dnGame.TripMine");
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), TripMineFrequency), false, 'TripMineUse');
	return;
}

function FortyOunceBeerUse()
{
	UseWeapon("dnGame.FortyOunceBeer");
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), BeerFrequency), false, 'FortyOunceBeerUse');
	return;
}

function SteroidsUse()
{
	UseWeapon("dnGame.Steroids");
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), SteroidsFrequency), false, 'SteroidsUse');
	return;
}

function JetpackUse()
{
	DoJetpack();
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), JetpackFrequency), false, 'JetpackUse');
	return;
}

function DuckUse()
{
	DuckDown();
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), 1), false, 'DuckUpUse');
	return;
}

function DuckUpUse()
{
	DuckUp();
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), DuckFrequency), false, 'DuckUse');
	return;
}

function JumpUse()
{
	JumpDown();
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), 1), false, 'JumpUpUse');
	return;
}

function JumpUpUse()
{
	JumpUp();
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), JumpFrequency), false, 'JumpUpUse');
	return;
}

function HolodukeUse()
{
	local Pawn P;
	local bool bFail;

	P = Level.PawnList;
	J0x15:

	// End:0x8A [Loop If]
	if(__NFUN_340__(P, none))
	{
		// End:0x72
		if(__NFUN_340__(DukeMultiPlayer(P), none))
		{
			// End:0x72
			if(__NFUN_150__(__NFUN_340__(DukeMultiPlayer(P).ActiveHoloActor, none), __NFUN_340__(DukeMultiPlayer(P).ActiveHoloDuke, none)))
			{
				bFail = true;
			}
		}
		P = P.NextPawn;
		// [Loop Continue]
		goto J0x15;
	}
	// End:0x9B
	if(__NFUN_145__(bFail))
	{
		DoHoloDuke();
	}
	__NFUN_607__(__NFUN_195__(__NFUN_222__(), HolodukeFrequency), false, 'HolodukeUse');
	return;
}

simulated function PickupTimer()
{
	bPickupLock = false;
	return;
}

simulated event Tick(float DeltaTime)
{
	super(DukeMultiPlayer).Tick(DeltaTime);
	AdditionalAI();
	// End:0x35
	if(__NFUN_148__(bDontUseMeqonPhysics, __NFUN_174__(int(RemoteRole), int(ROLE_AutonomousProxy))))
	{
		CalculatePawnPhysics(DeltaTime);
	}
	return;
}

function bool IsValidKillTarget(Actor NewTarget)
{
	// End:0x13
	if(__NFUN_339__(DukeMultiPlayer(NewTarget), none))
	{
		return false;
	}
	return IsEnemyTo(Pawn(NewTarget));
	return;
}

simulated event CalculatePawnPhysics(float DeltaTime)
{
	local Vector TargetLoc, RelativeMovementDir, X, Y, Z;

	local int FinalDest;
	local Rotator DesiredViewRotation;

	// End:0x4A
	if(__NFUN_200__(__NFUN_252__(__NFUN_239__(Location, LastLocation)), float(1)))
	{
		__NFUN_209__(StuckTime, DeltaTime);
		// End:0x47
		if(__NFUN_201__(StuckTime, float(10)))
		{
			__NFUN_607__(1E-05, false, 'Suicide');
			StuckTime = 0;
		}		
	}
	else
	{
		StuckTime = 0;
	}
	// End:0x6D
	if(__NFUN_173__(int(RemoteRole), int(ROLE_AutonomousProxy)))
	{
		__NFUN_969__(DeltaTime);
		return;
	}
	// End:0xD4
	if(__NFUN_173__(int(Role), int(ROLE_AutonomousProxy)))
	{
		// End:0xD1
		if(__NFUN_145__(bStopFiring))
		{
			__NFUN_209__(FireWaitTime, DeltaTime);
			// End:0xC2
			if(__NFUN_148__(__NFUN_145__(bIFire), __NFUN_201__(FireWaitTime, FireDelayTime)))
			{
				FireWaitTime = 0;
				FireDown();				
			}
			else
			{
				// End:0xD1
				if(bIFire)
				{
					FireUp();
				}
			}
		}		
	}
	else
	{
		// End:0x139
		if(__NFUN_148__(__NFUN_340__(Weapon, none), __NFUN_341__(Weapon.__NFUN_399__(), 'idle')))
		{
			// End:0x11B
			if(WantsToFire(Weapon))
			{
				Weapon.AttemptFire();				
			}
			else
			{
				// End:0x139
				if(WantsToMelee(Weapon))
				{
					Weapon.AttemptMelee();
				}
			}
		}
	}
	// End:0x17B
	if(__NFUN_148__(__NFUN_148__(__NFUN_340__(Target, none), Target.bIsPawn), Pawn(Target).IsDead()))
	{
		Target = none;
	}
	// End:0x205
	if(__NFUN_339__(Target, none))
	{
		// End:0x1FA
		if(__NFUN_340__(Level.GRI, none))
		{
			Target = Level.GRI.PRIArray[__NFUN_187__(string(Level.GRI.PRIArray))].Owner;
			// End:0x1FA
			if(__NFUN_145__(IsValidKillTarget(Target)))
			{
				Target = none;
			}
		}
		NextPathPos = Location;
	}
	// End:0x245
	if(__NFUN_340__(Target, none))
	{
		PathDestination = Target.Location;
		// End:0x245
		if(__NFUN_145__(__NFUN_859__(PathDestination, false, NextPathPos, FinalDest)))
		{
			Target = none;
		}
	}
	TargetLoc = NextPathPos;
	// End:0x26F
	if(__NFUN_340__(Target, none))
	{
		TargetLoc = Target.__NFUN_683__();
	}
	DesiredViewRotation = Rotator(__NFUN_253__(__NFUN_239__(TargetLoc, __NFUN_872__())));
	ViewRotation = __NFUN_287__(__NFUN_224__(1, __NFUN_195__(DeltaTime, 10)), ViewRotation, DesiredViewRotation);
	__NFUN_652__(__NFUN_265__(Rotation.Pitch, ViewRotation.Yaw, Rotation.Roll));
	CalcedViewRotation = ViewRotation;
	__NFUN_279__(Rotation, X, Y, Z);
	RelativeMovementDir = __NFUN_239__(NextPathPos, Location);
	RelativeMovementDir.Z = 0;
	// End:0x367
	if(__NFUN_201__(__NFUN_252__(RelativeMovementDir), 0))
	{
		RelativeMovementDir = __NFUN_253__(RelativeMovementDir);
		aForward = __NFUN_244__(RelativeMovementDir, X);
		aStrafe = __NFUN_244__(RelativeMovementDir, Y);
		aUp = __NFUN_244__(RelativeMovementDir, Z);		
	}
	else
	{
		aForward = 0;
		aStrafe = 0;
		aUp = 0;
	}
	AnalogInputByte = CompressAnalog(aForward, aStrafe);
	DecompressAnalog(AnalogInputByte, aForward, aStrafe);
	__NFUN_969__(DeltaTime);
	LastLocation = Location;
	return;
}

defaultproperties
{
	PipeBombFrequency=5
	TripMineFrequency=5
	BeerFrequency=5
	SteroidsFrequency=5
	JetpackFrequency=5
	HolodukeFrequency=5
	DuckFrequency=5
	JumpFrequency=5
	bAICanPickupStuff=true
	bAllowMelee=true
	bIsBot=true
	CollisionRadius=18
	CollisionHeight=39
}