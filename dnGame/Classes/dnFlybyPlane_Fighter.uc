/*******************************************************************************
 * dnFlybyPlane_Fighter generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnFlybyPlane_Fighter extends dnFlybyPlane
	collapsecategories
	dependson(dnFlybyPlane_Fighter_AttackBeam)
	dependson(dnFlybyPlane_Fighter_VaporBeam);

struct SFlybyPlane_Debris
{
	var() Object RenderObject;
	var() SSpawnActorPrefab DebrisPrefab;
};

var() noexport int ShotsAccurate "How many shots will accurately hit the target if this plane is able to be accurate.";
var() noexport int ShotsAccurateVariance "Variance value for ShotsAccurate.";
var() noexport int ShotsTillAccurate "How many shots to fire before finally hitting the actual target if this plane is able to be accurate.";
var() noexport int ShotsTillAccurateVariance "Variance value for ShotsTillAccurateVariance.";
var() noexport float ShotDelay "How much time to wait between shots.";
var() noexport float ShotDelayVariance "How much time to vary up the wait between shots.";
var() noexport name AmbientFlyingSoundName "VoicePack entry we play as we fly around.";
var() noexport name AmbientCrashingSoundName "VoicePack entry we play when we are crashing.";
var SAmbientSoundInfo AmbientFlyingSound;
var SAmbientSoundInfo AmbientCrashingSound;
var() noexport float CrashChance "Percentage chance this plane has to fall into the water on death instead of blowing up.";
var() noexport float CrashExplodeOnImpactChance "Percentage chance this plane will explode on its first impact.";
var() noexport float CrashExplodeDelayTime "If this doesnt explode on death, or on impact, we will explode after x seconds";
var() noexport Rotator CrashTumbleBoost "Whichever direction the plane is rotating in when it crashes, it will boost itself by this much more each time.";
var() noexport Rotator CrashTumbleRateVariance "Range of rates to tumble in when shot down and crashing into the water.";
var() noexport class<dnFriendFX_Spawners> CrashInitialExplosion "Effect to spawn when the plane is damaged enough to go down, but not completely destroyed.";
var() noexport deprecated name CrashingEvent "This event is triggered when the dnFlyByPlane_Fighter takes enough damage to start crashing.";
var() float MinDamageDistance;
var() float MinAttackDistance;
var() float AttackDamagePlayer;
var() float AttackDamageNonPlayer;
var() noexport bool bEnablePlayerDamage "If true, PlayerPawn will be added to the attack beam's TouchClasses so that it will be able to touch and damage PlayerPawns.";
var bool bIsAttacking;
var bool bIsVulnerable;
var bool bIsBombing;
var dnShipThrusterEffect LeftThruster;
var dnShipThrusterEffect MiddleThruster;
var dnShipThrusterEffect RightThruster;
var() float MaxSpeed;
var bool bCanRespawn;
var bool bArmed;
var bool bAccurate;
var bool bAccurateShots;
var bool bCrashing;
var int OriginalHealth;
var int ShotsLeft;
var float ShotLastTime;
var Vector ShotLastLocation;
var float ShotSpeed;
var Vector ShotStartLocation;
var Vector ShotEndLocation;
var Rotator ShotCurrentDirection;
var float FiringConeMaxDegrees;
var Vector BlasterOffsets[2];
var int Index;
var dnFriendFX_Spawners MuzzleFlashes[2];
var dnFlybyPlane_Fighter_VaporBeam ConTrailA;
var dnFlybyPlane_Fighter_VaporBeam ConTrailB;
var dnDecoration EngineFire;
var dnFlybyPlane_Fighter_AttackBeam AttackBeam;

event PostBeginPlay()
{
	super(dnDecoration).PostBeginPlay();
	LeftThruster = dnShipThrusterEffect(FindMountedActor('Left_Thruster'));
	MiddleThruster = dnShipThrusterEffect(FindMountedActor('Middle_Thruster'));
	RightThruster = dnShipThrusterEffect(FindMountedActor('Right_Thruster'));
	return;
}

final function Launch(bool bLaunchEnablePlayerDamage)
{
	bEnablePlayerDamage = bLaunchEnablePlayerDamage;
	SoundPitch = __NFUN_159__(SoundPitch, 8);
	ShotsAccurate = __NFUN_190__(ShotsAccurate, ShotsAccurateVariance, true);
	ShotsTillAccurate = __NFUN_190__(ShotsTillAccurate, ShotsTillAccurateVariance, true);
	ShotsLeft = __NFUN_165__(ShotsAccurate, ShotsTillAccurate);
	OriginalHealth = int(Health);
	MuzzleFlashes[0] = dnFriendFX_Spawners(FindMountedActor('MuzzleFlashLeft'));
	MuzzleFlashes[1] = dnFriendFX_Spawners(FindMountedActor('MuzzleFlashRight'));
	ConTrailA = dnFlybyPlane_Fighter_VaporBeam(FindMountedActor('ConTrailA'));
	ConTrailB = dnFlybyPlane_Fighter_VaporBeam(FindMountedActor('ConTrailB'));
	AttackBeam = dnFlybyPlane_Fighter_AttackBeam(FindMountedActor('AttackBeam'));
	AttackBeam.DeactivateBeam();
	AttackBeam.DamagePlayer = AttackDamagePlayer;
	AttackBeam.DamageNonPlayer = AttackDamageNonPlayer;
	AttackBeam.TouchClasses = AttackBeam.default.TouchClasses;
	// End:0x15B
	if(bEnablePlayerDamage)
	{
		AttackBeam.TouchClasses[AttackBeam.TouchClasses.Add(1)] = class'PlayerPawn';
	}
	ShotSpeed = 100;
	// End:0x172
	if(bIsBombing)
	{		
	}
	else
	{
		EnableShots();
	}
	FindAndPlaySound(AmbientFlyingSoundName);
	return;
}

function AssignTarget(name NewTarget)
{
	Enemy = FindActor(class'Actor', NewTarget);
	// End:0x35
	if(__NFUN_339__(Enemy, none))
	{
		Enemy = Level.__NFUN_1161__();
	}
	return;
}

event InterpolateEnd(Actor Other)
{
	super.InterpolateEnd(Other);
	return;
}

final function EnableShots()
{
	// End:0x26
	if(__NFUN_150__(__NFUN_150__(__NFUN_145__(bArmed), __NFUN_339__(Enemy, none)), bCrashing))
	{
		return;
	}
	ShotLastLocation = Enemy.Location;
	ShotLastTime = Level.GameTimeSeconds;
	__NFUN_605__(__NFUN_226__(ShotDelay, ShotDelayVariance), false, 'Fire', true, false);
	return;
}

final function DisableShots()
{
	// End:0x19
	if(bArmed)
	{
		bAccurateShots = false;
		__NFUN_606__('Fire');
	}
	return;
}

final function Fire()
{
	local Vector Direction, targetdir;
	local float targetdist, DirDotDir;

	ShotCurrentDirection = Rotation;
	ShotCurrentDirection.Pitch = __NFUN_190__(-2048, 256);
	Direction = __NFUN_253__(Vector(ShotCurrentDirection));
	targetdir = __NFUN_253__(__NFUN_239__(Enemy.Location, Location));
	targetdist = __NFUN_251__(__NFUN_239__(Enemy.Location, Location));
	DirDotDir = __NFUN_244__(Direction, targetdir);
	// End:0xBD
	if(__NFUN_148__(__NFUN_202__(__NFUN_214__(DirDotDir), __NFUN_195__(FiringConeMaxDegrees, __NFUN_196__(3.141593, 180))), __NFUN_202__(targetdist, MinAttackDistance)))
	{
		ShotCurrentDirection = AccurateShot(ShotCurrentDirection);
	}
	__NFUN_605__(__NFUN_226__(ShotDelay, ShotDelayVariance), false, 'Fire');
	return;
}

final function Rotator AccurateShot(Rotator InitialDirection)
{
	local Rotator ShotDirection;
	local float ShotTime;
	local Vector EnemyVelocity, PredictedLocation;
	local int NewIndex;

	// End:0x12
	if(__NFUN_339__(Enemy, none))
	{
		return InitialDirection;
	}
	NewIndex = __NFUN_164__(__NFUN_184__(Index), 2);
	ShotTime = __NFUN_196__(__NFUN_251__(__NFUN_239__(Enemy.Location, Location)), ShotSpeed);
	EnemyVelocity = __NFUN_237__(__NFUN_239__(Enemy.Location, ShotLastLocation), __NFUN_199__(Level.GameTimeSeconds, ShotLastTime));
	PredictedLocation = Enemy.Location;
	ShotStartLocation = __NFUN_238__(Location, __NFUN_241__(BlasterOffsets[NewIndex], Rotation));
	ShotEndLocation = GetShotVariance(PredictedLocation);
	ShotDirection = Rotator(__NFUN_239__(ShotEndLocation, ShotStartLocation));
	// End:0xFD
	if(__NFUN_340__(MuzzleFlashes[NewIndex], none))
	{
		MuzzleFlashes[NewIndex].ExecuteEffect(true);
	}
	FindAndPlaySound('FlyByPlane_Fighter_Fire', 1);
	__NFUN_615__(class'dnRocket_FlybyPlane_Fighter', self,, __NFUN_238__(Location, __NFUN_241__(BlasterOffsets[NewIndex], Rotation)), ShotDirection);
	ShotLastTime = Level.GameTimeSeconds;
	ShotLastLocation = Enemy.Location;
	return ShotDirection;
	return;
}

final function DamageMyEnemyCallback()
{
	DamageMyEnemy(ShotStartLocation, ShotEndLocation, bAccurateShots);
	return;
}

simulated function Tick(float fDeltaTime)
{
	local float D;

	super.Tick(fDeltaTime);
	// End:0x158
	if(__NFUN_148__(__NFUN_148__(__NFUN_145__(bCrashing), __NFUN_340__(Enemy, none)), bIsBombing))
	{
		D = __NFUN_251__(__NFUN_239__(Enemy.Location, Location));
		// End:0x100
		if(__NFUN_201__(MinAttackDistance, 0))
		{
			// End:0xBD
			if(__NFUN_148__(__NFUN_200__(D, MinAttackDistance), __NFUN_145__(bIsAttacking)))
			{
				bIsAttacking = true;
				AttackBeam.ActivateBeam();
				AttackBeam.DamagePlayer = AttackDamagePlayer;
				AttackBeam.DamageNonPlayer = AttackDamageNonPlayer;				
			}
			else
			{
				// End:0x100
				if(__NFUN_148__(__NFUN_148__(__NFUN_201__(MinAttackDistance, 0), __NFUN_201__(D, MinAttackDistance)), bIsAttacking))
				{
					bIsAttacking = false;
					AttackBeam.DeactivateBeam();
				}
			}
		}
		// End:0x158
		if(__NFUN_201__(MinDamageDistance, 0))
		{
			// End:0x136
			if(__NFUN_148__(__NFUN_200__(D, MinDamageDistance), __NFUN_145__(bIsVulnerable)))
			{
				bIsVulnerable = true;				
			}
			else
			{
				// End:0x158
				if(__NFUN_148__(__NFUN_201__(D, MinDamageDistance), bIsVulnerable))
				{
					bIsVulnerable = false;
				}
			}
		}
	}
	return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	// End:0x18
	if(__NFUN_150__(bNoDamage, __NFUN_145__(bIsVulnerable)))
	{
		return;
	}
	// End:0x90
	if(__NFUN_202__(__NFUN_199__(Health, Damage), 0))
	{
		AttackBeam.DeactivateBeam();
		DisableShots();
		// End:0x90
		if(__NFUN_200__(__NFUN_222__(), CrashChance))
		{
			// End:0x76
			if(__NFUN_340__(DukePlayer(Instigator), none))
			{
				DukePlayer(Instigator).NoteAlienFighterDestroyed();
			}
			Crashing(PlayerPawn(Instigator));
			bIsVulnerable = false;
			return;
		}
	}
	super.TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
	// End:0xEB
	if(__NFUN_202__(Health, float(0)))
	{
		// End:0xEB
		if(__NFUN_340__(DukePlayer(Instigator), none))
		{
			DukePlayer(Instigator).NoteAlienFighterDestroyed();
		}
	}
	return;
}

event KImpact(name SelfBoneName, KarmaActor Other, name OtherBoneName, Vector Position, Vector ImpactVelocity, Vector ImpactNormal)
{
	super(dnDecoration).KImpact(SelfBoneName, Other, OtherBoneName, Position, ImpactVelocity, ImpactNormal);
	CriticalDamage();
	return;
}

function Crashing(PlayerPawn Killer)
{
	local Rotator FinalCrashTumbleRate;
	local Vector V, DrawScale3DChange;
	local float Roll, DrawScaleChange;
	local int i;
	local PhysicsAction_ConstAccel MyPA;
	local dnFriendFX_Spawners ExplosionActor;
	local SoftParticleSystem SmokeTrail;

	// End:0x0B
	if(bCrashing)
	{
		return;
	}
	bIgnoreAimAssist = true;
	FindAndPlaySound('FlyByPlane_Fighter_Explode', 1);
	FindAndPlaySound(AmbientCrashingSoundName);
	bCrashing = true;
	AttackBeam.DeactivateBeam();
	DisableShots();
	ConTrailB.Enabled = false;
	SmokeTrail = __NFUN_615__(class'FlybyPlane_Damaged_Main', self,, __NFUN_238__(Location, __NFUN_241__(__NFUN_232__(-187.5898, -22.61621, 11.96341), Rotation)), Rotation);
	SmokeTrail.__NFUN_635__(self);
	SmokeTrail = __NFUN_615__(class'FlybyPlane_Damaged_Main', self,, __NFUN_238__(Location, __NFUN_241__(__NFUN_232__(-188.5898, 23.38379, 11.96341), Rotation)), Rotation);
	SmokeTrail.__NFUN_635__(self);
	SmokeTrail = __NFUN_615__(class'FlybyPlane_Damaged_Main', self,, __NFUN_238__(Location, __NFUN_241__(__NFUN_232__(-208.0898, -0.116211, 48.96341), Rotation)), Rotation);
	SmokeTrail.__NFUN_635__(self);
	SmokeTrail = __NFUN_615__(class'FlybyPlane_Damaged_Main', self,, __NFUN_238__(Location, __NFUN_241__(__NFUN_232__(115.8833, -202.3237, -73.09222), Rotation)), Rotation);
	SmokeTrail.__NFUN_635__(self);
	SmokeTrail = __NFUN_615__(class'FlybyPlane_Damaged_Main', self,, __NFUN_238__(Location, __NFUN_241__(__NFUN_232__(135.8833, 199.6763, -70.09222), Rotation)), Rotation);
	SmokeTrail.__NFUN_635__(self);
	// End:0x249
	if(__NFUN_340__(CrashInitialExplosion, none))
	{
		ExplosionActor = FindFriendSpawner(CrashInitialExplosion);
		// End:0x249
		if(__NFUN_340__(ExplosionActor, none))
		{
			__NFUN_594__(DrawScaleChange, DrawScale3DChange);
			ExplosionActor.SystemSizeScale = __NFUN_195__(ExplosionActor.default.SystemSizeScale, DrawScaleChange);
			ExplosionActor.__NFUN_645__(Location);
			ExplosionActor.__NFUN_652__(__NFUN_265__(0, 0, 0));
			ExplosionActor.RemoteRole = ROLE_None;
			ExplosionActor.ExecuteEffect(true);
		}
	}
	V = Velocity;
	__NFUN_642__(18);
	__NFUN_621__(,,, true);
	__NFUN_790__(__NFUN_241__(V, __NFUN_265__(int(__NFUN_195__(float(8192), __NFUN_223__(-3, 3))), int(__NFUN_195__(float(16384), __NFUN_223__(-3, 3))), 0)), 1);
	V.X = 0;
	V.Y = __NFUN_195__(__NFUN_223__(-11, 11), 100000);
	V.Z = __NFUN_195__(__NFUN_223__(7.5, 11), 100000);
	// End:0x305
	if(__NFUN_200__(__NFUN_222__(), 0.5))
	{
		V.Y = __NFUN_194__(V.Y);
	}
	__NFUN_820__(__NFUN_241__(V, Rotation),,, true);
	V.Y = __NFUN_195__(__NFUN_223__(4, 7), 1E+08);
	V.Z = __NFUN_195__(__NFUN_223__(4, 7), 1E+08);
	// End:0x376
	if(__NFUN_200__(__NFUN_222__(), 0.5))
	{
		V.Y = __NFUN_194__(V.Y);
	}
	// End:0x399
	if(__NFUN_200__(__NFUN_222__(), 0.5))
	{
		V.Z = __NFUN_194__(V.Z);
	}
	__NFUN_821__(V);
	GravityScale = 2;
	__NFUN_607__(__NFUN_223__(2, 4), false, 'doit');
	GlobalTrigger(CrashingEvent, Killer, self);
	return;
}

final function ExecuteExplosionEffect(class<dnFriendFX_Spawners> ExplosionClass)
{
	return;
}

final function int BoostAxis(int Current, int Boost)
{
	// End:0x1B
	if(__NFUN_169__(Current, 0))
	{
		return __NFUN_181__(Current, Boost);		
	}
	else
	{
		return __NFUN_180__(Current, Boost);
	}
	return;
}

final function doit()
{
	CriticalDamage();
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(dnDecoration_Characters).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1277__(VoicePack, AmbientFlyingSoundName);
	PrecacheIndex.__NFUN_1277__(VoicePack, AmbientCrashingSoundName);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'FlyByPlane_Fighter_Fire');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'FlyByPlane_Fighter_Explode');
	PrecacheIndex.__NFUN_1266__(CrashInitialExplosion);
	PrecacheIndex.__NFUN_1266__(class'dnRocket_FlybyPlane_Fighter');
	PrecacheIndex.__NFUN_1266__(class'FlybyPlane_Damaged_Main');
	return;
}

defaultproperties
{
	ShotsAccurate=8
	ShotsAccurateVariance=3
	ShotsTillAccurate=2
	ShotDelay=0.33
	AmbientFlyingSoundName=FlyByPlane_Fighter_Flying
	AmbientCrashingSoundName=FlyByPlane_Fighter_Crashing
	CrashChance=0.3
	CrashExplodeOnImpactChance=1
	CrashExplodeDelayTime=1
	CrashTumbleBoost=(Pitch=8741,Yaw=572915712,Roll=8192)
	CrashTumbleRateVariance=(Pitch=536879653,Yaw=572915712,Roll=16384)
	CrashInitialExplosion='p_Vehicles.Alien_Fighter_Explode.Alien_Fighter_Explode_Spawner'
	MinAttackDistance=1E+08
	AttackDamagePlayer=10
	AttackDamageNonPlayer=1000
	bIsVulnerable=true
	MaxSpeed=4000
	FiringConeMaxDegrees=30
	BlasterOffsets[0]=(X=-7.385188E+20,Y=2.954707E-17,Z=-202.3237)
	BlasterOffsets[1]=(X=-7.385188E+20,Y=2.954707E-17,Z=199.6763)
	ShootingInfo=(ShotStyle=0,ShotDamage=2,ShotDamageVariance=0,ShotLength=8000,ShotTargetVariance=(X=1.292418E-41,Y=2.954684E-17,Z=96),Z=96)
	DestroyedActivities(0)=none
	begin object name=DA_Sound_FlyByPlane_Fighter_Explode class=DecoActivities_Sound
		SoundNames(0)=FlyByPlane_Fighter_Explode
	object end
	// Reference: DecoActivities_Sound'dnFlybyPlane_Fighter.DA_Sound_FlyByPlane_Fighter_Explode'
	DestroyedActivities(1)=DA_Sound_FlyByPlane_Fighter_Explode
	HealthPrefab=5
	MountOnSpawn(0)=(bSkipVerifySelf=false,SpawnClass='p_Vehicles.Alien_Fighter_MuzzleFlash.Alien_Fighter_MuzzleFlash_Spawner',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=MuzzleFlashLeft,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=1.292418E-41,Y=2.954711E-17,Z=-200),Z=-75),MountOriginVariance=(X=1.292418E-41,Y=2.94903E-17,Z=0),Z=0)
	MountOnSpawn(1)=(MountAngles=(Pitch=8741,Yaw=572915712,Roll=0),Roll=0)
	MountOnSpawn(2)=(MountAnglesVariance=(Pitch=8741,Yaw=572915712,Roll=0),Roll=0)
	MountOnSpawn(3)=(MountType=0,DismountPhysics=0)
	MountOnSpawn(4)=(RenderObject=none,DrawScale=0)
	MountOnSpawn(5)=(bSkipVerifySelf=false,SpawnClass='p_Vehicles.Alien_Fighter_MuzzleFlash.Alien_Fighter_MuzzleFlash_Spawner',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=MuzzleFlashRight,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=1.292418E-41,Y=2.954711E-17,Z=200),Z=-75),MountOriginVariance=(X=1.292418E-41,Y=2.94903E-17,Z=0),Z=0)
	MountOnSpawn(6)=(MountAngles=(Pitch=8741,Yaw=572915712,Roll=0),Roll=0)
	MountOnSpawn(7)=(MountAnglesVariance=(Pitch=8741,Yaw=572915712,Roll=0),Roll=0)
	MountOnSpawn(8)=(MountType=0,DismountPhysics=0)
	MountOnSpawn(9)=(RenderObject=none,DrawScale=0)
	MountOnSpawn(10)=(bSkipVerifySelf=false,SpawnClass='dnFlybyPlane_Fighter_VaporBeam',SpawnChance=0,MountPrefab=(bDontActuallyMount=false,bHideable=false,bIndependentRotation=false,bIndependentLocation=false,bMatchParentLocation=false,bMatchParentRotation=false,bSurviveDismount=true,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bTransformDrawScale3DChange=false,bTakeParentTag=false,bTransferToCorpse=false,bDontSetOwner=false,MountParentTag=None,DrawScaleOverride=0,AppendToTag=None,ForceTag=ConTrailA,ForceEvent=None,MountMeshItem=None,MountOrigin=(X=1.292418E-41,Y=2.965526E-17,Z=200),Z=-30),MountOriginVariance=(X=1.292418E-41,Y=2.94903E-17,Z=0),Z=0)
	Health=150
	HealthCap=150
	SpawnOnDestroyed(0)=(SpawnClass='dnFlybyPlane_Fighter_Gib_A',RenderObject=none,DrawScale=0,DrawScaleVariance=0,DrawScale3D=(X=1.292418E-41,Y=2.94903E-17,Z=0),Z=0)
	SpawnOnDestroyed(1)=(SpawnChance=0,SpawnCopies=0,SpawnCopiesVariance=0,bIgnorePawnAirCushion=false,bDontScaleByDrawScale=false,bScaleByDrawScaleNonDefault=false,bNoCollision=false,bFindSpot=false,bIgnoreParentRotation=false,bTakeParentCollisionSize=false,bTakeParentMounting=false,bTakeParentActorColors=false,bTakeParentSkins=false,Offset=(X=1.292418E-41,Y=2.954573E-17,Z=1),Z=-1)
	SpawnOnDestroyed(2)=(OffsetVariance=(X=1.292418E-41,Y=2.94903E-17,Z=0),Z=0)
	SpawnOnDestroyed(3)=(Rotation=(Pitch=8741,Yaw=572915712,Roll=0),Roll=0)
	SpawnOnDestroyed(4)=(RotationVariance=(Pitch=8741,Yaw=572915712,Roll=0),Roll=0)
	DestroyedParticleFriendEffects(0)=(bAbsoluteLocation=false,bAbsoluteRotation=false,Scale=0,BoneName=None,Location=(X=1.292418E-41,Y=2.94903E-17,Z=0),Z=0)
	SoundScaled=false
	CollisionRadius=260
	CollisionHeight=95
	Mass=5000
	DrawType=8
	StaticMesh='sm_class_vehicles.Aircraft.AlienDroneShip'
	TransientSoundVolume=0.7
	VoicePack='SoundConfig.Vehicles.VoicePack_AlienFighter'
}