/*******************************************************************************
 * PistolBase generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class PistolBase extends Weapon
	abstract;

const PISTOLBASE_WS_IdleLarge = 16;

struct SPistolInfo
{
	var travel RenderActor PistolActor;
	var() travel int BulletsFired;
	var() travel int MaxBulletsInClip;
	var() travel int MaxBulletsInChamber;
};

var() float LargeIdleChance;
var() float MinimumLargeIdleDelay;
var float LastLargeIdleTime;
var bool bCanSpin;
var() float BaseDamagePerShot;
var int ReservedAmmo;
var bool bKilledSuccess;
var float KilledSuccessTime;

simulated function KillSuccessAnim()
{
	bKilledSuccess = true;
	KilledSuccessTime = Level.GameTimeSeconds;
	return;
}

simulated function int CalculateReservedAmmo()
{
	return;
}

simulated function NoteIntigatorTookDamage()
{
	bCanSpin = false;
	__NFUN_605__(30, false, 'AllowSpin');
	return;
}

simulated function WpnIdle()
{
	// End:0x8C
	if(bKilledSuccess)
	{
		bKilledSuccess = false;
		// End:0x8C
		if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_200__(__NFUN_199__(Level.GameTimeSeconds, KilledSuccessTime), 2), __NFUN_200__(__NFUN_222__(), LargeIdleChance)), __NFUN_145__(Instigator.IsZoomedIn())), CanSpin()), __NFUN_145__(Instigator.PhysicsVolume.bWaterVolume)))
		{
			SetWeaponState(16);
			return;
		}
	}
	// End:0x11A
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_201__(__NFUN_199__(Level.GameTimeSeconds, LastLargeIdleTime), MinimumLargeIdleDelay), __NFUN_145__(Instigator.IsZoomedIn())), CanSpin()), __NFUN_145__(Instigator.PhysicsVolume.bWaterVolume)))
	{
		LastLargeIdleTime = Level.GameTimeSeconds;
		// End:0x11A
		if(__NFUN_200__(__NFUN_222__(), LargeIdleChance))
		{
			SetWeaponState(16);
			return;
		}
	}
	super.WpnIdle();
	return;
}

simulated function name GetWeaponAnimReq(byte WeaponStateReq, optional out byte byForceReset)
{
	// End:0x13
	if(__NFUN_173__(int(WeaponStateReq), 16))
	{
		return 'IdleLarge';
	}
	return super.GetWeaponAnimReq(WeaponStateReq, byForceReset);
	return;
}

simulated function UpdateBullets(out SPistolInfo PistolInfo)
{
	local int BulletsLeft;

	__NFUN_184__(PistolInfo.BulletsFired);
	BulletsLeft = __NFUN_188__(PistolInfo.MaxBulletsInChamber, AmmoLoaded);
	return;
}

simulated function float GetBaseFiringDamage()
{
	return __NFUN_195__(Instigator.TraceFireDamageMultiplier, BaseDamagePerShot);
	return;
}

simulated function AllowSpin()
{
	bCanSpin = true;
	return;
}

simulated function bool CanSpin()
{
	local PlayerPawn P;

	// End:0x3C
	if(bCanSpin)
	{
		P = PlayerPawn(Owner);
		// End:0x3C
		if(__NFUN_148__(__NFUN_340__(P, none), P.bIsSprinting))
		{
			return false;
		}
	}
	return bCanSpin;
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(InteractiveActor).RegisterPrecacheComponents(PrecacheIndex);
	// End:0x5E
	if(bCanSpin)
	{
		PrecacheIndex.__NFUN_1283__('IdleLarge', AnimationControllerClass, Mesh);
		PrecacheIndex.__NFUN_1281__(__NFUN_343__(__NFUN_302__(string(WeaponConfig.default.WeaponAnimName), "IdleLarge")));
	}
	return;
}

state idle
{
	simulated event EndState()
	{
		// End:0x19
		if(__NFUN_684__(14))
		{
			__NFUN_698__(14, 0.2, 0, 2);
		}
		super(Object).EndState();
		return;
	}
	stop;
}

defaultproperties
{
	LargeIdleChance=0.5
	MinimumLargeIdleDelay=20
	bCanSpin=true
}