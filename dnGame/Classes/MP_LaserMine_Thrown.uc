/*******************************************************************************
 * MP_LaserMine_Thrown generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MP_LaserMine_Thrown extends MP_LaserMine
	collapsecategories;

var bool bDoMagnet;
var int bouncecount;

simulated function Destroyed()
{
	DukeMultiPlayer(Instigator).TripMineDestoryed(self);
	super.Destroyed();
	return;
}

simulated event HitWall(Vector HitNormal, Actor HitWall)
{
	local STraceFlags TraceFlags;
	local STraceHitResult PlacementTraceResult;
	local Vector AbsoluteLocation;
	local Rotator AbsoluteRotation;
	local float TraceDist;
	local bool bAccept, bAcceptAtAnyAngle;
	local name closestBoneName;
	local Vector backupLocation;

	// End:0x57
	if(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_145__(IsMP()), __NFUN_145__(bDontUseMeqonPhysics)), __NFUN_173__(int(Physics), int(18))), __NFUN_173__(int(Level.NetMode), int(NM_Client))), __NFUN_340__(dnJumpPad_Collision(HitWall), none)))
	{
		return;
	}
	// End:0x486
	if(__NFUN_148__(__NFUN_340__(HitWall, Instigator), __NFUN_339__(MountParent, none)))
	{
		// End:0x139
		if(__NFUN_340__(HitWall, none))
		{
			// End:0xB3
			if(__NFUN_173__(int(Level.NetMode), int(NM_Standalone)))
			{
				bAccept = HitWall.bAcceptMines;				
			}
			else
			{
				bAccept = HitWall.bAcceptMinesInMultiplayer;
			}
			bAcceptAtAnyAngle = HitWall.bAcceptMinesAtAnyAngle;
			// End:0x136
			if(__NFUN_145__(bAccept))
			{
				Velocity = __NFUN_257__(Velocity, HitNormal);
				Velocity = __NFUN_234__(Velocity, 0.0625);
				// End:0x136
				if(__NFUN_200__(__NFUN_251__(Velocity), 40))
				{
					Velocity = __NFUN_234__(__NFUN_253__(Velocity), 40);
				}
			}			
		}
		else
		{
			bAccept = true;
			bAcceptAtAnyAngle = true;
		}
		// End:0x486
		if(bAccept)
		{
			TraceFlags.bTraceActors = true;
			TraceFlags.bMeshAccurate = true;
			TraceFlags.bShotTrace = true;
			TraceFlags.bTraceTexture = true;
			AbsoluteLocation = Location;
			AbsoluteRotation = Rotation;
			TraceDist = float(__NFUN_188__(int(__NFUN_251__(Velocity)), int(Instigator.UseDistance)));
			__NFUN_207__(TraceDist, __NFUN_196__(1, Instigator.DrawScale));
			HitNormal = __NFUN_253__(__NFUN_233__(Velocity));
			__NFUN_736__(__NFUN_238__(Location, HitNormal), __NFUN_238__(Location, __NFUN_234__(__NFUN_233__(HitNormal), TraceDist)), TraceFlags, PlacementTraceResult);
			// End:0x2DB
			if(__NFUN_148__(__NFUN_340__(PlacementTraceResult.Actor, none), CanAcceptMinePlacement(PlacementTraceResult)))
			{
				// End:0x26D
				if(PlacementTraceResult.Actor.bIsPipeBombOrTripMine)
				{
					AbsoluteRotation = PlacementTraceResult.Actor.Rotation;					
				}
				else
				{
					// End:0x29F
					if(__NFUN_200__(__NFUN_244__(PlacementTraceResult.Normal, HitNormal), 0))
					{
						PlacementTraceResult.Normal = __NFUN_233__(PlacementTraceResult.Normal);
					}
				}
				rThrownMineAttach(AbsoluteLocation, AbsoluteRotation, PlacementTraceResult.Location, Rotator(PlacementTraceResult.Normal), PlacementTraceResult.Actor, PlacementTraceResult.MeshBone);				
			}
			else
			{
				// End:0x42D
				if(__NFUN_148__(__NFUN_340__(DukeMultiPlayer(HitWall), none), bDoMagnet))
				{
					closestBoneName = HitWall.MeshInstance.__NFUN_540__(Location, true);
					// End:0x350
					if(__NFUN_342__(closestBoneName, 'None'))
					{
						backupLocation = HitWall.MeshInstance.__NFUN_533__(closestBoneName, true);						
					}
					else
					{
						backupLocation = HitWall.Location;
					}
					__NFUN_736__(__NFUN_238__(Location, HitNormal), backupLocation, TraceFlags, PlacementTraceResult);
					// End:0x3E0
					if(__NFUN_148__(__NFUN_340__(PlacementTraceResult.Actor, none), CanAcceptMinePlacement(PlacementTraceResult)))
					{
						rThrownMineAttach(AbsoluteLocation, AbsoluteRotation, PlacementTraceResult.Location, Rotator(PlacementTraceResult.Normal), PlacementTraceResult.Actor, PlacementTraceResult.MeshBone);						
					}
					else
					{
						Velocity = __NFUN_257__(Velocity, HitNormal);
						Velocity = __NFUN_234__(Velocity, 0.0625);
						// End:0x42A
						if(__NFUN_200__(__NFUN_251__(Velocity), 40))
						{
							Velocity = __NFUN_234__(__NFUN_253__(Velocity), 40);
						}
					}					
				}
				else
				{
					__NFUN_184__(bouncecount);
					Velocity = __NFUN_257__(Velocity, HitNormal);
					Velocity = __NFUN_234__(__NFUN_234__(Velocity, 0.0625), float(bouncecount));
					// End:0x486
					if(__NFUN_200__(__NFUN_251__(Velocity), 40))
					{
						Velocity = __NFUN_234__(__NFUN_253__(Velocity), 40);
					}
				}
			}
		}
	}
	return;
}

defaultproperties
{
	bResetOnFellOutOfWorld=true
	bDoPhysicsWaterEffects=true
	WaterSplash='p_Decorations.WaterSplash_Medium.WaterSplash_Medium_Spawner'
	KRestitution=0.5
	bTraceShootable=false
	bIsPipeBombOrTripMine=true
	bAcceptMinesInMultiplayer=true
	bDontUseMeqonPhysics=true
	TickStyle=2
}