/*******************************************************************************
 * dnControl_LimitedRangeMover generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_LimitedRangeMover extends dnControl
	abstract
	collapsecategories;

var() noexport bool bUnlimited "When true, stuck animations will never play and index in Event list will wrap around at the ends.";
var() noexport array<name> Events "You need as many of these as you want turns. Leave it None if you just want an empty turn with no event called.";
var() noexport array<name> EventsDelayed "These get called after the animation has completed, as opposed to when it starts like Events.";
var() noexport int StartIndex "The index of the Event list that you want to start out in.";
var() noexport deprecated name LeftEvent "Event to call every single time you press left.";
var() noexport deprecated name RightEvent "Event to call every single time you press right.";
var() noexport deprecated name LeftEventDelayed "Event to call every single time you press left and the animation has completed.";
var() noexport deprecated name RightEventDelayed "Event to call every single time you press right and the animation has completed.";
var noexport name TurnSoundName "VoicePack entry to play when turning.";
var noexport name EndSoundName "VoicePack entry to play when we've reached the last possible turn.";
var noexport name WontBudgeSoundName "VoicePack entry to play when we try to turn but can't.";
var int stateIndex;
var bool bJustFinishedAnim;

function PostBeginPlay()
{
	super(dnUsableSomething).PostBeginPlay();
	stateIndex = __NFUN_191__(StartIndex, 0, __NFUN_166__(string(Events), 1));
	SetupEvents();
	return;
}

function SetupEvents()
{
	local int i;

	// End:0x1E
	if(__NFUN_169__(string(EventsDelayed), string(Events)))
	{
		string(EventsDelayed) = string(Events);
	}
	i = __NFUN_166__(string(Events), 1);
	J0x2D:

	// End:0x5A [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x50
		if(__NFUN_342__(Events[i], 'None'))
		{
			return;
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x2D;
	}
	i = __NFUN_166__(string(Events), 1);
	J0x69:

	// End:0x9C [Loop If]
	if(__NFUN_172__(i, 0))
	{
		Events[i] = __NFUN_343__(__NFUN_302__(string(Tag), string(i)));
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x69;
	}
	return;
}

function bool ForceInternalState(int NewIndex)
{
	// End:0x22
	if(__NFUN_150__(__NFUN_170__(NewIndex, __NFUN_166__(string(Events), 1)), __NFUN_169__(NewIndex, 0)))
	{
		return false;
	}
	// End:0x33
	if(__NFUN_173__(NewIndex, stateIndex))
	{
		return false;
	}
	stateIndex = NewIndex;
	return true;
	return;
}

function bool ModifyInternalState(bool bTurnRight)
{
	// End:0x2B
	if(bTurnRight)
	{
		// End:0x28
		if(__NFUN_171__(__NFUN_165__(stateIndex, 1), __NFUN_166__(string(Events), 1)))
		{
			__NFUN_184__(stateIndex);
			return true;
		}		
	}
	else
	{
		// End:0x42
		if(__NFUN_172__(__NFUN_166__(stateIndex, 1), 0))
		{
			__NFUN_185__(stateIndex);
			return true;
		}
	}
	return false;
	return;
}

function MoveLeft()
{
	__NFUN_185__(stateIndex);
	GlobalTrigger(Events[stateIndex]);
	GlobalTrigger(LeftEvent);
	// End:0x3E
	if(__NFUN_173__(stateIndex, 0))
	{
		FindAndPlaySound(EndSoundName, 1);		
	}
	else
	{
		FindAndPlaySound(TurnSoundName, 1);
	}
	return;
}

function MoveLeftEnd()
{
	GlobalTrigger(EventsDelayed[stateIndex]);
	GlobalTrigger(LeftEventDelayed);
	bJustFinishedAnim = true;
	return;
}

function CantMoveLeft()
{
	FindAndPlaySound(WontBudgeSoundName, 1);
	return;
}

function MoveRight()
{
	__NFUN_184__(stateIndex);
	GlobalTrigger(Events[stateIndex]);
	GlobalTrigger(RightEvent);
	// End:0x46
	if(__NFUN_173__(stateIndex, __NFUN_166__(string(Events), 1)))
	{
		FindAndPlaySound(EndSoundName, 1);		
	}
	else
	{
		FindAndPlaySound(TurnSoundName, 1);
	}
	return;
}

function MoveRightEnd()
{
	GlobalTrigger(EventsDelayed[stateIndex]);
	GlobalTrigger(RightEventDelayed);
	bJustFinishedAnim = true;
	return;
}

function CantMoveRight()
{
	FindAndPlaySound(WontBudgeSoundName, 1);
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1277__(VoicePack, TurnSoundName);
	PrecacheIndex.__NFUN_1277__(VoicePack, EndSoundName);
	PrecacheIndex.__NFUN_1277__(VoicePack, WontBudgeSoundName);
	return;
}

state() idle
{
	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		// End:0x2B
		if(__NFUN_145__(bJustFinishedAnim))
		{
			SetHUDKeyInfoState(HUD, 2, true, 7);
			SetHUDKeyInfoState(HUD, 3, true, 8);
		}
		bJustFinishedAnim = false;
		return;
	}
	stop;
}

state() PressLeft
{
	event BeginState()
	{
		// End:0x22
		if(__NFUN_148__(bUnlimited, __NFUN_173__(stateIndex, 0)))
		{
			stateIndex = string(Events);
		}
		// End:0x3C
		if(__NFUN_171__(stateIndex, 0))
		{
			ControlEvent(, 'Stuck');			
		}
		else
		{
			ControlEvent(, 'NotStuck');
		}
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() DoPressLeft
{
	event BeginState()
	{
		MoveLeft();
		return;
	}

	event EndState()
	{
		MoveLeftEnd();
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() PressLeftStuck
{
	event BeginState()
	{
		CantMoveLeft();
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() PressRight
{
	event BeginState()
	{
		// End:0x29
		if(__NFUN_148__(bUnlimited, __NFUN_173__(stateIndex, __NFUN_166__(string(Events), 1))))
		{
			stateIndex = -1;
		}
		// End:0x4B
		if(__NFUN_172__(stateIndex, __NFUN_166__(string(Events), 1)))
		{
			ControlEvent(, 'Stuck');			
		}
		else
		{
			ControlEvent(, 'NotStuck');
		}
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() DoPressRight
{
	event BeginState()
	{
		MoveRight();
		return;
	}

	event EndState()
	{
		MoveRightEnd();
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() PressRightStuck
{
	event BeginState()
	{
		CantMoveRight();
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

defaultproperties
{
	Events(0)=AnimTween
	EndingBlendAlpha=None
	UserSoundName=None
	MyAnim=(Flags=(bLoop=false,bNoLoopEnd=false,bFade=false,bNoRemove=false,bLoopMovement=false,bInterrupt=false,bEarlyEnd=false,bAdjustStart=false),Animation=None,Channel=0,Rate=0,TweenTime=0)
	MySound=(bAllowRepeats=false,bPlayAsAmbient=false,MixerGroupOverride=None,SimpleSingleSound=none,Sounds=/* Array type was not detected. */)
	MySoundName=None
	SubAnims=/* Array type was not detected. */
}