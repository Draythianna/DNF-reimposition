/*******************************************************************************
 * dnControl_TapPowered generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_TapPowered extends dnControl
	abstract
	collapsecategories;

var() noexport bool bForceDrop "When true, after a full 'lift', input will be ignored until fully relaxed.";
var float LiftWeight;
var() noexport float StartTapInterval "Starting tap interval.";
var() noexport float EndTapInterval "Ending tap interval, allowing tap speed requirement to change over time.";
var() noexport float RateOfGain "Upon a successfully timed tap, this is the rate at which the strength meter will increase.";
var() noexport float RateOfLoss "When the minimum tap interval is not met, this is the rate at which the strength meter will decrease.";
var() noexport float FadeToRestTime "Amount of time it takes to return to 'rest' pose before proceeding with detach.";
var() noexport localized string TapUsePhrase "Use Phrase to use when the user is attached and tapping.";
var() noexport float UserGruntDelay "How often the user will grunt during strength tap.";
var() noexport name UserGruntSoundName "Voicepack entry to play on user for grunting.";
var() SRumbleInfo TapRumble;
var() SRumbleInfo FinishRumble;
var bool bLift;
var bool bSuccessfulTap;
var float UserLiftVal;
var float LastTapTime;
var float UserGruntCountdown;

function PostVerifySelf()
{
	super.PostVerifySelf();
	RestoreDefaults();
	return;
}

function RestoreDefaults()
{
	LastTapTime = Level.GameTimeSeconds;
	UserLiftVal = default.UserLiftVal;
	bLift = true;
	bSuccessfulTap = false;
	UserGruntCountdown = UserGruntDelay;
	return;
}

final function AddUserPower()
{
	local float Alpha, TimeSinceLastTap, MinTapInterval;

	Alpha = GetPCTTap();
	MinTapInterval = __NFUN_225__(__NFUN_195__(2, Level.TimeDeltaSeconds), __NFUN_195__(__NFUN_228__(Alpha, StartTapInterval, EndTapInterval), Level.TimeDilation));
	// End:0xD1
	if(PlayerUser.bIJumpPressed)
	{
		PlayerUser.bIJumpPressed = false;
		TimeSinceLastTap = __NFUN_199__(Level.GameTimeSeconds, LastTapTime);
		// End:0xBC
		if(__NFUN_150__(__NFUN_202__(TimeSinceLastTap, MinTapInterval), __NFUN_204__(Alpha, 0)))
		{
			bSuccessfulTap = true;
			UserStraining(false);
		}
		LastTapTime = Level.GameTimeSeconds;
	}
	return;
}

function FullyLifted()
{
	PlayerPawn(User).AddRumble(FinishRumble);
	return;
}

function UserStraining(bool bStraining)
{
	return;
}

function UpdateUserLift()
{
	return;
}

function FullyRelaxed()
{
	return;
}

function float GetPCTTap()
{
	return -1;
	return;
}

final function StopTicking()
{
	bNoNativeTick = true;
	TickStyle = default.TickStyle;
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', UserGruntSoundName);
	return;
}

state() Useable
{
	function BeginState()
	{
		super(Object).BeginState();
		__NFUN_605__(1, false, 'StopTicking');
		RestoreDefaults();
		return;
	}

	function EndState()
	{
		super(Object).EndState();
		__NFUN_606__('StopTicking');
		bNoNativeTick = false;
		TickStyle = 3;
		return;
	}
	stop;
}

state() AttachUserAnim
{
	function EndState()
	{
		UserStraining(false);
		UpdateUserLift();
		super.EndState();
		return;
	}
	stop;
}

state() idle
{
	event Tick(float DeltaSeconds)
	{
		local float Alpha, MinTapInterval, LastValue, TimeSinceLastTap;

		LastValue = UserLiftVal;
		super(dnControl).Tick(DeltaSeconds);
		// End:0x32
		if(__NFUN_150__(__NFUN_145__(bForceDrop), bLift))
		{
			AddUserPower();
		}
		Alpha = GetPCTTap();
		MinTapInterval = __NFUN_225__(__NFUN_195__(2, DeltaSeconds), __NFUN_195__(__NFUN_228__(Alpha, StartTapInterval, EndTapInterval), Level.TimeDilation));
		TimeSinceLastTap = __NFUN_199__(Level.GameTimeSeconds, LastTapTime);
		// End:0xA7
		if(__NFUN_201__(TimeSinceLastTap, MinTapInterval))
		{
			bSuccessfulTap = false;
		}
		TapRumble.RumbleRightMagnitude = __NFUN_195__(Alpha, default.TapRumble.RumbleRightMagnitude);
		TapRumble.RumbleLeftMagnitude = __NFUN_195__(Alpha, default.TapRumble.RumbleLeftMagnitude);
		PlayerPawn(User).AddRumble(TapRumble);
		__NFUN_208__(DeltaSeconds, Level.TimeDilation);
		// End:0x1EF
		if(bSuccessfulTap)
		{
			__NFUN_210__(UserGruntCountdown, DeltaSeconds);
			// End:0x157
			if(__NFUN_202__(UserGruntCountdown, 0))
			{
				UserGruntCountdown = UserGruntDelay;
				User.FindAndPlaySound(UserGruntSoundName, 1, true, false);
			}
			// End:0x1B7
			if(__NFUN_148__(__NFUN_340__(PlayerUser, none), PlayerUser.bOnSteroids))
			{
				UserLiftVal = __NFUN_224__(1, __NFUN_198__(UserLiftVal, __NFUN_195__(__NFUN_195__(__NFUN_195__(__NFUN_195__(__NFUN_199__(MinTapInterval, TimeSinceLastTap), RateOfGain), 2), DeltaSeconds), 60)));				
			}
			else
			{
				UserLiftVal = __NFUN_224__(1, __NFUN_198__(UserLiftVal, __NFUN_195__(__NFUN_195__(__NFUN_195__(__NFUN_199__(MinTapInterval, TimeSinceLastTap), RateOfGain), DeltaSeconds), 60)));
			}			
		}
		else
		{
			UserGruntCountdown = UserGruntDelay;
			UserLiftVal = __NFUN_225__(-1, __NFUN_199__(UserLiftVal, __NFUN_195__(__NFUN_195__(__NFUN_195__(TimeSinceLastTap, RateOfLoss), DeltaSeconds), 60)));
			// End:0x245
			if(__NFUN_150__(__NFUN_145__(bForceDrop), bLift))
			{
				UserStraining(true);
			}
		}
		// End:0x274
		if(__NFUN_204__(UserLiftVal, -1))
		{
			// End:0x271
			if(__NFUN_201__(LastValue, -1))
			{
				bLift = true;
				FullyRelaxed();
			}			
		}
		else
		{
			// End:0x2A2
			if(__NFUN_148__(__NFUN_204__(UserLiftVal, 1), __NFUN_200__(LastValue, 1)))
			{
				bLift = false;
				FullyLifted();
			}
		}
		UpdateUserLift();
		return;
	}

	function float GetPCTTap()
	{
		// End:0x13
		if(__NFUN_339__(PlayerUser, none))
		{
			return global.GetPCTTap();
		}
		return __NFUN_227__(__NFUN_196__(__NFUN_198__(UserLiftVal, 1), 2), 0, 1);
		return;
	}

	event bool ShouldDrawHUDInfoUsePhrase(Pawn TestPawn)
	{
		return true;
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		SetHUDKeyInfoState(HUD, 1, true, 13, true,, TapUsePhrase);
		return;
	}
	stop;
}

state() FadeToRest
{
	event Tick(float DeltaSeconds)
	{
		super(dnControl).Tick(DeltaSeconds);
		__NFUN_208__(DeltaSeconds, Level.TimeDilation);
		// End:0x5A
		if(__NFUN_201__(UserLiftVal, default.UserLiftVal))
		{
			UserLiftVal = __NFUN_225__(default.UserLiftVal, __NFUN_199__(UserLiftVal, __NFUN_196__(__NFUN_195__(2, DeltaSeconds), FadeToRestTime)));			
		}
		else
		{
			// End:0x90
			if(__NFUN_200__(UserLiftVal, default.UserLiftVal))
			{
				UserLiftVal = __NFUN_224__(default.UserLiftVal, __NFUN_198__(UserLiftVal, __NFUN_196__(__NFUN_195__(2, DeltaSeconds), FadeToRestTime)));
			}
		}
		UpdateUserLift();
		// End:0xB1
		if(__NFUN_204__(UserLiftVal, default.UserLiftVal))
		{
			ControlEvent(, 'ProceedWithDetach');
		}
		PlayerPawn(User).AddRumble(FinishRumble);
		return;
	}
	stop;
}

defaultproperties
{
	bForceDrop=true
	LiftWeight=100
	StartTapInterval=0.3
	EndTapInterval=0.2
	RateOfGain=0.08
	RateOfLoss=0.1
	FadeToRestTime=0.5
	TapUsePhrase="<?int?dnGame.dnControl_TapPowered.TapUsePhrase?>"
	UserGruntDelay=1
	TapRumble=(RumbleName=StrengthTap_TapRumble,RumbleDuration=0.1,RumbleLeftMagnitude=0.2,RumbleRightMagnitude=0.6,FalloffActor=none,FalloffDistance=0)
	FinishRumble=(RumbleName=StrengthTap_FinishRumble,RumbleDuration=0.4,RumbleLeftMagnitude=0.4,RumbleRightMagnitude=0.7,FalloffActor=none,FalloffDistance=0)
	bLift=true
	UserLiftVal=-1
}