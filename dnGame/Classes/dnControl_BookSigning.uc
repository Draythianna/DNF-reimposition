/*******************************************************************************
 * dnControl_BookSigning generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_BookSigning extends dnControl_DrawableSurface
	collapsecategories;

var class<dnControlHelper_BookSigningPen> DukePenClass;
var dnControlHelper_BookSigningPen DukePen;
var float BoneAlpha;
var Vector Corners[4];
var Vector DrawOffset;
var Rotator HandBoneRot;

function PostBeginPlay()
{
	local Texture PenTexture;

	super(dnUsableSomething).PostBeginPlay();
	DukePen = __NFUN_615__(DukePenClass, self);
	DukePen.__NFUN_590__(true);
	DrawingTool = DukePen;
	ColorChange();
	return;
}

simulated event HiddenChanged()
{
	super(Actor).HiddenChanged();
	// End:0x2C
	if(__NFUN_145__(bHidden))
	{
		OverlayEffectAlpha = 0;
		FadeOverlayEffect(1, 1);
	}
	return;
}

event Destroyed()
{
	super(dnUsableSomething).Destroyed();
	DukePen.__NFUN_614__();
	return;
}

function AttachComplete()
{
	super(dnUsableSomething).AttachComplete();
	UpdatePenColor();
	DukePen.__NFUN_590__(false);
	DukePen.__NFUN_635__(User);
	return;
}

function DetachComplete()
{
	super(dnControl).DetachComplete();
	DukePen.__NFUN_590__(true);
	DukePen.__NFUN_631__();
	return;
}

k2call simulated function ColorChange()
{
	local byte PaletteIndex;

	super.ColorChange();
	// End:0x25
	if(__NFUN_340__(DukePen, none))
	{
		FindAndPlaySound('PenClick',,,, DukePen);
	}
	UpdatePenColor();
	return;
}

function UpdatePenColor()
{
	// End:0xAB
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_340__(DukePen, none), __NFUN_340__(DrawCanvas, none)), __NFUN_340__(DrawCanvas.Palette, none)), __NFUN_172__(int(DrawColors[CurrentColor]), 0)), __NFUN_169__(int(DrawColors[CurrentColor]), string(DrawCanvas.Palette.Colors))))
	{
		DukePen.__NFUN_601__('Generic0', DrawCanvas.Palette.Colors[int(DrawColors[CurrentColor])]);
	}
	return;
}

simulated event Actor GetIKActor(name LimbID)
{
	return User;
	return;
}

simulated event PostUserAnimTick()
{
	local Vector WeightedA, WeightedB, BonePos, DesiredBonePos;
	local Rotator BoneRot, DesiredBoneRot;
	local float XAlpha, YAlpha;

	super(Decoration).PostUserAnimTick();
	// End:0x9A
	if(__NFUN_145__(Level.bPaused))
	{
		// End:0x63
		if(__NFUN_341__(__NFUN_399__(), 'Drawing'))
		{
			__NFUN_209__(BoneAlpha, __NFUN_195__(8, Level.TimeDeltaSeconds));
			// End:0x60
			if(__NFUN_201__(BoneAlpha, 1))
			{
				BoneAlpha = 1;
			}			
		}
		else
		{
			__NFUN_210__(BoneAlpha, __NFUN_195__(8, Level.TimeDeltaSeconds));
			// End:0x9A
			if(__NFUN_200__(BoneAlpha, 0))
			{
				BoneAlpha = 0;
			}
		}
	}
	BonePos = User.MeshInstance.__NFUN_533__('righthand', true);
	BoneRot = User.MeshInstance.__NFUN_534__('righthand', true);
	// End:0x2C7
	if(__NFUN_201__(BoneAlpha, 0))
	{
		XAlpha = __NFUN_195__(0.5, __NFUN_198__(MouseInputX, 1));
		YAlpha = __NFUN_195__(0.5, __NFUN_198__(MouseInputY, 1));
		WeightedA = __NFUN_238__(__NFUN_235__(__NFUN_199__(1, XAlpha), Corners[0]), __NFUN_235__(XAlpha, Corners[1]));
		WeightedB = __NFUN_238__(__NFUN_235__(__NFUN_199__(1, XAlpha), Corners[2]), __NFUN_235__(XAlpha, Corners[3]));
		DesiredBonePos = __NFUN_238__(__NFUN_235__(__NFUN_199__(1, YAlpha), WeightedB), __NFUN_235__(YAlpha, WeightedA));
		__NFUN_246__(DesiredBonePos, User.DrawScale);
		DesiredBonePos = __NFUN_238__(User.Location, __NFUN_263__(DesiredBonePos, User.Rotation));
		BonePos.X = __NFUN_229__(BoneAlpha, BonePos.X, DesiredBonePos.X);
		BonePos.Y = __NFUN_229__(BoneAlpha, BonePos.Y, DesiredBonePos.Y);
		BonePos.Z = __NFUN_229__(BoneAlpha, BonePos.Z, DesiredBonePos.Z);
		User.MeshInstance.__NFUN_537__('mount_holster_hip_right', BonePos, true);
		DesiredBoneRot = __NFUN_269__(HandBoneRot, User.Rotation);
		User.MeshInstance.__NFUN_538__('mount_holster_hip_right', __NFUN_287__(BoneAlpha, BoneRot, DesiredBoneRot), true);		
	}
	else
	{
		User.MeshInstance.__NFUN_537__('mount_holster_hip_right', BonePos, true);
		User.MeshInstance.__NFUN_538__('mount_holster_hip_right', BoneRot, true);
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(DukePenClass);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'BookClose');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'BookOpen');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'PageFlip');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'PenClick');
	PrecacheIndex.__NFUN_1281__('BookSigning_ChangePenColor');
	PrecacheIndex.__NFUN_1281__('BookSigning_PenDown');
	return;
}

state PenClicky extends DrawableSurfaceBaseState
{
	event BeginState()
	{
		super(Object).BeginState();
		AimGridName = 'BookSigning_ChangePenColor';
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		// End:0x41
		if(__NFUN_148__(__NFUN_340__(PlayerUser, none), PlayerUser.__NFUN_994__()))
		{
			SetHUDKeyInfoState(HUD, 2, true, 27);
			SetHUDKeyInfoState(HUD, 3, true, 26);			
		}
		else
		{
			SetHUDKeyInfoState(HUD, 2, true, 26);
			SetHUDKeyInfoState(HUD, 3, true, 27);
		}
		return;
	}

	event EndState()
	{
		super(Object).EndState();
		AimGridName = default.AimGridName;
		return;
	}
	stop;
}

state Drawing
{
	event BeginState()
	{
		super.BeginState();
		AimGridName = 'BookSigning_PenDown';
		return;
	}

	event EndState()
	{
		super(Object).EndState();
		AimGridName = default.AimGridName;
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() DrawableSurfaceIdle
{
	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		// End:0x41
		if(__NFUN_148__(__NFUN_340__(PlayerUser, none), PlayerUser.__NFUN_994__()))
		{
			SetHUDKeyInfoState(HUD, 2, true, 27);
			SetHUDKeyInfoState(HUD, 3, true, 26);			
		}
		else
		{
			SetHUDKeyInfoState(HUD, 2, true, 26);
			SetHUDKeyInfoState(HUD, 3, true, 27);
		}
		return;
	}
	stop;
}

defaultproperties
{
	DukePenClass='dnControlHelper_BookSigningPen'
	Corners[0]=(X=-1.075528E+08,Y=2.965233E-17,Z=0.2)
	Corners[1]=(X=4.170945E-08,Y=2.965225E-17,Z=7.7)
	Corners[2]=(X=2.717022E+23,Y=2.965348E-17,Z=2.1)
	Corners[3]=(X=1.292418E-41,Y=2.965346E-17,Z=9.6)
	HandBoneRot=(Pitch=-214293979,Yaw=572981247,Roll=-5194)
	XDrawOffset=20
	YDrawOffset=120
	XDrawRatio=0.91
	YDrawRatio=0.58
	AimGridName=BookSigning_Idle
	WriteAnimName=None
	DrawColors(0)=4
	DrawColors(1)=255
	DrawColors(2)=252
	DrawColors(3)=253
	DrawColors(4)=250
}