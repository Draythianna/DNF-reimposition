/*******************************************************************************
 * dnControl_Ladder generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_Ladder extends dnControl
	collapsecategories;

const kLadderCRAdjust = 6.0f;
const kLadderRungSpacing = 12.0f;
const kLadderBodyRungs = 8;

enum ELadderTopExitStyle
{
	LADDEREXIT_Forward,
	LADDEREXIT_InPlace
};

var() noexport int NumRungs "Total number of rungs.  Each rung is 12 units apart (or 3 for shrunken mode).";
var() noexport int JumpOffNumRungs "When there are this many or fewer runs beneath your feet and you try to go down, you will jump off.  Set to 0 to go all to way to the bottom of the ladder.";
var() noexport deprecated array<name> LadderPartTags "List of the tags of our ladder part actors.";
var() noexport dnControl_Ladder.ELadderTopExitStyle TopExitStyle "Describes how the user exits at the top." "LADDEREXIT_Forward: User will climb up and forward to exit." "LADDEREXIT_InPlace: User will just drop off in current position.";
var int TopRung;
var array<dnControlHelper_LadderPart> LadderParts;

simulated event PostVerifySelf()
{
	local int i;
	local dnControlHelper_LadderPart LadderPart;

	super.PostVerifySelf();
	i = __NFUN_166__(string(LadderPartTags), 1);
	J0x15:

	// End:0x8C [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x81
		foreach __NFUN_747__(class'dnControlHelper_LadderPart', LadderPart, LadderPartTags[i])
		{
			LadderParts[string(LadderParts)] = LadderPart;
			LadderParts[__NFUN_166__(string(LadderParts), 1)].__NFUN_641__(self);
			LadderParts[__NFUN_166__(string(LadderParts), 1)].MimicOwner(self);			
		}		
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x15;
	}
	JumpOffNumRungs = __NFUN_191__(JumpOffNumRungs, 0, NumRungs);
	return;
}

simulated function AttachPawnSuccess(Pawn Attachee, optional bool bForced)
{
	local int i, FootRung;
	local Vector FootLoc;
	local Actor StoredMountParent;

	FootLoc = Attachee.Location;
	// End:0x43
	if(Attachee.bLowerByCollision)
	{
		__NFUN_210__(FootLoc.Z, Attachee.CollisionHeight);
	}
	FootRung = GetFootRung(FootLoc);
	// End:0x6D
	if(__NFUN_170__(FootRung, 0))
	{
		InterpolationInTime = 0.1;		
	}
	else
	{
		InterpolationInTime = 0.3;
	}
	TopRung = __NFUN_165__(FootRung, 8);
	StoredMountParent = InternalControlRemapper.MountParent;
	InternalControlRemapper.DestroyOnDismount = false;
	InternalControlRemapper.__NFUN_631__();
	InternalControlRemapper.MountOrigin.Z = __NFUN_198__(__NFUN_195__(float(FootRung), 12), 6);
	InternalControlRemapper.__NFUN_635__(StoredMountParent, false, false, false, false, false);
	super.AttachPawnSuccess(Attachee, bForced);
	return;
}

simulated function DetachComplete()
{
	local int i;

	super.DetachComplete();
	return;
}

simulated function int GetFootRung(Vector FootLoc, optional bool bDebug, optional float MarkerTime)
{
	local float RungSpacing;
	local int FootRung;

	RungSpacing = __NFUN_196__(__NFUN_195__(12, DrawScale), default.DrawScale);
	FootLoc = __NFUN_240__(__NFUN_239__(FootLoc, Location), Rotation);
	FootRung = __NFUN_191__(int(__NFUN_196__(FootLoc.Z, RungSpacing)), 0, __NFUN_166__(__NFUN_166__(NumRungs, 8), 1));
	// End:0xAA
	if(bDebug)
	{
		FootLoc = __NFUN_238__(Location, __NFUN_241__(__NFUN_232__(0, 0, __NFUN_195__(float(FootRung), RungSpacing)), Rotation));
		__NFUN_678__(FootLoc, NewColorBytes(255, 128, 0, 255), MarkerTime);
	}
	return FootRung;
	return;
}

function bool CanDetachPawn(bool bForceDetach)
{
	return __NFUN_148__(bUsable, super.CanDetachPawn(bForceDetach));
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'Ladder_Climb');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'LadderClimb_Rustle');
	return;
}

state() AttachUser
{	stop;
}

state IdleBase
{
	event BeginState()
	{
		super(Object).BeginState();
		UsableExits[0].bEnabled = true;
		UsableExits[1].bEnabled = false;
		UsableExits[2].bEnabled = false;
		return;
	}

	simulated function CREvent_KeyChange(ControlRemapperEx CR, Pawn InputActor, Engine.Actor.EControlRemapperKeyType KeyType, Engine.Actor.EControlRemapperEventType EventType)
	{
		super(dnControl).CREvent_KeyChange(CR, InputActor, KeyType, EventType);
		// End:0x179
		if(__NFUN_174__(int(EventType), int(2)))
		{
			// End:0xE5
			if(__NFUN_173__(int(KeyType), int(4)))
			{
				// End:0xCD
				if(__NFUN_172__(__NFUN_165__(TopRung, 2), NumRungs))
				{
					// End:0x57
					if(__NFUN_145__(CanDetachPawn(false)))
					{
						return;
					}
					// End:0x9D
					if(__NFUN_173__(int(TopExitStyle), int(1)))
					{
						UsableExits[0].bEnabled = false;
						UsableExits[1].bEnabled = false;
						UsableExits[2].bEnabled = true;
						DetachPawn(false);						
					}
					else
					{
						// End:0xBE
						if(__NFUN_173__(TopRung, __NFUN_166__(NumRungs, 1)))
						{
							ControlEventInternal(, 'Exit_A');							
						}
						else
						{
							ControlEventInternal(, 'Exit_B');
						}
					}					
				}
				else
				{
					__NFUN_180__(TopRung, 2);
					ControlEventInternal(, 'Climb');
				}				
			}
			else
			{
				// End:0x164
				if(__NFUN_173__(int(KeyType), int(5)))
				{
					// End:0x14C
					if(__NFUN_171__(__NFUN_166__(TopRung, 8), JumpOffNumRungs))
					{
						// End:0x114
						if(__NFUN_145__(CanDetachPawn(false)))
						{
							return;
						}
						UsableExits[0].bEnabled = true;
						UsableExits[1].bEnabled = false;
						UsableExits[2].bEnabled = false;
						DetachPawn(false);						
					}
					else
					{
						__NFUN_181__(TopRung, 2);
						ControlEventInternal(, 'ClimbDown');
					}					
				}
				else
				{
					// End:0x179
					if(__NFUN_173__(int(KeyType), int(6)))
					{
						DetachPawn(false);
					}
				}
			}
		}
		return;
	}
	stop;
}

state() IdleR extends IdleBase
{	stop;
}

state() IdleL extends IdleBase
{	stop;
}

state() ClimbR
{	stop;
}

state() ClimbL
{	stop;
}

state() ClimbDownR
{	stop;
}

state() ClimbDownL
{	stop;
}

state ExitBase
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		UsableExits[0].bEnabled = false;
		UsableExits[1].bEnabled = true;
		UsableExits[2].bEnabled = false;
		DetachPawnSuccess(false);
		return;
	}
	stop;
}

state() ExitR_A extends ExitBase
{	stop;
}

state() ExitR_B extends ExitBase
{	stop;
}

state() ExitL_A extends ExitBase
{	stop;
}

state() ExitL_B extends ExitBase
{	stop;
}

defaultproperties
{
	JumpOffNumRungs=4
}