/*******************************************************************************
 * dnControl_CoinOp_SlotMachine generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_CoinOp_SlotMachine extends dnControl_CoinOp
	collapsecategories;

const BAR = 0;
const BAR_BAR = 1;
const BELL = 2;
const CHERRY = 3;
const SEVEN = 4;
const Nuke = 5;
const MAX_SYMBOLS = 6;

struct MyRotor
{
	var TexPanner Panner;
	var int Velocity;
	var int DesiredSymbol;
};

var private class<SlotMachineInfo> MyInfo;
var private MyRotor Rotors[3];
var private int RotorTextureV;
var private float TimeSpinning;
var private Texture PreviousTexture;
var private int BlinksRemaining;
var private float BlinkTimeRemaining;
var private bool Active;
var private Pawn LastUser;
var localized string SpinText;

event PostBeginPlay()
{
	super.PostBeginPlay();
	TimeSpinning = 0;
	BlinksRemaining = -1;
	BlinkTimeRemaining = 0;
	__NFUN_741__(MyInfo.default.PayoutSectionID, MyInfo.default.PayoutTextureNone);
	InitialiseRotors();
	SwapToStaticTumblers();
	return;
}

final simulated function SwapToStaticTumblers()
{
	local int i, Symbol;

	i = 0;
	J0x07:

	// End:0x84 [Loop If]
	if(__NFUN_169__(i, 3))
	{
		Symbol = int(__NFUN_196__(Rotors[i].Panner.ShiftY, float(__NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols))));
		__NFUN_741__(MyInfo.default.RotorSectionID[i], MyInfo.default.SymbolTextures[Symbol]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

final simulated function SwapToPanningTumblers()
{
	local int i;

	i = 0;
	J0x07:

	// End:0x45 [Loop If]
	if(__NFUN_169__(i, 3))
	{
		__NFUN_741__(MyInfo.default.RotorSectionID[i], Rotors[i].Panner);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

event Tick(float DeltaTime)
{
	local int i, j, temp, vPan, vPanThisFrame, stoppingRotor,
		R1, r2, r3;

	local bool Payout;
	local int basePayout;
	local Texture tempTexture;

	super(dnControl).Tick(DeltaTime);
	// End:0x3B
	if(__NFUN_148__(__NFUN_148__(__NFUN_339__(User, none), __NFUN_145__(Active)), __NFUN_171__(BlinksRemaining, 0)))
	{
		TickStyle = 0;
		return;
	}
	// End:0xB3
	if(__NFUN_170__(BlinksRemaining, 0))
	{
		__NFUN_210__(BlinkTimeRemaining, DeltaTime);
		// End:0xB3
		if(__NFUN_202__(BlinkTimeRemaining, 0))
		{
			__NFUN_185__(BlinksRemaining);
			__NFUN_209__(BlinkTimeRemaining, 0.25);
			tempTexture = Texture(__NFUN_740__(MyInfo.default.PayoutSectionID));
			__NFUN_741__(MyInfo.default.PayoutSectionID, PreviousTexture);
			PreviousTexture = tempTexture;
		}
	}
	// End:0x6F6
	if(Active)
	{
		__NFUN_209__(TimeSpinning, DeltaTime);
		stoppingRotor = -1;
		// End:0x10A
		if(__NFUN_148__(__NFUN_203__(TimeSpinning, MyInfo.default.InitialSpinTime), __NFUN_174__(Rotors[0].Velocity, 0)))
		{
			stoppingRotor = 0;			
		}
		else
		{
			// End:0x152
			if(__NFUN_148__(__NFUN_203__(TimeSpinning, __NFUN_198__(MyInfo.default.InitialSpinTime, MyInfo.default.AdditionalRotorSpinTime)), __NFUN_174__(Rotors[1].Velocity, 0)))
			{
				stoppingRotor = 1;				
			}
			else
			{
				// End:0x19E
				if(__NFUN_148__(__NFUN_203__(TimeSpinning, __NFUN_198__(MyInfo.default.InitialSpinTime, __NFUN_195__(MyInfo.default.AdditionalRotorSpinTime, float(2)))), __NFUN_174__(Rotors[2].Velocity, 0)))
				{
					stoppingRotor = 2;
				}
			}
		}
		Payout = false;
		i = 0;
		J0x1AD:

		// End:0x383 [Loop If]
		if(__NFUN_169__(i, 3))
		{
			vPan = int(GetRotorV(i));
			vPanThisFrame = int(__NFUN_195__(float(Rotors[i].Velocity), DeltaTime));
			// End:0x34B
			if(__NFUN_173__(stoppingRotor, i))
			{
				temp = __NFUN_166__(__NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols), __NFUN_164__(vPan, __NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols)));
				// End:0x34B
				if(__NFUN_171__(temp, vPanThisFrame))
				{
					R1 = __NFUN_163__(__NFUN_165__(vPan, temp), __NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols));
					R1 = __NFUN_164__(__NFUN_165__(R1, MyInfo.default.RotorSymbolOffset[i]), 8);
					switch(i)
					{
						// End:0x2B4
						case 0:
							R1 = MapRotorSymbolToSymbolID(0, R1);
							// End:0x2EB
							break;
						// End:0x2CD
						case 1:
							R1 = MapRotorSymbolToSymbolID(1, R1);
							// End:0x2EB
							break;
						// End:0x2E8
						case 2:
							R1 = MapRotorSymbolToSymbolID(2, R1);
							// End:0x2EB
							break;
						// End:0xFFFF
						default:
							break;
					}
					// End:0x34B
					if(__NFUN_173__(Rotors[i].DesiredSymbol, R1))
					{
						__NFUN_180__(vPan, temp);
						vPanThisFrame = 0;
						Rotors[i].Velocity = 0;
						FindAndPlaySound('SlotMachine_WheelStop', 1);
						// End:0x34B
						if(__NFUN_173__(i, 2))
						{
							Payout = true;
						}
					}
				}
			}
			__NFUN_180__(vPan, vPanThisFrame);
			vPan = __NFUN_164__(vPan, RotorTextureV);
			SetRotorV(i, vPan);
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x1AD;
		}
		// End:0x6F6
		if(Payout)
		{
			Active = false;
			TimeSpinning = 0;
			SwapToStaticTumblers();
			__NFUN_701__(none);
			R1 = __NFUN_163__(int(GetRotorV(0)), __NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols));
			r2 = __NFUN_163__(int(GetRotorV(1)), __NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols));
			r3 = __NFUN_163__(int(GetRotorV(2)), __NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols));
			R1 = __NFUN_164__(__NFUN_165__(R1, MyInfo.default.RotorSymbolOffset[0]), 8);
			r2 = __NFUN_164__(__NFUN_165__(r2, MyInfo.default.RotorSymbolOffset[1]), 8);
			r3 = __NFUN_164__(__NFUN_165__(r3, MyInfo.default.RotorSymbolOffset[2]), 8);
			R1 = MapRotorSymbolToSymbolID(0, R1);
			r2 = MapRotorSymbolToSymbolID(1, r2);
			r3 = MapRotorSymbolToSymbolID(2, r3);
			// End:0x559
			if(__NFUN_148__(__NFUN_173__(R1, r2), __NFUN_173__(r2, r3)))
			{
				basePayout = 0;
				switch(R1)
				{
					// End:0x4F8
					case 0:
						basePayout = 10;
						// End:0x54B
						break;
					// End:0x507
					case 1:
						basePayout = 25;
						// End:0x54B
						break;
					// End:0x517
					case 2:
						basePayout = 40;
						// End:0x54B
						break;
					// End:0x527
					case 3:
						basePayout = 10;
						// End:0x54B
						break;
					// End:0x537
					case 4:
						basePayout = 80;
						// End:0x54B
						break;
					// End:0x548
					case 5:
						basePayout = 800;
						// End:0x54B
						break;
					// End:0xFFFF
					default:
						break;
				}
				Win(basePayout);				
			}
			else
			{
				// End:0x60D
				if(__NFUN_150__(__NFUN_150__(__NFUN_173__(R1, 3), __NFUN_173__(r2, 3)), __NFUN_173__(r3, 3)))
				{
					j = 0;
					// End:0x59B
					if(__NFUN_173__(R1, 3))
					{
						__NFUN_184__(j);
					}
					// End:0x5AE
					if(__NFUN_173__(r2, 3))
					{
						__NFUN_184__(j);
					}
					// End:0x5C1
					if(__NFUN_173__(r3, 3))
					{
						__NFUN_184__(j);
					}
					// End:0x5D6
					if(__NFUN_173__(j, 1))
					{
						basePayout = 1;						
					}
					else
					{
						// End:0x5ED
						if(__NFUN_173__(j, 2))
						{
							basePayout = 5;							
						}
						else
						{
							basePayout = 0;
						}
					}
					// End:0x60A
					if(__NFUN_170__(basePayout, 0))
					{
						Win(basePayout);
					}					
				}
				else
				{
					// End:0x699
					if(__NFUN_148__(__NFUN_148__(__NFUN_150__(__NFUN_150__(__NFUN_173__(R1, 0), __NFUN_173__(R1, 1)), __NFUN_173__(R1, 2)), __NFUN_150__(__NFUN_150__(__NFUN_173__(r2, 0), __NFUN_173__(r2, 1)), __NFUN_173__(r2, 2))), __NFUN_150__(__NFUN_150__(__NFUN_173__(r3, 0), __NFUN_173__(r3, 1)), __NFUN_173__(r3, 2))))
					{
						basePayout = 5;
						Win(basePayout);						
					}
					else
					{
						__NFUN_741__(MyInfo.default.PayoutSectionID, MyInfo.default.PayoutTextureNone);
						BlinksRemaining = MyInfo.default.PayoutBlinks;
						BlinkTimeRemaining = 0.4;
						PreviousTexture = MyInfo.default.PayoutTextureBlank;
					}
				}
			}
			LastUser = none;
		}
	}
	return;
}

function StartCoinOp()
{
	TickStyle = 3;
	return;
}

function EndCoinOp()
{
	return;
}

function bool CanInsertCoin()
{
	return false;
	return;
}

function InsertCoin()
{
	FindAndPlaySound('CoinOp_InsertCoin', 1);
	return;
}

function bool CanPressStartButton()
{
	return __NFUN_145__(Active);
	return;
}

function PressStartButton()
{
	local int i;
	local float f;
	local bool doOver;

	Active = true;
	LastUser = User;
	SwapToPanningTumblers();
	__NFUN_741__(MyInfo.default.PayoutSectionID, MyInfo.default.PayoutTextureBlank);
	i = 0;
	J0x41:

	// End:0xA8 [Loop If]
	if(__NFUN_169__(i, 3))
	{
		Rotors[i].Velocity = __NFUN_165__(__NFUN_162__(__NFUN_163__(MyInfo.default.RotorMaxVelocity, 4), 3), __NFUN_187__(__NFUN_163__(MyInfo.default.RotorMaxVelocity, 4)));
		Rotors[i].DesiredSymbol = 0;
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x41;
	}
	FindAndPlaySound('SlotMachine_PullLever', 1);
	FindAndPlaySound('SlotMachine_Spin', 1);
	f = __NFUN_222__();
	// End:0xEB
	if(__NFUN_202__(f, __NFUN_195__(4.6E-05, 3)))
	{
		SetAllRotorsDest(5);		
	}
	else
	{
		// End:0x10C
		if(__NFUN_202__(f, __NFUN_195__(0.000153, 24)))
		{
			SetAllRotorsDest(4);			
		}
		else
		{
			// End:0x12D
			if(__NFUN_202__(f, __NFUN_195__(0.000275, 16)))
			{
				SetAllRotorsDest(2);				
			}
			else
			{
				// End:0x14D
				if(__NFUN_202__(f, __NFUN_195__(0.000458, 40)))
				{
					SetAllRotorsDest(1);					
				}
				else
				{
					// End:0x192
					if(__NFUN_202__(f, __NFUN_195__(__NFUN_195__(0.000801, 30), float(2))))
					{
						i = __NFUN_187__(2);
						// End:0x187
						if(__NFUN_173__(i, 0))
						{
							SetAllRotorsDest(0);							
						}
						else
						{
							SetAllRotorsDest(3);
						}						
					}
					else
					{
						// End:0x2E5
						if(__NFUN_200__(f, __NFUN_195__(__NFUN_195__(0.0082, 6), float(2))))
						{
							i = __NFUN_187__(2);
							// End:0x203
							if(__NFUN_173__(i, 0))
							{
								SetAllRotorsDest(3);
								i = __NFUN_187__(3);
								J0x1D4:

								Rotors[i].DesiredSymbol = __NFUN_187__(6);
								// End:0x1D4
								if(!(__NFUN_174__(Rotors[i].DesiredSymbol, 3)))
									goto J0x1D4;								
							}
							else
							{
								i = 0;
								J0x20A:

								// End:0x25E [Loop If]
								if(__NFUN_169__(i, 3))
								{
									f = __NFUN_222__();
									// End:0x242
									if(__NFUN_202__(f, 0.7143))
									{
										Rotors[i].DesiredSymbol = 1;
										// [Explicit Continue]
										goto J0x254;
									}
									Rotors[i].DesiredSymbol = 0;
									J0x254:

									__NFUN_184__(i);
									// [Loop Continue]
									goto J0x20A;
								}
								// End:0x2E2
								if(__NFUN_148__(__NFUN_173__(Rotors[0].DesiredSymbol, Rotors[1].DesiredSymbol), __NFUN_173__(Rotors[1].DesiredSymbol, Rotors[2].DesiredSymbol)))
								{
									i = __NFUN_187__(3);
									// End:0x2D0
									if(__NFUN_173__(Rotors[i].DesiredSymbol, 0))
									{
										Rotors[i].DesiredSymbol = 1;										
									}
									else
									{
										Rotors[i].DesiredSymbol = 0;
									}
								}
							}							
						}
						else
						{
							// End:0x35D
							if(__NFUN_200__(f, 0.153778))
							{
								i = 0;
								J0x2FB:

								// End:0x33D [Loop If]
								if(__NFUN_169__(i, 3))
								{
									J0x307:

									Rotors[i].DesiredSymbol = __NFUN_187__(6);
									// End:0x307
									if(!(__NFUN_174__(Rotors[i].DesiredSymbol, 3)))
										goto J0x307;
									__NFUN_184__(i);
									// [Loop Continue]
									goto J0x2FB;
								}
								i = __NFUN_187__(3);
								Rotors[i].DesiredSymbol = 3;								
							}
							else
							{
								i = 0;
								J0x364:

								// End:0x3A6 [Loop If]
								if(__NFUN_169__(i, 3))
								{
									J0x370:

									Rotors[i].DesiredSymbol = __NFUN_187__(6);
									// End:0x370
									if(!(__NFUN_174__(Rotors[i].DesiredSymbol, 3)))
										goto J0x370;
									__NFUN_184__(i);
									// [Loop Continue]
									goto J0x364;
								}
								J0x3A6:

								doOver = false;
								J0x3AE:

								// End:0x402 [Loop If]
								if(__NFUN_150__(__NFUN_173__(Rotors[0].DesiredSymbol, Rotors[__NFUN_165__(__NFUN_187__(2), 1)].DesiredSymbol), __NFUN_173__(Rotors[0].DesiredSymbol, 3)))
								{
									Rotors[0].DesiredSymbol = __NFUN_187__(6);
									doOver = true;
									// [Loop Continue]
									goto J0x3AE;
								}
								i = __NFUN_187__(3);
								J0x40C:

								// End:0x443 [Loop If]
								if(__NFUN_169__(Rotors[i].DesiredSymbol, 4))
								{
									Rotors[i].DesiredSymbol = __NFUN_187__(6);
									doOver = true;
									// [Loop Continue]
									goto J0x40C;
								}
								// End:0x3A6
								if(!(__NFUN_145__(doOver)))
									goto J0x3A6;
							}
						}
					}
				}
			}
		}
	}
	return;
}

function TouchedPanel(int X, int Y)
{
	return;
}

function InitialiseRotors()
{
	local int i;
	local TexPanner Panner;

	i = 0;
	J0x07:

	// End:0x176 [Loop If]
	if(__NFUN_169__(i, 3))
	{
		Rotors[i].Panner = new (Level.XLevel) class'TexPanner';
		Rotors[i].Panner.PanRate = 0;
		Rotors[i].Panner.ShiftX = 0;
		Rotors[i].Panner.ShiftY = 0;
		Rotors[i].Panner.Material = __NFUN_740__(MyInfo.default.RotorSectionID[i]);
		__NFUN_741__(MyInfo.default.RotorSectionID[i], Rotors[i].Panner);
		Rotors[i].Velocity = 0;
		Rotors[i].DesiredSymbol = 0;
		RotorTextureV = Rotors[i].Panner.__NFUN_1192__();
		SetRotorV(i, __NFUN_162__(__NFUN_187__(MyInfo.default.RotorSymbols), __NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols)));
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	i = 0;
	J0x17D:

	// End:0x1ED [Loop If]
	if(__NFUN_169__(i, 8))
	{
		Panner = TexPanner(MyInfo.default.SymbolTextures[i]);
		// End:0x1E3
		if(__NFUN_340__(Panner, none))
		{
			Panner.ShiftY = float(__NFUN_162__(i, __NFUN_163__(RotorTextureV, MyInfo.default.RotorSymbols)));
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x17D;
	}
	return;
}

function int MapRotorSymbolToSymbolID(int RotorID, int RotorSymbol)
{
	local int SymbolID;

	switch(RotorID)
	{
		// End:0x2A
		case 0:
			SymbolID = MyInfo.default.Rotor1SymbolTable[RotorSymbol];
			// End:0x72
			break;
		// End:0x4C
		case 1:
			SymbolID = MyInfo.default.Rotor2SymbolTable[RotorSymbol];
			// End:0x72
			break;
		// End:0x6F
		case 2:
			SymbolID = MyInfo.default.Rotor3SymbolTable[RotorSymbol];
			// End:0x72
			break;
		// End:0xFFFF
		default:
			break;
	}
	return SymbolID;
	return;
}

function float GetRotorU(int RotorID)
{
	return Rotors[RotorID].Panner.ShiftX;
	return;
}

function float GetRotorV(int RotorID)
{
	return Rotors[RotorID].Panner.ShiftY;
	return;
}

function SetRotorV(int RotorID, int V)
{
	Rotors[RotorID].Panner.ShiftY = float(V);
	return;
}

function SetAllRotorsDest(int SymbolID)
{
	local int i;

	i = 0;
	J0x07:

	// End:0x33 [Loop If]
	if(__NFUN_169__(i, 3))
	{
		Rotors[i].DesiredSymbol = SymbolID;
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	return;
}

function StopPayoutSound()
{
	__NFUN_695__(1);
	return;
}

function Win(int amount)
{
	local Texture NewPayoutTexture;

	FindAndPlaySound('SlotMachine_Win', 1);
	__NFUN_605__(__NFUN_198__(__NFUN_198__(1, float(__NFUN_163__(amount, 100))), __NFUN_222__()), false, 'StopPayoutSound');
	// End:0x53
	if(__NFUN_340__(DukePlayer(LastUser), none))
	{
		DukePlayer(LastUser).GivePermanentEgoCapAward(2);
	}
	switch(amount)
	{
		// End:0x79
		case 1:
			NewPayoutTexture = MyInfo.default.PayoutTextures[0];
			// End:0x2D6
			break;
		// End:0x98
		case 2:
			NewPayoutTexture = MyInfo.default.PayoutTextures[1];
			// End:0x2D6
			break;
		// End:0xB8
		case 3:
			NewPayoutTexture = MyInfo.default.PayoutTextures[2];
			// End:0x2D6
			break;
		// End:0xD8
		case 5:
			NewPayoutTexture = MyInfo.default.PayoutTextures[3];
			// End:0x2D6
			break;
		// End:0xF8
		case 10:
			NewPayoutTexture = MyInfo.default.PayoutTextures[4];
			// End:0x2D6
			break;
		// End:0x118
		case 15:
			NewPayoutTexture = MyInfo.default.PayoutTextures[5];
			// End:0x2D6
			break;
		// End:0x138
		case 20:
			NewPayoutTexture = MyInfo.default.PayoutTextures[6];
			// End:0x2D6
			break;
		// End:0x158
		case 25:
			NewPayoutTexture = MyInfo.default.PayoutTextures[7];
			// End:0x2D6
			break;
		// End:0x178
		case 30:
			NewPayoutTexture = MyInfo.default.PayoutTextures[8];
			// End:0x2D6
			break;
		// End:0x198
		case 40:
			NewPayoutTexture = MyInfo.default.PayoutTextures[9];
			// End:0x2D6
			break;
		// End:0x1B8
		case 50:
			NewPayoutTexture = MyInfo.default.PayoutTextures[10];
			// End:0x2D6
			break;
		// End:0x1D8
		case 75:
			NewPayoutTexture = MyInfo.default.PayoutTextures[11];
			// End:0x2D6
			break;
		// End:0x1F8
		case 80:
			NewPayoutTexture = MyInfo.default.PayoutTextures[12];
			// End:0x2D6
			break;
		// End:0x218
		case 120:
			NewPayoutTexture = MyInfo.default.PayoutTextures[13];
			// End:0x2D6
			break;
		// End:0x238
		case 160:
			NewPayoutTexture = MyInfo.default.PayoutTextures[14];
			// End:0x2D6
			break;
		// End:0x258
		case 240:
			NewPayoutTexture = MyInfo.default.PayoutTextures[15];
			// End:0x2D6
			break;
		// End:0x279
		case 800:
			NewPayoutTexture = MyInfo.default.PayoutTextures[16];
			// End:0x2D6
			break;
		// End:0x29A
		case 1600:
			NewPayoutTexture = MyInfo.default.PayoutTextures[17];
			// End:0x2D6
			break;
		// End:0x2BB
		case 2400:
			NewPayoutTexture = MyInfo.default.PayoutTextures[18];
			// End:0x2D6
			break;
		// End:0xFFFF
		default:
			NewPayoutTexture = MyInfo.default.PayoutTextureNone;
			// End:0x2D6
			break;
			break;
	}
	__NFUN_741__(MyInfo.default.PayoutSectionID, NewPayoutTexture);
	BlinksRemaining = MyInfo.default.PayoutBlinks;
	BlinkTimeRemaining = 0.4;
	PreviousTexture = MyInfo.default.PayoutTextureBlank;
	return;
}

function DebugPrintSymbol(int iRotorID, int SymbolID)
{
	switch(SymbolID)
	{
		// End:0x27
		case 0:
			BroadcastLog(__NFUN_302__(string(iRotorID), " -- BAR"));
			// End:0xD4
			break;
		// End:0x4A
		case 1:
			BroadcastLog(__NFUN_302__(string(iRotorID), " -- BAR BAR"));
			// End:0xD4
			break;
		// End:0x6B
		case 2:
			BroadcastLog(__NFUN_302__(string(iRotorID), " -- BELL"));
			// End:0xD4
			break;
		// End:0x8E
		case 3:
			BroadcastLog(__NFUN_302__(string(iRotorID), " -- CHERRY"));
			// End:0xD4
			break;
		// End:0xB0
		case 4:
			BroadcastLog(__NFUN_302__(string(iRotorID), " -- SEVEN"));
			// End:0xD4
			break;
		// End:0xD1
		case 5:
			BroadcastLog(__NFUN_302__(string(iRotorID), " -- NUKE"));
			// End:0xD4
			break;
		// End:0xFFFF
		default:
			break;
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	local int i;

	super.RegisterPrecacheComponents(PrecacheIndex);
	i = 0;
	J0x12:

	// End:0x4A [Loop If]
	if(__NFUN_169__(i, 30))
	{
		PrecacheIndex.__NFUN_1270__(MyInfo.default.PayoutTextures[i]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x12;
	}
	PrecacheIndex.__NFUN_1270__(MyInfo.default.PayoutTextureNone);
	PrecacheIndex.__NFUN_1270__(MyInfo.default.PayoutTextureBlank);
	i = 0;
	J0x89:

	// End:0xC1 [Loop If]
	if(__NFUN_169__(i, 8))
	{
		PrecacheIndex.__NFUN_1269__(MyInfo.default.SymbolTextures[i]);
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x89;
	}
	PrecacheIndex.__NFUN_1277__(VoicePack, 'CoinOp_InsertCoin');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'SlotMachine_PullLever');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'SlotMachine_Spin');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'SlotMachine_WheelStop');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'SlotMachine_Win');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'BodyMotion_Short');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'CoinFlip');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'CoinNudge');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'CoinRoll');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'SlamMachine');
	PrecacheIndex.__NFUN_1277__(class'VoicePack_Duke', 'ST_Getup_StandShift');
	return;
}

state() PanelIdle
{
	function bool ControlEventInternal(optional int IntEvent, optional name CustomEventName)
	{
		super.ControlEventInternal(IntEvent, CustomEventName);
		// End:0x34
		if(__NFUN_148__(__NFUN_173__(IntEvent, int(14)), CanPressStartButton()))
		{
			ControlEvent(, 'BeginGame');
		}
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		super.UsableSomethingQueryInteractKeyInfoState(HUD);
		// End:0x2B
		if(CanPressStartButton())
		{
			SetHUDKeyInfoState(HUD, 1, true, 26,,, SpinText);
		}
		return;
	}
	stop;
}

state() PressStart
{
	function bool ControlEvent(optional dnGame.dnControl.EControlEvent ControlEvent, optional name CustomEventName)
	{
		global.ControlEvent(ControlEvent, CustomEventName);
		// End:0x24
		if(__NFUN_173__(int(ControlEvent), int(10)))
		{
			PressStartButton();
		}
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() InsertCoins
{
	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

defaultproperties
{
	MyInfo='dnGame.SlotMachineInfo'
	SpinText="<?int?dnDecorations.dnControl_CoinOp_SlotMachine.SpinText?>"
	DisplayX=-1
	DisplayY=-1
	CrosshairIndex=0
	States=/* Array type was not detected. */
}