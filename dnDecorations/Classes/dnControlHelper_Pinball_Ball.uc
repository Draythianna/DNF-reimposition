/*******************************************************************************
 * dnControlHelper_Pinball_Ball generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControlHelper_Pinball_Ball extends dnDecoration
	dependson(dnControl_Pinball);

var dnControl_Pinball OwnerMachine;
var float BouncerThrottle;
var float BouncerExpireTime;
var dnControlHelper_Pinball LastBouncer;

simulated event PostVerifySelf()
{
	local PhysicsAction_Acceleration PA_Accel;
	local PhysicsAction_VelocityClamp PA_VClamp;

	super.PostVerifySelf();
	OwnerMachine = dnControl_Pinball(Owner);
	PA_Accel = PhysicsAction_Acceleration(__NFUN_824__(class'PhysicsAction_Acceleration', true));
	// End:0x6B
	if(__NFUN_148__(__NFUN_340__(PA_Accel, none), __NFUN_340__(OwnerMachine, none)))
	{
		PA_Accel.Setup(__NFUN_235__(6, Vector(OwnerMachine.Rotation)));
	}
	PA_VClamp = PhysicsAction_VelocityClamp(__NFUN_824__(class'PhysicsAction_VelocityClamp', true));
	// End:0xAC
	if(__NFUN_340__(PA_VClamp, none))
	{
		PA_VClamp.Setup(__NFUN_232__(600, 600, 0));
	}
	return;
}

event PostPhysMeqon(float DeltaTime)
{
	local Vector OffsetFromMachine, ClampedOffsetFromMachine;

	super(KarmaActor).PostPhysMeqon(DeltaTime);
	// End:0xF3
	if(__NFUN_340__(OwnerMachine, none))
	{
		OffsetFromMachine = __NFUN_240__(__NFUN_239__(Location, OwnerMachine.Location), OwnerMachine.Rotation);
		ClampedOffsetFromMachine.X = __NFUN_227__(OffsetFromMachine.X, -39, 52);
		ClampedOffsetFromMachine.Y = __NFUN_227__(OffsetFromMachine.Y, -23, 23);
		ClampedOffsetFromMachine.Z = __NFUN_227__(OffsetFromMachine.Z, 7, 8);
		// End:0xF3
		if(__NFUN_243__(OffsetFromMachine, ClampedOffsetFromMachine))
		{
			__NFUN_800__();
			__NFUN_642__(0);
			__NFUN_645__(__NFUN_238__(OwnerMachine.Location, __NFUN_263__(ClampedOffsetFromMachine, OwnerMachine.Rotation)));
			__NFUN_642__(18);
			__NFUN_801__(true, false);
		}
	}
	return;
}

final simulated function bool WillAcceptBounceFrom(dnControlHelper_Pinball Bouncer)
{
	// End:0x2D
	if(__NFUN_148__(__NFUN_339__(LastBouncer, Bouncer), __NFUN_201__(BouncerExpireTime, Level.GameTimeSeconds)))
	{
		return false;
	}
	return true;
	return;
}

final simulated function Bounce(dnControlHelper_Pinball Bouncer, Vector BounceVelocity)
{
	// End:0x12
	if(__NFUN_145__(WillAcceptBounceFrom(Bouncer)))
	{
		return;
	}
	LastBouncer = Bouncer;
	BouncerExpireTime = __NFUN_198__(Level.GameTimeSeconds, BouncerThrottle);
	__NFUN_790__(BounceVelocity, 1);
	return;
}

event KImpact(name SelfBoneName, KarmaActor Other, name OtherBoneName, Vector Position, Vector ImpactVelocity, Vector ImpactNormal)
{
	super.KImpact(SelfBoneName, Other, OtherBoneName, Position, ImpactVelocity, ImpactNormal);
	FindAndPlaySound('Pinball_BallBounce');
	return;
}

final simulated function LaunchDesiredLocationComplete()
{
	__NFUN_642__(18);
	__NFUN_790__(__NFUN_263__(__NFUN_232__(__NFUN_194__(OwnerMachine.BallLaunchVelocity), 0, 0), OwnerMachine.Rotation), 1);
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Pinball_BallBounce');
	return;
}

defaultproperties
{
	BouncerThrottle=0.1
	HealthPrefab=0
	bStartEnabled=true
	bIgnoresPhysicsDamage=true
	ImpactSoundRadius=384
	ImpactSoundInnerRadius=128
	PhysicsMaterial='dnMaterial.dnPhysicsMaterial_Pinball'
	KRestitution=0.6
	GravityScale=0
	EnableDisableThreshold=0
	DamageScaler=0
	PhysicsSoundOverrides=/* Array type was not detected. */
	OtherMaterialTypes=/* Array type was not detected. */
}