/*******************************************************************************
 * Electronics_Generic_Microwave generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Electronics_Generic_Microwave extends Electronics_Generic
	collapsecategories;

var DecoGlass_Microwave GlassActor;
var InteractiveActor NukingActor;
var bool bNuking;
var Electronics_Generic_Microwave_Light Light;
var localized string OpenUsePhrase;
var localized string CloseUsePhrase;
var localized string PutInMicrowaveUsePhrase;
var localized string MicrowaveUsePhrase;
var localized string MicrowavingUsePhrase;
var localized string TakeUsePhrase;
var localized string EatUsePhrase;

event PreGameInit()
{
	super(dnDecoration).PreGameInit();
	BeginState();
	return;
}

function PostVerifySelf()
{
	super(dnDecoration).PostVerifySelf();
	GlassActor = DecoGlass_Microwave(FindMountedActor('Glass'));
	// End:0x39
	if(__NFUN_340__(GlassActor, none))
	{
		GlassActor.MicrowaveActor = self;
	}
	Light = Electronics_Generic_Microwave_Light(FindMountedActor('Electronics_Generic_Microwave_Light'));
	// End:0x6D
	if(__NFUN_340__(Light, none))
	{
		Light.LightStyle = 0;
	}
	__NFUN_397__('ClosedState');
	return;
}

function ForcePowerOff()
{
	super.ForcePowerOff();
	// End:0x24
	if(__NFUN_340__(Light, none))
	{
		Light.LightStyle = 0;
	}
	return;
}

function ForcePowerOn()
{
	super.ForcePowerOn();
	// End:0x24
	if(__NFUN_340__(Light, none))
	{
		Light.LightStyle = 1;
	}
	return;
}

final function UpdateUseInfo(string NewUsePhrase, bool NewbUsable, optional bool NewbNoUseKeyInfo)
{
	bUsable = NewbUsable;
	bNoUseKeyInfo = NewbNoUseKeyInfo;
	UsePhrase = NewUsePhrase;
	return;
}

final function GlassDamaged()
{
	CriticalDamage();
	return;
}

function RemoveItemFromTray(Pawn Grabber)
{
	// End:0x23
	if(__NFUN_150__(__NFUN_339__(Grabber, none), Grabber.CarryingAnActor()))
	{
		return;
	}
	// End:0x4A
	if(__NFUN_340__(NukingActor, none))
	{
		Grabber.Grab(NukingActor);
		ClearNukingActor();
	}
	return;
}

function ClearNukingActor()
{
	NukingActor = none;
	return;
}

function Destroyed()
{
	super(dnDecoration).Destroyed();
	// End:0x43
	if(__NFUN_340__(GlassActor, none))
	{
		GlassActor.CrackSelf();
		GlassActor.__NFUN_1086__();
		GlassActor.__NFUN_631__();
		GlassActor = none;
	}
	// End:0x63
	if(__NFUN_340__(Light, none))
	{
		Light.__NFUN_614__();
		Light = none;
	}
	// End:0x7F
	if(__NFUN_340__(NukingActor, none))
	{
		NukingActor.InterruptMicrowaving();
	}
	// End:0x96
	if(__NFUN_339__(NukingActor, none))
	{
		__NFUN_397__('DisabledState_Empty');		
	}
	else
	{
		__NFUN_397__('DisabledState_Full');
	}
	return;
}

simulated function bool CanGrabUseCombine(InteractiveActor Combinee)
{
	return __NFUN_148__(__NFUN_148__(__NFUN_148__(bUsable, __NFUN_339__(NukingActor, none)), __NFUN_340__(Combinee, none)), Combinee.CanMicrowave());
	return;
}

simulated event string GetGrabUseCombinePhrase(InteractiveActor Combinee, string SpecialKey)
{
	// End:0x12
	if(__NFUN_340__(Combinee, none))
	{
		return PutInMicrowaveUsePhrase;
	}
	return super(InteractiveActor).GetGrabUseCombinePhrase(Combinee, SpecialKey);
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1281__('HandQuickAction_SlapWallBoobs_Left');
	return;
}

state ClosedState
{
	function BeginState()
	{
		TickStyle = default.TickStyle;
		// End:0x3B
		if(__NFUN_148__(__NFUN_340__(NukingActor, none), NukingActor.CanMicrowave()))
		{
			UpdateUseInfo(MicrowaveUsePhrase, true);			
		}
		else
		{
			UpdateUseInfo(OpenUsePhrase, true);
		}
		return;
	}

	simulated function bool CanGrabUseCombine(InteractiveActor Combinee)
	{
		return false;
		return;
	}

	event Used(Actor Other, Pawn EventInstigator)
	{
		global.Used(Other, EventInstigator);
		// End:0x2E
		if(__NFUN_340__(Light, none))
		{
			Light.LightStyle = 1;
		}
		// End:0x5A
		if(__NFUN_148__(__NFUN_340__(NukingActor, none), NukingActor.CanMicrowave()))
		{
			__NFUN_397__('NukingState');			
		}
		else
		{
			DecoActivity(0, 'OpenDoor');
		}
		return;
	}

	event AnimEndActivity(int Channel, name AnimName)
	{
		global.AnimEndActivity(Channel, AnimName);
		// End:0x27
		if(__NFUN_340__(NukingActor, none))
		{
			__NFUN_397__('OpenedState_Full');			
		}
		else
		{
			__NFUN_397__('OpenedState_Empty');
		}
		return;
	}
	stop;
}

state OpenedState_Empty
{
	function BeginState()
	{
		TickStyle = default.TickStyle;
		UpdateUseInfo(CloseUsePhrase, true);
		return;
	}

	event Used(Actor Other, Pawn EventInstigator)
	{
		global.Used(Other, EventInstigator);
		PlaceItemOnTray(EventInstigator);
		return;
	}

	simulated function bool ShouldDrawHUDInfoUsePhrase(Pawn TestPawn)
	{
		// End:0x2F
		if(__NFUN_148__(TestPawn.CarryingAnActor(), CanGrabUseCombine(TestPawn.CarriedActor)))
		{
			return false;
		}
		return global.ShouldDrawHUDInfoUsePhrase(TestPawn);
		return;
	}

	final function PlaceItemOnTray(Pawn Nuker)
	{
		// End:0x55
		if(__NFUN_148__(__NFUN_148__(__NFUN_340__(Nuker, none), Nuker.CarryingAnActor()), Nuker.CarriedActor.CanMicrowave()))
		{
			NukingActor = Nuker.CarriedActor;
		}
		// End:0x13B
		if(__NFUN_340__(NukingActor, none))
		{
			Nuker.DropCarriedActor(, true,,, true);
			NukingActor.StoreCollision();
			NukingActor.__NFUN_621__(false, false, false, false, false);
			NukingActor.__NFUN_642__(0);
			NukingActor.MountType = 2;
			NukingActor.MountMeshItem = 'Tray';
			NukingActor.MountOrigin = __NFUN_232__(0, 0, NukingActor.CollisionHeight);
			NukingActor.MountAngles = __NFUN_265__(0, 0, 0);
			NukingActor.__NFUN_635__(self);
			NukingActor.PlacedInMicrowave(self);
			DecoActivity(0, 'PlaceItem');
		}
		// End:0x16C
		if(__NFUN_339__(NukingActor, none))
		{
			Nuker.HandQuickAction('HandQuickAction_SlapWallBoobs_Left');
			DecoActivity(0, 'CloseDoor');			
		}
		else
		{
			__NFUN_397__('OpenedState_Full');
		}
		return;
	}

	event AnimEndActivity(int Channel, name AnimName)
	{
		global.AnimEndActivity(Channel, AnimName);
		// End:0x40
		if(__NFUN_148__(__NFUN_341__(AnimName, 'Close'), __NFUN_340__(Light, none)))
		{
			Light.LightStyle = 0;
		}
		__NFUN_397__('ClosedState');
		return;
	}
	stop;
}

state OpenedState_Full
{
	function BeginState()
	{
		TickStyle = default.TickStyle;
		// End:0x2D
		if(NukingActor.CanMicrowave())
		{
			UpdateUseInfo(CloseUsePhrase, true);			
		}
		else
		{
			// End:0x67
			if(__NFUN_148__(__NFUN_340__(Snack_Popcorn(NukingActor), none), Snack_Popcorn(NukingActor).bQuestItemHack))
			{
				UpdateUseInfo(TakeUsePhrase, true);				
			}
			else
			{
				UpdateUseInfo(EatUsePhrase, true);
			}
		}
		return;
	}

	simulated function bool CanGrabUseCombine(InteractiveActor Combinee)
	{
		return false;
		return;
	}

	simulated function bool CanBeUsedBy(Pawn User)
	{
		// End:0x23
		if(__NFUN_148__(__NFUN_340__(NukingActor, none), User.CarryingAnActor()))
		{
			return false;
		}
		return global.CanBeUsedBy(User);
		return;
	}

	event Used(Actor Other, Pawn EventInstigator)
	{
		global.Used(Other, EventInstigator);
		// End:0x48
		if(NukingActor.CanMicrowave())
		{
			EventInstigator.HandQuickAction('HandQuickAction_SlapWallBoobs_Left');
			DecoActivity(0, 'CloseDoor');			
		}
		else
		{
			RemoveItemFromTray(EventInstigator);
			__NFUN_397__('OpenedState_Empty');
		}
		return;
	}

	event AnimEndActivity(int Channel, name AnimName)
	{
		global.AnimEndActivity(Channel, AnimName);
		// End:0x40
		if(__NFUN_148__(__NFUN_341__(AnimName, 'Close'), __NFUN_340__(Light, none)))
		{
			Light.LightStyle = 0;
		}
		__NFUN_397__('ClosedState');
		return;
	}
	stop;
}

state NukingState
{
	function BeginState()
	{
		bNuking = true;
		TickStyle = 3;
		UpdateUseInfo(MicrowavingUsePhrase, false, true);
		return;
	}

	final function ExecuteFinishedNuking()
	{
		// End:0x38
		if(__NFUN_340__(DukePlayer(Level.__NFUN_1161__()), none))
		{
			DukePlayer(Level.__NFUN_1161__()).GivePermanentEgoCapAward(22);
		}
		// End:0x54
		if(__NFUN_340__(NukingActor, none))
		{
			NukingActor.StopMicrowaving();
		}
		__NFUN_397__('ClosedState');
		return;
	}

	event AnimEndActivity(int Channel, name AnimName)
	{
		local bool bNukeComplete;

		// End:0x20
		if(__NFUN_145__(bNuking))
		{
			DecoActivity(0, 'StopNuking');
			__NFUN_397__('ClosedState');
		}
		global.AnimEndActivity(Channel, AnimName);
		return;
	}

	function ForcePowerOff()
	{
		global.ForcePowerOff();
		return;
	}

	function ForcePowerOn()
	{
		global.ForcePowerOn();
		return;
	}
Begin:

	DecoActivity(0, 'StartNuking');
	__NFUN_610__(0.5);
	DecoActivity(0, 'StartSpinning');
	__NFUN_610__(NukingActor.StartMicrowaving(self));
	bNuking = false;
	stop;	
}

state DisabledState_Empty
{
	function BeginState()
	{
		TickStyle = default.TickStyle;
		bUsable = false;
		bDrawUsePhrase = false;
		// End:0x39
		if(__NFUN_340__(Light, none))
		{
			Light.LightStyle = 0;
		}
		return;
	}
	stop;
}

state DisabledState_Full
{
	function BeginState()
	{
		TickStyle = default.TickStyle;
		UpdateUseInfo(TakeUsePhrase, true);
		// End:0x35
		if(__NFUN_340__(Light, none))
		{
			Light.LightStyle = 0;
		}
		return;
	}

	simulated function bool CanBeUsedBy(Pawn User)
	{
		// End:0x23
		if(__NFUN_148__(__NFUN_340__(NukingActor, none), User.CarryingAnActor()))
		{
			return false;
		}
		return global.CanBeUsedBy(User);
		return;
	}

	event Used(Actor Other, Pawn EventInstigator)
	{
		global.Used(Other, EventInstigator);
		RemoveItemFromTray(EventInstigator);
		__NFUN_397__('DisabledState_Empty');
		return;
	}
	stop;
}

defaultproperties
{
	OpenUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.OpenUsePhrase?>"
	CloseUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.CloseUsePhrase?>"
	PutInMicrowaveUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.PutInMicrowaveUsePhrase?>"
	MicrowaveUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.MicrowaveUsePhrase?>"
	MicrowavingUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.MicrowavingUsePhrase?>"
	TakeUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.TakeUsePhrase?>"
	EatUsePhrase="<?int?dnDecorations.Electronics_Generic_Microwave.EatUsePhrase?>"
}