/*******************************************************************************
 * dnControl_Whiteboard generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_Whiteboard extends dnControl_DrawableSurface
	collapsecategories;

const NUM_DRAWING_TOOLS = 5;
const ERASER_INDEX = 5;

var() noexport float HorizontalRate "Rate in units per second that user can move left and right.";
var() noexport float MaxHorizontal "Max distance player can move horizontally.. length of the drawing surface.";
var() noexport int BaseXOffset "X Offset when user is entirely to the right of the board.";
var() noexport float XOffsetScalar "Value is multiplied by CurrentHorizontalVal/MaxHorizontal and then added to BaseXOffset to determine XDrawOffset.";
var() noexport float AmbientDuration "Amount of time to wait before turning off the ambient drawing sound.";
var() noexport float PreDetachDuration "Amount of time it takes to 're-center' before detaching.";
var() noexport array<MaterialEx> DrawingToolMaterials "Materials to apply to the drawing tools.. order matters!.";
var array<dnControlHelper_DrawingTool_Whiteboard> DrawingTools;
var bool bQuickEraser;
var float CurrentHorizontalVal;
var float AmbientEndTime;
var int LastTool;
var float PreDetachStartTime;
var float PreDetachInputX;
var float PreDetachInputY;
var float PreDetachHoriz;
var float PreDetachVert;
var() Texture MyCopySource;
var float BoneAlpha;
var float BoneXAlpha;
var float ThisXAdjust;
var float ThisYAdjust;
var bool bAchievementAlreadyUnlocked;

function PostBeginPlay()
{
	local int i;

	string(DrawingTools) = 5;
	DrawingTools[0] = dnControlHelper_DrawingTool_Whiteboard(FindMountedActor('BLACK_PEN'));
	DrawingTools[1] = dnControlHelper_DrawingTool_Whiteboard(FindMountedActor('RED_PEN'));
	DrawingTools[2] = dnControlHelper_DrawingTool_Whiteboard(FindMountedActor('BLUE_PEN'));
	DrawingTools[3] = dnControlHelper_DrawingTool_Whiteboard(FindMountedActor('GREEN_PEN'));
	DrawingTools[4] = dnControlHelper_DrawingTool_Whiteboard(FindMountedActor('YELLOW_PEN'));
	DrawingTools[5] = dnControlHelper_DrawingTool_Whiteboard(FindMountedActor('WHITE_ERASER'));
	DrawingTools[5].CopySource = MyCopySource;
	i = 0;
	J0xBC:

	// End:0x1F6 [Loop If]
	if(__NFUN_169__(i, string(DrawingTools)))
	{
		DrawingTools[i].bGrabbable = false;
		DrawingTools[i].bCanExistOutOfWorld = true;
		DrawingTools[i].__NFUN_621__(false, false, false, false, false);
		DrawingTools[i].OldMount.bSurviveDismount = true;
		DrawingTools[i].OldMount.MountOrigin = DrawingTools[i].MountOrigin;
		DrawingTools[i].OldMount.MountAngles = DrawingTools[i].MountAngles;
		// End:0x1D4
		if(__NFUN_148__(__NFUN_169__(i, string(DrawingToolMaterials)), __NFUN_340__(DrawingToolMaterials[i], none)))
		{
			DrawingTools[i].__NFUN_741__(0, DrawingToolMaterials[i]);
		}
		DrawingTools[i].TickStyle = 0;
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0xBC;
	}
	super(dnUsableSomething).PostBeginPlay();
	XDrawOffset = __NFUN_198__(float(BaseXOffset), __NFUN_195__(XOffsetScalar, __NFUN_196__(CurrentHorizontalVal, MaxHorizontal)));
	return;
}

simulated event Actor GetIKActor(name LimbID)
{
	return User;
	return;
}

simulated event PostUserAnimTick()
{
	local Vector BonePos, DesiredBonePos;
	local Rotator BoneRot, DesiredBoneRot;

	super(Decoration).PostUserAnimTick();
	// End:0x176
	if(__NFUN_145__(Level.bPaused))
	{
		// End:0x108
		if(__NFUN_148__(__NFUN_340__(User.__NFUN_568__(), none), __NFUN_150__(__NFUN_341__(__NFUN_399__(), 'DrawableSurfaceIdle'), __NFUN_341__(__NFUN_399__(), 'Drawing'))))
		{
			__NFUN_209__(BoneAlpha, __NFUN_195__(4, Level.TimeDeltaSeconds));
			// End:0x86
			if(__NFUN_201__(BoneAlpha, 1))
			{
				BoneAlpha = 1;
			}
			// End:0xCE
			if(__NFUN_341__(__NFUN_399__(), 'Drawing'))
			{
				__NFUN_209__(BoneXAlpha, __NFUN_195__(8, Level.TimeDeltaSeconds));
				// End:0xCB
				if(__NFUN_201__(BoneXAlpha, 1))
				{
					BoneXAlpha = 1;
				}				
			}
			else
			{
				__NFUN_210__(BoneXAlpha, __NFUN_195__(8, Level.TimeDeltaSeconds));
				// End:0x105
				if(__NFUN_200__(BoneXAlpha, 0))
				{
					BoneXAlpha = 0;
				}
			}			
		}
		else
		{
			__NFUN_210__(BoneAlpha, __NFUN_195__(4, Level.TimeDeltaSeconds));
			// End:0x13F
			if(__NFUN_200__(BoneAlpha, 0))
			{
				BoneAlpha = 0;
			}
			__NFUN_210__(BoneXAlpha, __NFUN_195__(8, Level.TimeDeltaSeconds));
			// End:0x176
			if(__NFUN_200__(BoneXAlpha, 0))
			{
				BoneXAlpha = 0;
			}
		}
	}
	// End:0x3ED
	if(__NFUN_201__(BoneAlpha, 0))
	{
		BonePos = User.MeshInstance.__NFUN_533__('mount_holster_hip_right', true);
		BoneRot = User.MeshInstance.__NFUN_534__('mount_holster_hip_right', true);
		DesiredBonePos.X = __NFUN_228__(BoneXAlpha, DrawingTools[CurrentColor].BoneXRange.Min, DrawingTools[CurrentColor].BoneXRange.Max);
		DesiredBonePos.Y = __NFUN_228__(__NFUN_195__(0.5, __NFUN_198__(MouseInputX, 1)), DrawingTools[CurrentColor].BoneYRange.Min, DrawingTools[CurrentColor].BoneYRange.Max);
		DesiredBonePos.Z = __NFUN_228__(__NFUN_195__(0.5, __NFUN_198__(MouseInputY, 1)), DrawingTools[CurrentColor].BoneZRange.Min, DrawingTools[CurrentColor].BoneZRange.Max);
		__NFUN_246__(DesiredBonePos, User.DrawScale);
		DesiredBonePos = __NFUN_238__(User.Location, __NFUN_263__(DesiredBonePos, User.Rotation));
		DesiredBoneRot = __NFUN_269__(DrawingTools[CurrentColor].BoneRot, User.Rotation);
		BonePos.X = __NFUN_229__(BoneAlpha, BonePos.X, DesiredBonePos.X);
		BonePos.Y = __NFUN_229__(BoneAlpha, BonePos.Y, DesiredBonePos.Y);
		BonePos.Z = __NFUN_229__(BoneAlpha, BonePos.Z, DesiredBonePos.Z);
		User.MeshInstance.__NFUN_537__('mount_holster_hip_right', BonePos, true);
		User.MeshInstance.__NFUN_538__('mount_holster_hip_right', __NFUN_287__(BoneAlpha, BoneRot, DesiredBoneRot), true);
	}
	return;
}

function ChangeTool()
{
	local int MaxIndex;

	__NFUN_184__(CurrentColor);
	// End:0x1F
	if(bQuickEraser)
	{
		MaxIndex = string(DrawingTools);		
	}
	else
	{
		MaxIndex = 5;
	}
	// End:0x4A
	if(__NFUN_150__(__NFUN_172__(CurrentColor, MaxIndex), __NFUN_169__(CurrentColor, 0)))
	{
		CurrentColor = 0;
	}
	DrawingTool = DrawingTools[CurrentColor];
	HUDHelpEntries[0].HelpText = DrawingTools[CurrentColor].HelpTextMessage;
	HUDHelpEntries[2].HelpText = DrawingTools[CurrentColor].HelpTextMessage2;
	User.RefreshHelpText(self);
	return;
}

simulated function InputHook_ViewRotationAdjust_NoteAdjustment(float XAdjust, float YAdjust)
{
	super(dnUsableSomething).InputHook_ViewRotationAdjust_NoteAdjustment(XAdjust, YAdjust);
	ThisXAdjust = XAdjust;
	ThisYAdjust = YAdjust;
	return;
}

function InputHook(out float aForward, out float aLookUp, out float aTurn, out float aStrafe, optional float DeltaTime)
{
	local float newForward, newStrafe;

	super(Actor).InputHook(aForward, aLookUp, aTurn, aStrafe, DeltaTime);
	// End:0x3D
	if(__NFUN_150__(__NFUN_339__(User, none), __NFUN_341__(__NFUN_399__(), 'PreDetach')))
	{
		return;
	}
	// End:0xC1
	if(__NFUN_204__(aStrafe, 0))
	{
		// End:0x88
		if(__NFUN_148__(__NFUN_203__(MouseInputX, 0.95), __NFUN_201__(ThisXAdjust, 0)))
		{
			newStrafe = __NFUN_195__(__NFUN_199__(MouseInputX, 0.95), 80000);			
		}
		else
		{
			// End:0xC1
			if(__NFUN_148__(__NFUN_202__(MouseInputX, -0.95), __NFUN_200__(ThisXAdjust, 0)))
			{
				newStrafe = __NFUN_195__(__NFUN_198__(MouseInputX, 0.95), 80000);
			}
		}
	}
	// End:0x145
	if(__NFUN_204__(aForward, 0))
	{
		// End:0x10C
		if(__NFUN_148__(__NFUN_203__(MouseInputY, 0.95), __NFUN_201__(ThisYAdjust, 0)))
		{
			newForward = __NFUN_195__(__NFUN_199__(MouseInputY, 0.95), 45000);			
		}
		else
		{
			// End:0x145
			if(__NFUN_148__(__NFUN_202__(MouseInputY, -0.95), __NFUN_200__(ThisYAdjust, 0)))
			{
				newForward = __NFUN_195__(__NFUN_198__(MouseInputY, 0.95), 45000);
			}
		}
	}
	MoveUser(newForward, newStrafe, DeltaTime);
	return;
}

function MoveUser(float aForward, float aStrafe, float DeltaTime)
{
	local float HorizontalIncremental;
	local Vector vRight;

	HorizontalIncremental = __NFUN_195__(__NFUN_195__(DeltaTime, HorizontalRate), aStrafe);
	__NFUN_209__(CurrentHorizontalVal, HorizontalIncremental);
	// End:0x55
	if(__NFUN_201__(CurrentHorizontalVal, MaxHorizontal))
	{
		__NFUN_210__(HorizontalIncremental, __NFUN_199__(CurrentHorizontalVal, MaxHorizontal));
		CurrentHorizontalVal = MaxHorizontal;		
	}
	else
	{
		// End:0x78
		if(__NFUN_200__(CurrentHorizontalVal, float(0)))
		{
			__NFUN_210__(HorizontalIncremental, CurrentHorizontalVal);
			CurrentHorizontalVal = 0;
		}
	}
	vRight = Vector(__NFUN_275__(User.Rotation, __NFUN_265__(0, 16384, 0)));
	InternalControlRemapper.__NFUN_644__(__NFUN_234__(vRight, HorizontalIncremental));
	XDrawOffset = __NFUN_198__(float(BaseXOffset), __NFUN_195__(XOffsetScalar, __NFUN_196__(CurrentHorizontalVal, MaxHorizontal)));
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	local int i;

	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1270__(MyCopySource);
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Whiteboard_Eraser_Touch');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Whiteboard_Eraser_Move');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Whiteboard_Marker_Touch');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Whiteboard_Marker_Move');
	i = __NFUN_166__(string(DrawingToolMaterials), 1);
	J0x88:

	// End:0xB5 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		PrecacheIndex.__NFUN_1269__(DrawingToolMaterials[i]);
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x88;
	}
	return;
}

state() DrawableSurfaceIdle
{
	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		// End:0x41
		if(__NFUN_148__(__NFUN_340__(PlayerUser, none), PlayerUser.__NFUN_994__()))
		{
			SetHUDKeyInfoState(HUD, 2, true, 27);
			SetHUDKeyInfoState(HUD, 3, true, 26);			
		}
		else
		{
			SetHUDKeyInfoState(HUD, 2, true, 26);
			SetHUDKeyInfoState(HUD, 3, true, 27);
		}
		SetHUDKeyInfoState(HUD, 1, true, 13);
		return;
	}

	function BeginState()
	{
		AimGridName = DrawingTools[CurrentColor].IdleAnimName;
		States[CurrentStateIndex].UserAnimName = AimGridName;
		super.BeginState();
		return;
	}
	stop;
}

state() PutDownTool extends DrawableSurfaceBaseState
{
	function BeginState()
	{
		super(Object).BeginState();
		AimGridName = DrawingTools[CurrentColor].ToolDownAnim;
		States[CurrentStateIndex].UserAnimName = AimGridName;
		return;
	}

	function EndState()
	{
		DrawingTools[CurrentColor].__NFUN_631__();
		DrawingTools[CurrentColor].__NFUN_633__(DrawingTools[CurrentColor].OldMount, self);
		// End:0x76
		if(__NFUN_148__(__NFUN_148__(__NFUN_173__(CurrentColor, 5), bQuickEraser), __NFUN_342__(__NFUN_399__(), 'PutDownTool_QuickEraser')))
		{
			CurrentColor = LastTool;
			bQuickEraser = false;
		}
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() PutDownTool_QuickEraser extends PutDownTool
{
	function EndState()
	{
		super.EndState();
		// End:0x32
		if(__NFUN_145__(bQuickEraser))
		{
			bQuickEraser = true;
			LastTool = CurrentColor;
			CurrentColor = __NFUN_166__(5, 1);			
		}
		else
		{
			bQuickEraser = false;
			// End:0x53
			if(__NFUN_173__(LastTool, 0))
			{
				CurrentColor = __NFUN_166__(5, 1);				
			}
			else
			{
				CurrentColor = __NFUN_166__(LastTool, 1);
			}
		}
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state() BringUpTool extends DrawableSurfaceBaseState
{
	function BeginState()
	{
		ChangeTool();
		AimGridName = DrawingTools[CurrentColor].ToolUpAnim;
		States[CurrentStateIndex].UserAnimName = AimGridName;
		DrawingTools[CurrentColor].__NFUN_631__();
		DrawingTools[CurrentColor].__NFUN_633__(DrawingTools[CurrentColor].DrawingMountInfo, User);
		super(Object).BeginState();
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		// End:0x41
		if(__NFUN_148__(__NFUN_340__(PlayerUser, none), PlayerUser.__NFUN_994__()))
		{
			SetHUDKeyInfoState(HUD, 2, true, 27);
			SetHUDKeyInfoState(HUD, 3, true, 26);			
		}
		else
		{
			SetHUDKeyInfoState(HUD, 2, true, 26);
			SetHUDKeyInfoState(HUD, 3, true, 27);
		}
		SetHUDKeyInfoState(HUD, 1, true, 13);
		return;
	}
	stop;
}

state() PreDetach
{
	event BeginState()
	{
		PreDetachInputX = MouseInputX;
		PreDetachInputY = MouseInputY;
		PreDetachHoriz = CurrentHorizontalVal;
		PreDetachStartTime = Level.GameTimeSeconds;
		return;
	}

	event Tick(float DeltaTime)
	{
		local float Alpha, LastHoriz, HorizDist;
		local Vector vRight;

		global.Tick(DeltaTime);
		// End:0x25
		if(__NFUN_145__(bUseHomePose))
		{
			ControlEvent(0, 'PreDetachComplete');
			return;
		}
		Alpha = __NFUN_196__(__NFUN_199__(Level.GameTimeSeconds, PreDetachStartTime), PreDetachDuration);
		// End:0x62
		if(__NFUN_201__(Alpha, 1))
		{
			Alpha = 1;
		}
		MouseInputX = __NFUN_229__(Alpha, PreDetachInputX, 0);
		MouseInputY = __NFUN_229__(Alpha, PreDetachInputY, 0);
		User.AnimationController.SetAnimGridState(AimGridName, MouseInputX, MouseInputY);
		LastHoriz = CurrentHorizontalVal;
		CurrentHorizontalVal = __NFUN_229__(Alpha, PreDetachHoriz, default.CurrentHorizontalVal);
		HorizDist = __NFUN_199__(CurrentHorizontalVal, LastHoriz);
		vRight = Vector(__NFUN_275__(User.Rotation, __NFUN_265__(0, 16384, 0)));
		User.__NFUN_644__(__NFUN_234__(vRight, HorizDist));
		// End:0x143
		if(__NFUN_204__(Alpha, 1))
		{
			ControlEvent(0, 'PreDetachComplete');
		}
		return;
	}
	stop;
}

state() DetachUser
{
	function BeginState()
	{
		AimGridName = DrawingTools[CurrentColor].DeactivateAnimName;
		States[CurrentStateIndex].UserAnimName = AimGridName;
		super(Object).BeginState();
		MyCopySource.__NFUN_1197__();
		return;
	}

	function EndState()
	{
		super(Object).EndState();
		DrawingTools[CurrentColor].__NFUN_631__();
		DrawingTools[CurrentColor].__NFUN_633__(DrawingTools[CurrentColor].OldMount, self);
		CurrentHorizontalVal = default.CurrentHorizontalVal;
		bQuickEraser = false;
		// End:0x6B
		if(__NFUN_173__(CurrentColor, 5))
		{
			CurrentColor = 0;			
		}
		else
		{
			__NFUN_185__(CurrentColor);
			// End:0x88
			if(__NFUN_169__(CurrentColor, 0))
			{
				CurrentColor = __NFUN_166__(5, 1);
			}
		}
		return;
	}
	stop;
}

state Drawing
{
	event Tick(float DeltaTime)
	{
		local int XDrawPos, YDrawPos;
		local float Helper;
		local int NewPitch;

		// End:0x35
		if(bPenJustTouchedPaper)
		{
			// End:0x25
			if(__NFUN_173__(CurrentColor, 5))
			{
				FindAndPlaySound('Whiteboard_Eraser_Touch', 3);				
			}
			else
			{
				FindAndPlaySound('Whiteboard_Marker_Touch', 3);
			}			
		}
		else
		{
			// End:0x80
			if(__NFUN_148__(__NFUN_148__(__NFUN_145__(bAchievementAlreadyUnlocked), __NFUN_174__(CurrentColor, 5)), __NFUN_340__(DukePlayer(User), none)))
			{
				DukePlayer(User).AwardAchievement(28);
				bAchievementAlreadyUnlocked = true;
			}
			XDrawPos = int(__NFUN_198__(float(int(__NFUN_195__(XDrawRatio, __NFUN_195__(float(DrawCanvas.USize), __NFUN_199__(1, __NFUN_196__(__NFUN_198__(__NFUN_194__(MouseInputX), 1), 2)))))), XDrawOffset));
			YDrawPos = int(__NFUN_198__(float(int(__NFUN_195__(YDrawRatio, __NFUN_195__(float(DrawCanvas.VSize), __NFUN_199__(1, __NFUN_196__(__NFUN_198__(MouseInputY, 1), 2)))))), YDrawOffset));
			// End:0x20F
			if(__NFUN_150__(__NFUN_174__(XDrawPos, PreviousXDrawPos), __NFUN_174__(YDrawPos, PreviousYDrawPos)))
			{
				// End:0x173
				if(__NFUN_339__(DrawingTool.AmbientSound, none))
				{
					// End:0x160
					if(__NFUN_173__(CurrentColor, 5))
					{
						FindAndPlaySound('Whiteboard_Eraser_Move',,,, DrawingTool);						
					}
					else
					{
						FindAndPlaySound('Whiteboard_Marker_Move',,,, DrawingTool);
					}
				}
				Helper = __NFUN_198__(__NFUN_211__(float(__NFUN_166__(PreviousXDrawPos, XDrawPos))), __NFUN_211__(float(__NFUN_166__(PreviousYDrawPos, YDrawPos))));
				NewPitch = int(__NFUN_198__(float(48), __NFUN_195__(float(8), Helper)));
				// End:0x1C6
				if(__NFUN_169__(NewPitch, 48))
				{
					NewPitch = 48;					
				}
				else
				{
					// End:0x1DA
					if(__NFUN_170__(NewPitch, 224))
					{
						NewPitch = 224;
					}
				}
				DrawingTool.SoundPitch = byte(NewPitch);
				AmbientEndTime = __NFUN_198__(Level.GameTimeSeconds, AmbientDuration);				
			}
			else
			{
				// End:0x24E
				if(__NFUN_148__(__NFUN_340__(DrawingTool.AmbientSound, none), __NFUN_203__(Level.GameTimeSeconds, AmbientEndTime)))
				{
					DrawingTool.__NFUN_701__(none);
				}
			}
		}
		super.Tick(DeltaTime);
		return;
	}

	function BeginState()
	{
		AimGridName = DrawingTools[CurrentColor].WriteAnimName;
		States[CurrentStateIndex].UserAnimName = AimGridName;
		bAchievementAlreadyUnlocked = false;
		super.BeginState();
		return;
	}

	function EndState()
	{
		super(Object).EndState();
		DrawingTool.__NFUN_701__(none);
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		return;
	}
	stop;
}

state AttachUserLERP
{
	function BeginState()
	{
		super(Object).BeginState();
		MyCopySource.__NFUN_1196__(0);
		return;
	}
	stop;
}

defaultproperties
{
	HorizontalRate=0.003
	MaxHorizontal=36.5
	BaseXOffset=3
	XOffsetScalar=282.5
	AmbientDuration=0.08
	PreDetachDuration=0.5
	DrawingToolMaterials(0)='Industrial_Generic'
	DrawingToolMaterials(1)='smt_skins8.Whiteboard.WhiteboardPen1tw_d'
	DrawingToolMaterials(2)='smt_skins8.Whiteboard.WhiteBoardPenRed_BS'
	DrawingToolMaterials(3)='smt_skins8.Whiteboard.WhiteBoardPenBlue_BS'
	DrawingToolMaterials(4)='smt_skins8.Whiteboard.WhiteboardPenGreen_BS'
	DrawingToolMaterials(5)='smt_skins8.Whiteboard.WhiteboardYellow_BS'
	DrawingToolMaterials(6)=ObjectProperty'Lights_Generic.Trigger.Other'
	DrawingToolMaterials(7)='Settings_LadyKiller_DestructibleVase_Gib'
	DrawingToolMaterials(8)=none
	DrawingToolMaterials(9)=none
	DrawingToolMaterials(10)='Engine.BoolProperty'
	Rotation[47]=/* Unknown default property type! */
}