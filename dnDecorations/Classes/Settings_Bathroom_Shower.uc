/*******************************************************************************
 * Settings_Bathroom_Shower generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Settings_Bathroom_Shower extends Settings_Bathroom
	collapsecategories;

var SoftParticleSystem ShowerParticles;
var bool bTurnedOn;
var dnHUDEffects_WaterSplatter_Medium Splatter;
var() deprecated array<SoftParticleSystem> AdditionalShowerParticles;
var Pawn User;
var transient bool bNotCheckpointLoad;

event PreBeginPlay()
{
	bNotCheckpointLoad = true;
	super(dnDecoration).PreBeginPlay();
	return;
}

event PreGameInit()
{
	super(dnDecoration).PreGameInit();
	// End:0x37
	if(__NFUN_145__(bNotCheckpointLoad))
	{
		// End:0x2A
		if(bTurnedOn)
		{
			DecoActivity(0, 'TurnOn');			
		}
		else
		{
			DecoActivity(0, 'TurnOff');
		}
	}
	return;
}

function PostVerifySelf()
{
	super(dnDecoration).PostVerifySelf();
	ShowerParticles = SoftParticleSystem(FindMountedActor('ShowerParticles'));
	Splatter = __NFUN_615__(class'dnHUDEffects_WaterSplatter_Medium', self);
	// End:0x7C
	if(__NFUN_340__(Splatter, none))
	{
		Splatter.MountType = 2;
		Splatter.MountMeshItem = 'Water';
		Splatter.__NFUN_635__(self);
		Splatter.StopEffect();
	}
	UpdateParticles();
	return;
}

function Used(Actor Other, Pawn EventInstigator)
{
	User = EventInstigator;
	super(dnDecoration).Used(Other, EventInstigator);
	return;
}

final function SetParticleState(SoftParticleSystem ParticleSystem, bool bEnabled)
{
	// End:0x72
	if(__NFUN_340__(ParticleSystem, none))
	{
		ParticleSystem.Enabled = bEnabled;
		// End:0x60
		if(bEnabled)
		{
			ParticleSystem.DisableTickWhenEmpty = false;
			ParticleSystem.TickStyle = ParticleSystem.default.TickStyle;			
		}
		else
		{
			ParticleSystem.DisableTickWhenEmpty = true;
		}
	}
	return;
}

final function UpdateParticles()
{
	local int i;

	SetParticleState(ShowerParticles, bTurnedOn);
	i = __NFUN_166__(string(AdditionalShowerParticles), 1);
	J0x20:

	// End:0x4C [Loop If]
	if(__NFUN_172__(i, 0))
	{
		SetParticleState(AdditionalShowerParticles[i], bTurnedOn);
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x20;
	}
	return;
}

final function TurnOn()
{
	// End:0x28
	if(__NFUN_340__(User, none))
	{
		User.HandQuickAction('HandQuickAction_SlideSwitch_Left');
		User = none;
	}
	bUsable = false;
	__NFUN_607__(0.5, false, 'TurnOnDelayed');
	return;
}

function TurnOnDelayed()
{
	DecoActivity(0, 'TurnOn');
	bTurnedOn = true;
	// End:0x31
	if(__NFUN_340__(Splatter, none))
	{
		Splatter.StartEffect();
	}
	UpdateParticles();
	bUsable = true;
	return;
}

final function TurnOff()
{
	// End:0x28
	if(__NFUN_340__(User, none))
	{
		User.HandQuickAction('RoundSwitch_Down');
		User = none;
	}
	bUsable = false;
	__NFUN_607__(0.5, false, 'TurnOffDelayed');
	return;
}

function TurnOffDelayed()
{
	DecoActivity(0, 'TurnOff');
	bTurnedOn = false;
	// End:0x31
	if(__NFUN_340__(Splatter, none))
	{
		Splatter.StopEffect();
	}
	UpdateParticles();
	bUsable = true;
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'dnHUDEffects_WaterSplatter_Medium');
	PrecacheIndex.__NFUN_1281__('HandQuickAction_SlideSwitch_Left');
	PrecacheIndex.__NFUN_1281__('RoundSwitch_Down');
	return;
}

defaultproperties
{
	DecoActivities_Default=/* Array type was not detected. */
}