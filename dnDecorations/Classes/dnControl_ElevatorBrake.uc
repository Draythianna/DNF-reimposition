/*******************************************************************************
 * dnControl_ElevatorBrake generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_ElevatorBrake extends dnControl
	collapsecategories;

var() noexport float OverheatMaxTime "Duration of uninterrupted braking to cause overheat.";
var() noexport float CoolDownTime "Duration of uninterrupted cooling to cool down after overheat.";
var() noexport bool PullOnce "True if lever needs to be pulled only once, false if multiple times.";
var bool bOverheatNeedRelease;
var float OverheatTimer;
var localized string PullPhrase;
var bool bLeverPulled;

final simulated function bool UserWantsToBrake()
{
	// End:0x16
	if(__NFUN_150__(bOverheated, bOverheatNeedRelease))
	{
		return false;
	}
	// End:0x2C
	if(__NFUN_148__(bLeverPulled, PullOnce))
	{
		return false;
	}
	return __NFUN_148__(__NFUN_340__(PlayerUser, none), PlayerUser.bIFire);
	return;
}

simulated event Tick(float DeltaSeconds)
{
	super.Tick(DeltaSeconds);
	// End:0x5E
	if(__NFUN_201__(OverheatMaxTime, 0))
	{
		__NFUN_210__(OverheatTimer, DeltaSeconds);
		// End:0x5E
		if(__NFUN_200__(OverheatTimer, __NFUN_199__(OverheatMaxTime, CoolDownTime)))
		{
			bOverheated = false;
			// End:0x5E
			if(__NFUN_200__(OverheatTimer, 0))
			{
				OverheatTimer = 0;
			}
		}
	}
	return;
}

simulated function CREvent_KeyChange(ControlRemapperEx CR, Pawn InputActor, Engine.Actor.EControlRemapperKeyType KeyType, Engine.Actor.EControlRemapperEventType EventType)
{
	// End:0x26
	if(__NFUN_148__(__NFUN_173__(int(EventType), int(2)), __NFUN_173__(int(KeyType), int(8))))
	{
		bOverheatNeedRelease = false;
	}
	super.CREvent_KeyChange(CR, InputActor, KeyType, EventType);
	return;
}

simulated event bool ShouldDrawBoostMeter()
{
	return __NFUN_201__(OverheatMaxTime, 0);
	return;
}

simulated event float GetBoostPercent()
{
	// End:0x23
	if(__NFUN_201__(OverheatMaxTime, 0))
	{
		return __NFUN_199__(1, __NFUN_196__(OverheatTimer, OverheatMaxTime));
	}
	return 0;
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	// End:0x4D
	if(__NFUN_201__(OverheatMaxTime, 0))
	{
		PrecacheIndex.__NFUN_1277__(VoicePack, 'ElevatorBrake_Overheat');
		PrecacheIndex.__NFUN_1269__(class'DukeHUD'.default.BoostMeter);
	}
	PrecacheIndex.__NFUN_1277__(VoicePack, 'ElevBrake_Lever_Start');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'ElevBrake_Lever_Stop');
	return;
}

state() idle
{
	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		SetHUDKeyInfoState(HUD, 1, __NFUN_150__(__NFUN_145__(bLeverPulled), __NFUN_145__(PullOnce)), 26,,, PullPhrase);
		return;
	}

	simulated event Tick(float DeltaSeconds)
	{
		global.Tick(DeltaSeconds);
		// End:0x20
		if(UserWantsToBrake())
		{
			ControlEvent(, 'BrakeStart');
		}
		return;
	}
	stop;
}

state() BrakeStart
{
	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		SetHUDKeyInfoState(HUD, 1, __NFUN_150__(__NFUN_145__(bLeverPulled), __NFUN_145__(PullOnce)), 26,, true, PullPhrase);
		return;
	}

	simulated function AnimCallback_UserAnimEnd()
	{
		global.AnimCallback_UserAnimEnd();
		// End:0x1E
		if(UserWantsToBrake())
		{
			global.ControlEvent(, 'BrakeHold');			
		}
		else
		{
			global.ControlEvent(, 'BrakeEnd');
		}
		return;
	}
	stop;
}

state() Braking
{
	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		SetHUDKeyInfoState(HUD, 1, __NFUN_150__(__NFUN_145__(bLeverPulled), __NFUN_145__(PullOnce)), 26,, true, PullPhrase);
		return;
	}

	simulated function CREvent_KeyChange(ControlRemapperEx CR, Pawn InputActor, Engine.Actor.EControlRemapperKeyType KeyType, Engine.Actor.EControlRemapperEventType EventType)
	{
		// End:0x35
		if(__NFUN_148__(__NFUN_173__(int(EventType), int(2)), __NFUN_173__(int(KeyType), int(8))))
		{
			// End:0x35
			if(__NFUN_145__(UserWantsToBrake()))
			{
				global.ControlEvent(, 'BrakeEnd');
			}
		}
		super(dnControl).CREvent_KeyChange(CR, InputActor, KeyType, EventType);
		return;
	}

	simulated event Tick(float DeltaSeconds)
	{
		super(dnControl).Tick(DeltaSeconds);
		// End:0x7B
		if(__NFUN_201__(OverheatMaxTime, 0))
		{
			__NFUN_209__(OverheatTimer, DeltaSeconds);
			// End:0x7B
			if(__NFUN_203__(OverheatTimer, OverheatMaxTime))
			{
				bOverheated = true;
				bOverheatNeedRelease = __NFUN_148__(__NFUN_340__(PlayerUser, none), PlayerUser.bIFire);
				FindAndPlaySound('ElevatorBrake_Overheat', 1);
				ControlEvent(, 'BrakeEnd');
			}
		}
		return;
	}
	stop;
}

state() BrakeEnd
{
	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		SetHUDKeyInfoState(HUD, 1, __NFUN_150__(__NFUN_145__(bLeverPulled), __NFUN_145__(PullOnce)), 26,, true, PullPhrase);
		return;
	}

	simulated event EndState()
	{
		super(Object).EndState();
		bLeverPulled = true;
		return;
	}
	stop;
}

defaultproperties
{
	PullPhrase="<?int?dnDecorations.dnControl_ElevatorBrake.PullPhrase?>"
	States=/* Array type was not detected. */
}