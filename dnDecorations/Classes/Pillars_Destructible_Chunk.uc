/*******************************************************************************
 * Pillars_Destructible_Chunk generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Pillars_Destructible_Chunk extends aFinalDecoration
	abstract
	collapsecategories
	dependson(Pillars_Destructible);

var Pillars_Destructible PillarOwner;
var bool bAllowHurtRadius;

simulated event PostVerifySelf()
{
	super(dnDecoration).PostVerifySelf();
	PillarOwner = Pillars_Destructible(Owner);
	// End:0x33
	if(__NFUN_340__(PillarOwner, none))
	{
		PillarOwner.ChunkSpawned(self);
	}
	return;
}

function HurtRadiusActivity(Actor DamageInstigator, float DamageAmount, Vector DamageOrigin, float DamageRadius, float DamageFalloffStart, class<DamageType> DamageType, Vector DamageStart, optional bool bIgnoreDrawScale, optional float RelativeScale)
{
	// End:0x0D
	if(__NFUN_145__(bAllowHurtRadius))
	{
		return;
	}
	super(KarmaActor).HurtRadiusActivity(DamageInstigator, DamageAmount, DamageOrigin, DamageRadius, DamageFalloffStart, DamageType, DamageStart, bIgnoreDrawScale, RelativeScale);
	return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	local bool bIsDead;

	// End:0x23
	if(__NFUN_148__(__NFUN_340__(PillarOwner, none), PillarOwner.IsAtChunkDestroyLimitForFrame()))
	{
		return;
	}
	bIsDead = DecorationIsDead();
	super(dnDecoration).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
	// End:0x8E
	if(__NFUN_148__(__NFUN_148__(__NFUN_340__(PillarOwner, none), __NFUN_145__(bIsDead)), DecorationIsDead()))
	{
		PillarOwner.ChunkDestroyed(self);
	}
	return;
}

event PhysicsChange(optional Engine.Object.EPhysics PreviousPhysics)
{
	super(KarmaActor).PhysicsChange(PreviousPhysics);
	bNoNativeTick = true;
	return;
}

simulated event Destroyed()
{
	super(dnDecoration).Destroyed();
	bAllowHurtRadius = true;
	__NFUN_621__(true, false, false, true, false);
	return;
}

defaultproperties
{
	bSurviveDeath=true
	DestroyedActivities=/* Array type was not detected. */
	ConstVel=56360961
}