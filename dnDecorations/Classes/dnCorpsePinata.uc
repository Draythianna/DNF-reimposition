/*******************************************************************************
 * dnCorpsePinata generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnCorpsePinata extends dnDecorativeCorpse
	collapsecategories;

struct SWebbedBone
{
	var() noexport name BoneName "This is the name of the bone that you want to attach webbing to.";
	var() noexport deprecated Actor WorldAttachPoint "Point this to an Actor placed in the world as an attach point for the webbing.";
	var KBSJoint WorldBSJoint;
	var KarmaActor HelperNode1;
	var KLinear LinearJoint;
	var KLinearSpringDamper SpringDamper;
	var KarmaActor HelperNode2;
	var KBSJoint BoneBSJoint;
	var Details_Generic_CorpseWebbing_Pinata Webbing;
};

var() noexport SWebbedBone WebbedBones[3] "Array of bones you want to attach to the world with webbing.";
var() noexport class<Pickup> PickupTypes[3] "List of pickups to drop in sequence.  Leave a slot empty if you don't want something for each break.";
var() noexport float DamageThrottle "Amount of time to wait between accepting damage.";
var MotionPrefab PickupMotionPrefab;
var bool bTimeout;
var bool bAttached;
var int PickupIndex;

simulated event PreBeginPlay()
{
	local int i;
	local Vector AttachLoc, BoneLoc, Dir;

	super(RenderActor).PreBeginPlay();
	// End:0x5B4
	if(__NFUN_340__(__NFUN_568__(), none))
	{
		i = 0;
		J0x17:

		// End:0x5B4 [Loop If]
		if(__NFUN_169__(i, 3))
		{
			// End:0x5B
			if(__NFUN_145__(MeshInstance.__NFUN_525__(WebbedBones[i].BoneName)))
			{
				WebbedBones[i].BoneName = 'Root';
			}
			BoneLoc = MeshInstance.__NFUN_533__(WebbedBones[i].BoneName, true);
			// End:0xB9
			if(__NFUN_340__(WebbedBones[i].WorldAttachPoint, none))
			{
				AttachLoc = WebbedBones[i].WorldAttachPoint.Location;				
			}
			else
			{
				AttachLoc = BoneLoc;
			}
			Dir = __NFUN_253__(__NFUN_239__(BoneLoc, AttachLoc));
			WebbedBones[i].HelperNode1 = __NFUN_615__(class'Details_Generic_PhysicsHelperNode', self,, __NFUN_238__(AttachLoc, __NFUN_235__(64, Dir)), __NFUN_265__(0, 0, 0), false, true);
			WebbedBones[i].WorldBSJoint = KBSJoint(KarmaSetupConstraint(class'KBSJoint', WebbedBones[i].HelperNode1));
			// End:0x189
			if(__NFUN_340__(WebbedBones[i].WorldBSJoint, none))
			{
				WebbedBones[i].WorldBSJoint.__NFUN_645__(AttachLoc);
				KarmaEnableConstraint(WebbedBones[i].WorldBSJoint);
			}
			WebbedBones[i].HelperNode2 = __NFUN_615__(class'Details_Generic_PhysicsHelperNode', self,, BoneLoc, __NFUN_265__(0, 0, 0), false, true);
			WebbedBones[i].LinearJoint = KLinear(KarmaSetupConstraint(class'KLinear', WebbedBones[i].HelperNode1,, WebbedBones[i].HelperNode2));
			// End:0x2A3
			if(__NFUN_340__(WebbedBones[i].LinearJoint, none))
			{
				WebbedBones[i].LinearJoint.__NFUN_645__(WebbedBones[i].HelperNode1.Location);
				WebbedBones[i].LinearJoint.__NFUN_652__(Rotator(__NFUN_253__(__NFUN_239__(WebbedBones[i].HelperNode2.Location, WebbedBones[i].HelperNode1.Location))));
				KarmaEnableConstraint(WebbedBones[i].LinearJoint);
			}
			WebbedBones[i].SpringDamper = KLinearSpringDamper(KarmaSetupConstraint(class'KLinearSpringDamper', WebbedBones[i].HelperNode1,, WebbedBones[i].HelperNode2));
			// End:0x41D
			if(__NFUN_340__(WebbedBones[i].SpringDamper, none))
			{
				WebbedBones[i].SpringDamper.__NFUN_645__(WebbedBones[i].LinearJoint.Location);
				WebbedBones[i].SpringDamper.__NFUN_652__(WebbedBones[i].LinearJoint.Rotation);
				WebbedBones[i].SpringDamper.__NFUN_1102__(__NFUN_251__(__NFUN_239__(BoneLoc, WebbedBones[i].LinearJoint.Location)));
				WebbedBones[i].SpringDamper.__NFUN_1104__(false);
				WebbedBones[i].SpringDamper.__NFUN_1105__(false);
				WebbedBones[i].SpringDamper.__NFUN_1098__(6000);
				WebbedBones[i].SpringDamper.__NFUN_1099__(1000);
				KarmaEnableConstraint(WebbedBones[i].SpringDamper);
			}
			WebbedBones[i].BoneBSJoint = KBSJoint(KarmaSetupConstraint(class'KBSJoint', self, WebbedBones[i].BoneName, WebbedBones[i].HelperNode2));
			// End:0x4A9
			if(__NFUN_340__(WebbedBones[i].BoneBSJoint, none))
			{
				WebbedBones[i].BoneBSJoint.__NFUN_645__(BoneLoc);
				KarmaEnableConstraint(WebbedBones[i].BoneBSJoint);
			}
			WebbedBones[i].Webbing = __NFUN_615__(class'Details_Generic_CorpseWebbing_Pinata', self,,,, false, true);
			// End:0x5AA
			if(__NFUN_340__(WebbedBones[i].Webbing, none))
			{
				WebbedBones[i].Webbing.bGoryActor = true;
				WebbedBones[i].Webbing.OwnerPinata = self;
				WebbedBones[i].Webbing.OwnerSlot = i;
				WebbedBones[i].Webbing.Actor1 = self;
				WebbedBones[i].Webbing.Actor1Bone = WebbedBones[i].BoneName;
				WebbedBones[i].Webbing.Actor2 = WebbedBones[i].WorldAttachPoint;
			}
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x17;
		}
	}
	return;
}

simulated event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	local int i;
	local array<int> Options;

	i = 0;
	J0x07:

	// End:0x47 [Loop If]
	if(__NFUN_169__(i, 3))
	{
		// End:0x3D
		if(__NFUN_340__(WebbedBones[i].Webbing, none))
		{
			Options[Options.Add(1)] = i;
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	// End:0x67
	if(__NFUN_170__(string(Options), 0))
	{
		DestroyBoneWebbing(Options[__NFUN_187__(string(Options))]);
	}
	return;
}

final simulated function DestroyBoneWebbing(int WebbingSlot)
{
	local class<Pickup> PickupType;
	local Pickup Pickup;

	// End:0x19
	if(__NFUN_339__(WebbedBones[WebbingSlot].Webbing, none))
	{
		return;
	}
	// End:0x24
	if(bTimeout)
	{
		return;
	}
	bTimeout = true;
	__NFUN_605__(DamageThrottle, false, 'ClearTimeout');
	FindAndPlaySound('PinataWeb_Break');
	WebbedBones[WebbingSlot].WorldBSJoint.__NFUN_642__(0);
	WebbedBones[WebbingSlot].LinearJoint.__NFUN_642__(0);
	WebbedBones[WebbingSlot].SpringDamper.__NFUN_642__(0);
	WebbedBones[WebbingSlot].BoneBSJoint.__NFUN_642__(0);
	WebbedBones[WebbingSlot].WorldBSJoint.bSilentDestroy = true;
	WebbedBones[WebbingSlot].WorldBSJoint.__NFUN_614__();
	WebbedBones[WebbingSlot].WorldBSJoint = none;
	WebbedBones[WebbingSlot].HelperNode1.bSilentDestroy = true;
	WebbedBones[WebbingSlot].HelperNode1.__NFUN_614__();
	WebbedBones[WebbingSlot].HelperNode1 = none;
	WebbedBones[WebbingSlot].LinearJoint.bSilentDestroy = true;
	WebbedBones[WebbingSlot].LinearJoint.__NFUN_614__();
	WebbedBones[WebbingSlot].LinearJoint = none;
	WebbedBones[WebbingSlot].SpringDamper.bSilentDestroy = true;
	WebbedBones[WebbingSlot].SpringDamper.__NFUN_614__();
	WebbedBones[WebbingSlot].SpringDamper = none;
	WebbedBones[WebbingSlot].HelperNode2.bSilentDestroy = true;
	WebbedBones[WebbingSlot].HelperNode2.__NFUN_614__();
	WebbedBones[WebbingSlot].HelperNode2 = none;
	WebbedBones[WebbingSlot].BoneBSJoint.bSilentDestroy = true;
	WebbedBones[WebbingSlot].BoneBSJoint.__NFUN_614__();
	WebbedBones[WebbingSlot].BoneBSJoint = none;
	WebbedBones[WebbingSlot].Webbing.bSilentDestroy = true;
	WebbedBones[WebbingSlot].Webbing.__NFUN_614__();
	WebbedBones[WebbingSlot].Webbing = none;
	// End:0x322
	if(__NFUN_340__(PickupTypes[PickupIndex], none))
	{
		Pickup = __NFUN_615__(PickupTypes[PickupIndex], self,, __NFUN_238__(Location, __NFUN_232__(0, 0, PickupTypes[PickupIndex].default.CollisionHeight)),, false, true);
		// End:0x322
		if(__NFUN_340__(Pickup, none))
		{
			Pickup.__NFUN_816__(PhysicsEntityGroup);
			Pickup.__NFUN_835__(self, PickupMotionPrefab);
		}
	}
	__NFUN_184__(PickupIndex);
	// End:0x34D
	if(__NFUN_172__(PickupIndex, 3))
	{
		__NFUN_812__(7);
		FindAndStopSound('PinataWeb_Stretch');
		bAttached = false;
	}
	return;
}

event Tick(float DeltaSeconds)
{
	local float Scale;

	super(CorpseBase).Tick(DeltaSeconds);
	// End:0x34
	if(__NFUN_148__(bAttached, __NFUN_201__(__NFUN_211__(__NFUN_251__(Velocity)), 10)))
	{
		FindAndPlaySound('PinataWeb_Stretch');
	}
	Scale = __NFUN_196__(DeltaSeconds, 0.02);
	// End:0x6A
	if(__NFUN_201__(Scale, 1))
	{
		GravityScale = __NFUN_196__(default.GravityScale, Scale);		
	}
	else
	{
		GravityScale = default.GravityScale;
	}
	return;
}

final simulated function ClearTimeout()
{
	bTimeout = false;
	return;
}

simulated event bool OnEvalBonesHelper()
{
	local float DesiredHeadScale;

	DesiredHeadScale = Level.HeadScaleModifier;
	// End:0x53
	if(__NFUN_148__(__NFUN_206__(DesiredHeadScale, 1), __NFUN_340__(__NFUN_568__(), none)))
	{
		MeshInstance.__NFUN_539__('neck', __NFUN_232__(DesiredHeadScale, DesiredHeadScale, DesiredHeadScale));
	}
	return true;
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(CorpseBase).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'Details_Generic_PhysicsHelperNode');
	PrecacheIndex.__NFUN_1266__(class'Details_Generic_CorpseWebbing_Pinata');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'PinataWeb_Break');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'PinataWeb_Stretch');
	return;
}

defaultproperties
{
	WebbedBones[0]=(BoneName=LeftArm,WorldAttachPoint=none,WorldBSJoint=none,HelperNode1=none,LinearJoint=none,SpringDamper=none,HelperNode2=none,BoneBSJoint=none,Webbing=none)
	WebbedBones[1]=(BoneName=RightForeArmRoll,WorldAttachPoint=none,WorldBSJoint=none,HelperNode1=none,LinearJoint=none,SpringDamper=none,HelperNode2=none,BoneBSJoint=none,Webbing=none)
	WebbedBones[2]=(BoneName=LeftLeg,WorldAttachPoint=none,WorldBSJoint=none,HelperNode1=none,LinearJoint=none,SpringDamper=none,HelperNode2=none,BoneBSJoint=none,Webbing=none)
	DamageThrottle=0.5
	begin object name=dnCorpsePinata_PickupMotionPrefab class=MotionPrefab
		bUseDamageInfo=false
		bUseParentVelocity=false
		bUseParentRotationRate=false
		Velocity=(X=1.291717E-41,Y=2.797242E-17,Z=0)
		VelocityVariance=(X=1.291717E-41,Y=2.802966E-17,Z=300)
	object end
	// Reference: MotionPrefab'dnCorpsePinata.dnCorpsePinata_PickupMotionPrefab'
	PickupMotionPrefab=dnCorpsePinata_PickupMotionPrefab
	bAttached=true
	bStartEnabled=true
	bIgnoresPhysicsDamage=false
	DynamicInteractionClassification=0
	bHasEvalBonesHelper=true
	bGoryActor=true
	CollisionRadius=45
	CollisionHeight=45
	Mesh='c_characters.corpse_pinyata'
	VoicePack='SoundConfig.Interactive.VoicePack_Biology'
}