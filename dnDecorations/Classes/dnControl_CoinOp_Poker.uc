/*******************************************************************************
 * dnControl_CoinOp_Poker generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_CoinOp_Poker extends dnControl_CoinOp
	collapsecategories;

enum EPokerDisplayMode
{
	DISPLAYMODE_Off,
	DISPLAYMODE_ScreenSaver,
	DISPLAYMODE_Active
};

struct KeyBox
{
	var float Top;
	var float Left;
	var float Width;
	var float Height;
};

var private dnControl_CoinOp_Poker.EPokerDisplayMode DisplayMode;
var private int DisplaySurfaceID;
var private Texture PowerOffTexture;
var private MaterialEx ScreenSaverMaterial;
var private SmackerTexture ScreenSaverSmacker;
var private VideoPoker VideoPokerAbstractMachine;
var private int VideoPokerKey;
var private KeyBox Keys[6];
var localized string TouchScreenText;

event PostBeginPlay()
{
	local VideoPoker AbstractMachine;

	super.PostBeginPlay();
	// End:0x22
	foreach __NFUN_747__(class'VideoPoker', AbstractMachine)
	{
		VideoPokerAbstractMachine = AbstractMachine;		
	}	
	// End:0x3D
	if(__NFUN_339__(VideoPokerAbstractMachine, none))
	{
		VideoPokerAbstractMachine = __NFUN_615__(class'VideoPoker');
	}
	VideoPokerKey = VideoPokerAbstractMachine.GetKey();
	return;
}

function SetPower(bool bOff)
{
	super(dnControl).SetPower(bOff);
	// End:0x20
	if(bOff)
	{
		SetPanelDisplayMode(0);		
	}
	else
	{
		SetUseable(true);
		SetPanelDisplayMode(1);
	}
	return;
}

function SetPanelDisplayMode(dnControl_CoinOp_Poker.EPokerDisplayMode NewDisplayMode)
{
	// End:0x59
	if(__NFUN_174__(int(NewDisplayMode), int(DisplayMode)))
	{
		switch(DisplayMode)
		{
			// End:0x21
			case 0:
				// End:0x59
				break;
			// End:0x4B
			case 1:
				ScreenSaverSmacker.SetFrame(0);
				ScreenSaverSmacker.SetPause(true);
				// End:0x59
				break;
			// End:0x53
			case 2:
				// End:0x59
				break;
			// End:0xFFFF
			default:
				// End:0x59
				break;
				break;
		}
	}
	DisplayMode = NewDisplayMode;
	switch(DisplayMode)
	{
		// End:0x88
		case 0:
			SetUseable(false);
			__NFUN_741__(DisplaySurfaceID, PowerOffTexture);
			// End:0x104
			break;
		// End:0xCA
		case 1:
			__NFUN_741__(DisplaySurfaceID, ScreenSaverMaterial);
			SetHitTexture(ScreenSaverMaterial);
			ScreenSaverSmacker.SetFrame(0);
			ScreenSaverSmacker.SetPause(false);
			// End:0x104
			break;
		// End:0xFE
		case 2:
			__NFUN_741__(DisplaySurfaceID, VideoPokerAbstractMachine.TableRenderMaterial);
			SetHitTexture(VideoPokerAbstractMachine.TableRenderMaterial);
			// End:0x104
			break;
		// End:0xFFFF
		default:
			// End:0x104
			break;
			break;
	}
	return;
}

function StartCoinOp()
{
	VideoPokerAbstractMachine.Activate(VideoPokerKey);
	SetPanelDisplayMode(2);
	return;
}

function EndCoinOp()
{
	VideoPokerAbstractMachine.Deactivate(VideoPokerKey);
	SetPanelDisplayMode(1);
	return;
}

function bool CanInsertCoin()
{
	// End:0x1B
	if(VideoPokerAbstractMachine.CanBetAmount(1, User))
	{
		return true;
	}
	return false;
	return;
}

function InsertCoin()
{
	VideoPokerAbstractMachine.Bet1Pressed(User);
	return;
}

function bool CanPressStartButton()
{
	return;
}

function PressStartButton()
{
	return;
}

function TouchedPanel(int X, int Y)
{
	local int i;

	// End:0x54
	if(__NFUN_173__(int(DisplayMode), int(2)))
	{
		i = 0;
		J0x15:

		// End:0x54 [Loop If]
		if(__NFUN_169__(i, 6))
		{
			// End:0x4A
			if(IsPressingKey(X, Y, Keys[i]))
			{
				PressKey(i);
			}
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x15;
		}
	}
	return;
}

function bool IsPressingKey(int X, int Y, KeyBox Box)
{
	// End:0x17
	if(__NFUN_200__(float(X), Box.Left))
	{
		return false;
	}
	// End:0x3A
	if(__NFUN_201__(float(X), __NFUN_198__(Box.Left, Box.Width)))
	{
		return false;
	}
	// End:0x51
	if(__NFUN_200__(float(Y), Box.Top))
	{
		return false;
	}
	// End:0x74
	if(__NFUN_201__(float(Y), __NFUN_198__(Box.Top, Box.Height)))
	{
		return false;
	}
	return true;
	return;
}

function PressKey(int i)
{
	switch(i)
	{
		// End:0x1F
		case 0:
			VideoPokerAbstractMachine.DrawPressed();
			// End:0x99
			break;
		// End:0x36
		case 1:
			VideoPokerAbstractMachine.ToggleCard1Pressed();
			// End:0x99
			break;
		// End:0x4E
		case 2:
			VideoPokerAbstractMachine.ToggleCard2Pressed();
			// End:0x99
			break;
		// End:0x66
		case 3:
			VideoPokerAbstractMachine.ToggleCard3Pressed();
			// End:0x99
			break;
		// End:0x7E
		case 4:
			VideoPokerAbstractMachine.ToggleCard4Pressed();
			// End:0x99
			break;
		// End:0x96
		case 5:
			VideoPokerAbstractMachine.ToggleCard5Pressed();
			// End:0x99
			break;
		// End:0xFFFF
		default:
			break;
	}
	return;
}

function bool CanTouchScreen()
{
	// End:0x2B
	if(__NFUN_173__(int(VideoPokerAbstractMachine.VPState), int(0)))
	{
		return __NFUN_170__(VideoPokerAbstractMachine.CurrentBet, 0);
	}
	return true;
	return;
}

simulated event UsableSomethingPreRender()
{
	super(dnUsableSomething).UsableSomethingPreRender();
	// End:0x25
	if(__NFUN_173__(int(DisplayMode), int(2)))
	{
		VideoPokerAbstractMachine.RenderGame(true);
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1266__(class'VideoPoker');
	return;
}

state() PanelIdle
{
	function bool ControlEventInternal(optional int IntEvent, optional name CustomEventName)
	{
		super.ControlEventInternal(IntEvent, CustomEventName);
		// End:0x34
		if(__NFUN_148__(__NFUN_173__(IntEvent, int(14)), CanTouchScreen()))
		{
			ControlEvent(, 'TouchPanel');
		}
		return;
	}

	simulated function UsableSomethingQueryInteractKeyInfoState(HUD HUD)
	{
		// End:0x23
		if(CanInsertCoin())
		{
			SetHUDKeyInfoState(HUD, 1, true, 26,,, InsertCoinText);			
		}
		else
		{
			// End:0x55
			if(__NFUN_173__(int(VideoPokerAbstractMachine.VPState), int(0)))
			{
				SetHUDKeyInfoState(HUD, 1, true, 26,,, TouchScreenText);				
			}
			else
			{
				// End:0x75
				if(CanTouchScreen())
				{
					SetHUDKeyInfoState(HUD, 1, true, 26,,, TouchScreenText);
				}
			}
		}
		return;
	}
	stop;
}

defaultproperties
{
	DisplaySurfaceID=1
	PowerOffTexture='dt_effects.Particles.lazerflashfx2RC'
	ScreenSaverMaterial='smt_skins3.PokerMachine.pokermachine_screen_screensaver'
	ScreenSaverSmacker='smk1.s_kpadsaver1'
	Keys[0]=(Top=103,Left=95,Width=86,Height=15)
	Keys[1]=(Top=176,Left=4,Width=48,Height=65)
	Keys[2]=(Top=176,Left=54,Width=48,Height=65)
	Keys[3]=(Top=176,Left=104,Width=48,Height=65)
	Keys[4]=(Top=176,Left=154,Width=48,Height=65)
	Keys[5]=(Top=176,Left=204,Width=48,Height=65)
	TouchScreenText="<?int?dnDecorations.dnControl_CoinOp_Poker.TouchScreenText?>"
}