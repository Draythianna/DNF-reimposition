/*******************************************************************************
 * Biology_Generic_GasPod generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Biology_Generic_GasPod extends Biology_Generic
	collapsecategories;

var() noexport float SensorRadius "Radius of the KSphereSensor around this pod - also controls damage radius";
var() noexport float Damage "Amount of damage to inflict on pop.";
var() noexport float SizeChangeTime "Time it takes to expand.";
var() noexport float SizeChangeTimeVariance "Variance on ExpandTime.";
var float PopAnimTime;
var float PopAnimTimeVariance;
var Biology_Generic_AlienSensor Sensor;
var bool bLightPulseUp;
var float PulseSpeed;
var float Brightness;
var Vector LightColor;
var bool bOnlyAffectedByPawns;
var Vector HurtRadiusOffset;
var float IdleCollisionRadius;
var float IdleCollisionHeight;
var float ExpandCollisionRadius;
var float ExpandCollisionHeight;
var bool bBroken;
var bool bPostNetInit;

replication
{
	// Pos:0x000
	reliable if(__NFUN_173__(int(Role), int(ROLE_Authority)))
		bBroken;

	// Pos:0x00B
	reliable if(__NFUN_173__(int(Role), int(ROLE_Authority)))
		Prime, UnPrime;
}

simulated function PostNetInitial()
{
	bPostNetInit = true;
	super(dnDecoration).PostNetInitial();
	// End:0x2D
	if(IsMP())
	{
		__NFUN_607__(1, false, 'AddToManager');
		TickStyle = 1;
	}
	return;
}

function PlayerPawn GetAPlayer(optional bool bCheckIfHasGRI)
{
	local Pawn P;

	// End:0x22
	if(__NFUN_340__(Level.__NFUN_1161__(), none))
	{
		return Level.__NFUN_1161__();
	}
	P = Level.PawnList;
	J0x37:

	// End:0xA1 [Loop If]
	if(__NFUN_340__(P, none))
	{
		// End:0x89
		if(P.bIsPlayerPawn)
		{
			// End:0x89
			if(__NFUN_150__(__NFUN_145__(bCheckIfHasGRI), __NFUN_340__(PlayerPawn(P).GameReplicationInfo, none)))
			{
				return PlayerPawn(P);
			}
		}
		P = P.NextPawn;
		// [Loop Continue]
		goto J0x37;
	}
	return none;
	return;
}

function AddToManager()
{
	local PlayerPawn PP;

	PP = GetAPlayer();
	// End:0x28
	if(__NFUN_339__(PP, none))
	{
		__NFUN_607__(1, false, 'AddToManager');
		return;
	}
	// End:0x80
	if(__NFUN_150__(__NFUN_172__(int(PP.Role), int(ROLE_Authority)), __NFUN_173__(int(Level.NetMode), int(NM_DedicatedServer))))
	{
		DukeMultiPlayer(PP).GetGasPodManager().AddGasPod(self, SensorRadius);
	}
	return;
}

simulated event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	// End:0x0B
	if(MPRoundNotInProgress())
	{
		return;
	}
	// End:0x97
	if(__NFUN_150__(__NFUN_150__(__NFUN_145__(IsMP()), __NFUN_173__(int(Level.NetMode), int(NM_DedicatedServer))), __NFUN_173__(int(Level.__NFUN_1161__().Role), int(ROLE_Authority))))
	{
		super(dnDecoration).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
		// End:0x97
		if(__NFUN_340__(PlayerPawn(Instigator), none))
		{
			TryToPop(Instigator);
		}
	}
	return;
}

simulated function NU_Broken(bool broken)
{
	// End:0x11
	if(IsMP())
	{
		__NFUN_621__(false, false, false, false, false);
	}
	// End:0x38
	if(__NFUN_148__(__NFUN_148__(__NFUN_145__(bBroken), broken), bPostNetInit))
	{
		Destroyed();
	}
	return;
}

simulated event Destroyed()
{
	RemoveMountedActorListActors();
	bBroken = true;
	super(dnDecoration).Destroyed();
	return;
}

function PostVerifySelf()
{
	__NFUN_601__('Generic0', default.ActorColorList[0].ActorColor);
	super(dnDecoration).PostVerifySelf();
	Sensor = Biology_Generic_AlienSensor(FindMountedActor(, class'Biology_Generic_AlienSensor'));
	// End:0x4F
	if(__NFUN_340__(Sensor, none))
	{
		Sensor.__NFUN_1124__(SensorRadius);
	}
	__NFUN_605__(0.05, true, 'LightPulse');
	LightColor.X = float(ActorColorList[0].ActorColor.R);
	LightColor.Y = float(ActorColorList[0].ActorColor.G);
	LightColor.Z = float(ActorColorList[0].ActorColor.B);
	return;
}

function LightPulse()
{
	ActorColorList[0].ActorColor.R = byte(__NFUN_195__(Brightness, LightColor.X));
	ActorColorList[0].ActorColor.G = byte(__NFUN_195__(Brightness, LightColor.Y));
	ActorColorList[0].ActorColor.B = byte(__NFUN_195__(Brightness, LightColor.Z));
	// End:0xA6
	if(bLightPulseUp)
	{
		__NFUN_209__(Brightness, PulseSpeed);
		// End:0xA3
		if(__NFUN_203__(Brightness, 1))
		{
			Brightness = 1;
			bLightPulseUp = false;
		}		
	}
	else
	{
		__NFUN_210__(Brightness, PulseSpeed);
		// End:0xD4
		if(__NFUN_202__(Brightness, default.Brightness))
		{
			Brightness = default.Brightness;
			bLightPulseUp = true;
		}
	}
	return;
}

simulated event bool OnEvalBonesHelper()
{
	local float NewCollisionRadius, NewCollisionHeight;
	local Vector2D GridPoint;

	GridPoint.Y = __NFUN_585__('Expansion', 'Prime');
	// End:0x35
	if(__NFUN_340__(__NFUN_568__(), none))
	{
		MeshInstance.__NFUN_548__(0, GridPoint);
	}
	NewCollisionRadius = __NFUN_228__(GridPoint.Y, __NFUN_195__(DrawScale, IdleCollisionRadius), __NFUN_195__(DrawScale, ExpandCollisionRadius));
	NewCollisionHeight = __NFUN_228__(GridPoint.Y, __NFUN_195__(DrawScale, IdleCollisionHeight), __NFUN_195__(DrawScale, ExpandCollisionHeight));
	__NFUN_620__(NewCollisionRadius, NewCollisionHeight);
	return true;
	return;
}

function OnSenseHumanPawn()
{
	// End:0x1E
	if(__NFUN_150__(__NFUN_145__(IsMP()), __NFUN_145__(bBroken)))
	{
		Prime();
	}
	return;
}

function OnUnsenseHumanPawn()
{
	UnPrime();
	return;
}

final noexport simulated delegate Prime()
{
	local float CurrentTarget, ExpandTime, Delta;

	CurrentTarget = __NFUN_586__('Expansion', 'Prime');
	// End:0x2F
	if(__NFUN_150__(__NFUN_204__(CurrentTarget, 1), DecorationIsDead()))
	{
		return;
	}
	DecoActivity(0, 'Prime');
	ExpandTime = __NFUN_226__(SizeChangeTime, SizeChangeTimeVariance);
	Delta = __NFUN_199__(1, __NFUN_585__('Expansion', 'Prime'));
	__NFUN_577__('Expansion', 'Prime', 1,, __NFUN_195__(Delta, ExpandTime), 0);
	return;
}

final noexport simulated delegate UnPrime()
{
	local float CurrentTarget, ShrinkTime, Delta;

	CurrentTarget = __NFUN_586__('Expansion', 'Prime');
	// End:0x2F
	if(__NFUN_150__(__NFUN_204__(CurrentTarget, 0), DecorationIsDead()))
	{
		return;
	}
	DecoActivity(0, 'UnPrime');
	ShrinkTime = __NFUN_226__(SizeChangeTime, SizeChangeTimeVariance);
	Delta = __NFUN_585__('Expansion', 'Prime');
	__NFUN_577__('Expansion', 'Prime', 0,, __NFUN_195__(Delta, ShrinkTime), 0);
	return;
}

event WalkedOn(Pawn Other)
{
	super(KarmaActor).WalkedOn(Other);
	TryToPop(Other);
	return;
}

event KImpact(name SelfBoneName, KarmaActor Other, name OtherBoneName, Vector Position, Vector ImpactVelocity, Vector ImpactNormal)
{
	super(dnDecoration).KImpact(SelfBoneName, Other, OtherBoneName, Position, ImpactVelocity, ImpactNormal);
	TryToPop(Other);
	return;
}

event Used(Actor Other, Pawn EventInstigator)
{
	super(dnDecoration).Used(Other, EventInstigator);
	TryToPop(Other);
	return;
}

final simulated function TryToPop(Actor Other)
{
	// End:0x19
	if(__NFUN_150__(__NFUN_339__(Other, none), DecorationIsDead()))
	{
		return;
	}
	// End:0x49
	if(Other.bIsPawn)
	{
		// End:0x46
		if(Pawn(Other).IsAlien())
		{
			return;
		}		
	}
	else
	{
		// End:0x54
		if(bOnlyAffectedByPawns)
		{
			return;
		}
	}
	DecoActivity(0, 'ForcePop', Pawn(Other));
	bBroken = true;
	return;
}

function NotDeadYet()
{
	super(dnDecoration).NotDeadYet();
	DecoActivity(0, 'Pop');
	return;
}

simulated function bool CanHurtRadiusOther(Actor Other)
{
	// End:0x0E
	if(__NFUN_339__(Other, none))
	{
		return false;
	}
	// End:0x72
	if(__NFUN_357__(Other.Class, class'Biology_Generic_GasPod'))
	{
		DecoActivities_Animation(Biology_Generic_GasPod(Other).DecoActivities_Default[3].Activities[0].ActivityElements[0]).AnimActivities[0].Rate = __NFUN_226__(PopAnimTime, PopAnimTimeVariance);
		return true;
	}
	return true;
	return;
}

event DoDamageRadius()
{
	HurtRadius(Damage, __NFUN_238__(Location, __NFUN_263__(HurtRadiusOffset, Rotation)), SensorRadius, -0.25, class'GasPodDamage',,, true);
	bEnemy = false;
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1279__(class'GasPodDamage');
	return;
}

defaultproperties
{
	SensorRadius=192
	Damage=35
	SizeChangeTime=0.3
	SizeChangeTimeVariance=0.2
	PopAnimTime=0.5
	PopAnimTimeVariance=0.4
	PulseSpeed=0.055
	Brightness=0.2
	HurtRadiusOffset=(X=1.291717E-41,Y=2.797242E-17,Z=0)
	IdleCollisionRadius=48
	IdleCollisionHeight=48
	ExpandCollisionRadius=66
	ExpandCollisionHeight=66
	AnimTriggers=/* Array type was not detected. */
}