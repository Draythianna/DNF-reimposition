/*******************************************************************************
 * dnControl_Turret_MG42 generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_Turret_MG42 extends dnControl_Turret
	collapsecategories;

var(dnTurret) noexport float VertSpreadScalar "scale value for max spread when calculating shot error vertically";
var(dnTurret) noexport float HorizSpreadScalar "scale value for max spread when calculating shot error horizontally";
var(dnTurret) noexport int MaxSpread "integer value representing max spread";
var(dnTurret) noexport float ShotDistance "Maximum trace distance for TraceFire line checks.";
var(dnTurret) noexport int ShotDamage "amount of damage caused by a single shot";
var(dnTurret) noexport float PlayerShotDamageScale "amount to scale ShotDamage by when the turret is controlled by a player.";
var(dnTurret) noexport class<TraceDamageType> TraceDamageType "DamageType to use for our damage.";
var(dnTurret) noexport int MaxTracePenetrationCount "Maximum number of times our shots cna penetrate objects.";
var(dnControl_Turret) noexport deprecated name SE_TurnOnCrashingMode "Changes turret to special crashing mode where firing is not allowed.";
var(dnControl_Turret) noexport deprecated name SE_TurnOffCrashingMode "Changes turret back to regular functionality.";
var(dnControl_Turret) noexport deprecated name SE_Crashing_HitFromRight "Plays a special 'hit from right' reaction animation if in crashing mode.";
var(dnControl_Turret) noexport deprecated name SE_Crashing_HitFromLeft "Plays a special 'hit from left' reaction animation if in crashing mode.";
var int MuzzleIndex;
var name MuzzleNames[3];
var class<SoftParticleSystem> MuzzleFlashClass;
var SoftParticleSystem MuzzleFlashActors[3];
var StaticMesh AmmoCasingMesh;
var class<PhysicsMaterial> AmmoCasingMaterial;
var Vector ShellEjectionDir;
var float ShellEjectionForce;
var int LastUpdateYaw;
var bool bInCrashMode;
var transient int ShellCasingCounter;

simulated event PostVerifySelf()
{
	local int i;

	super.PostVerifySelf();
	i = 0;
	J0x0D:

	// End:0xAF [Loop If]
	if(__NFUN_169__(i, 3))
	{
		MuzzleFlashActors[i] = __NFUN_615__(MuzzleFlashClass, self);
		// End:0xA5
		if(__NFUN_340__(MuzzleFlashActors[i], none))
		{
			MuzzleFlashActors[i].MountType = 2;
			MuzzleFlashActors[i].MountMeshItem = MuzzleNames[i];
			MuzzleFlashActors[i].__NFUN_635__(self);
			MuzzleFlashActors[i].TickStyle = 0;
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x0D;
	}
	// End:0xCF
	if(__NFUN_169__(NormalizeRotAxis(MinPitch), -8192))
	{
		MinPitch = -8192;
	}
	// End:0xEB
	if(__NFUN_170__(NormalizeRotAxis(MaxPitch), 8192))
	{
		MaxPitch = 8192;
	}
	__NFUN_718__('StartCrashing', SE_TurnOnCrashingMode);
	__NFUN_718__('StopCrashing', SE_TurnOffCrashingMode);
	__NFUN_718__('HitFromRight', SE_Crashing_HitFromRight);
	__NFUN_718__('HitFromLeft', SE_Crashing_HitFromLeft);
	return;
}

event Destroyed()
{
	local PlayerPawn Player;

	// End:0x107
	if(__NFUN_340__(User, none))
	{
		Player = PlayerPawn(User);
		// End:0x107
		if(__NFUN_340__(Player, none))
		{
			User.bBlockCamera = User.default.bBlockCamera;
			User.RestoreCollision();
			PlayerUser.__NFUN_642__(18);
			User.TickBefore = none;
			Player.bUseRemappedEvents = false;
			Player.SetNewPostureState(2);
			Player.__NFUN_1013__();
			Player.MaybeFadeOutChannelBlock('FBBlock', 0.4);
			Player.ViewMapper = none;
			User.DetachFromUsableSomething();
			Player.bAttachedToUsableSomething = false;
			Player.WeaponUp();
		}
	}
	super(dnUsableSomething).Destroyed();
	return;
}

simulated event Actor GetIKActor(name LimbID)
{
	return self;
	return;
}

simulated event PostUserTick(float DeltaTime)
{
	local int AnimIndex, ChannelIndex;
	local float Frame;
	local name GroupName;

	super.PostUserTick(DeltaTime);
	// End:0x26C
	if(__NFUN_148__(__NFUN_148__(__NFUN_340__(User, none), __NFUN_340__(User.AnimationController, none)), __NFUN_340__(User.__NFUN_568__(), none)))
	{
		// End:0x26C
		if(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_150__(__NFUN_341__(__NFUN_399__(), 'AttachUserAnim'), __NFUN_341__(__NFUN_399__(), 'idle')), __NFUN_341__(__NFUN_399__(), 'FireDown')), __NFUN_341__(__NFUN_399__(), 'FiringStop')), __NFUN_341__(__NFUN_399__(), 'Overheated')), __NFUN_341__(__NFUN_399__(), 'Pain')))
		{
			AnimIndex = User.AnimationController.__NFUN_1307__('MG42_AimGrid');
			// End:0x26C
			if(__NFUN_174__(AnimIndex, -1))
			{
				User.AnimationController.SetAnimGridState('MG42_AimGrid', 0, __NFUN_196__(float(NormalizeRotAxis(RotatePitch)), 8192));
				ChannelIndex = User.AnimationController.Animations[AnimIndex].AnimationChannel.ChannelLink;
				// End:0x1F7
				if(User.AnimationController.AnimChannels[ChannelIndex].bActAsGroup)
				{
					GroupName = User.AnimationController.AnimChannels[ChannelIndex].ChannelName;
					ChannelIndex = 0;
					J0x193:

					// End:0x1F7 [Loop If]
					if(__NFUN_169__(ChannelIndex, 24))
					{
						// End:0x1ED
						if(__NFUN_341__(User.MeshInstance.__NFUN_554__(ChannelIndex, GroupName), User.AnimationController.Animations[AnimIndex].AnimSequence))
						{
							// [Explicit Break]
							goto J0x1F7;
						}
						__NFUN_184__(ChannelIndex);
						// [Loop Continue]
						goto J0x193;
					}
				}
				J0x1F7:

				// End:0x26C
				if(__NFUN_169__(ChannelIndex, 24))
				{
					User.MeshInstance.__NFUN_547__(ChannelIndex, 0, GroupName);
					Frame = __NFUN_196__(float(__NFUN_164__(__NFUN_175__(RotateYaw, 65535), 8192)), 8192);
					User.MeshInstance.__NFUN_550__(ChannelIndex, Frame, GroupName);
				}
			}
		}
	}
	return;
}

simulated function GetCurrentShellEjectionLocation(out Vector OutEjectionLocation, out Rotator OutEjectionRotation)
{
	local name ShellEjectionBoneName;

	// End:0x6F
	if(__NFUN_340__(__NFUN_568__(), none))
	{
		ShellEjectionBoneName = 'mount_eject';
		__NFUN_354__(__NFUN_342__(ShellEjectionBoneName, 'None'), "No shell ejection bone set");
		OutEjectionLocation = __NFUN_568__().__NFUN_533__(ShellEjectionBoneName, true);
		OutEjectionRotation = __NFUN_568__().__NFUN_534__(ShellEjectionBoneName, true);
	}
	return;
}

k2call simulated function Eject_Casing(optional EventInfo AnimEventInfo)
{
	local Vector EjectLoc, EjectVelocity;
	local Rotator EjectRot;
	local float DrawScaleChange;

	// End:0xCD
	if(__NFUN_174__(int(Level.NetMode), int(NM_DedicatedServer)))
	{
		GetCurrentShellEjectionLocation(EjectLoc, EjectRot);
		DrawScaleChange = __NFUN_196__(DrawScale, default.DrawScale);
		EjectVelocity = __NFUN_253__(__NFUN_256__(ShellEjectionDir, __NFUN_232__(0, 1, 0)));
		EjectVelocity = __NFUN_241__(EjectVelocity, EjectRot);
		__NFUN_246__(EjectVelocity, __NFUN_195__(__NFUN_226__(ShellEjectionForce, 40), DrawScaleChange));
		__NFUN_619__(AmmoCasingMesh, AmmoCasingMaterial, EjectLoc, EjectRot, DrawScaleChange, EjectVelocity, __NFUN_256__(__NFUN_232__(0, 0, 0), __NFUN_232__(3.141593, 3.141593, 3.141593)));
	}
	return;
}

k2call simulated function FireEffects(optional EventInfo AnimEventInfo)
{
	super.FireEffects(AnimEventInfo);
	__NFUN_184__(MuzzleIndex);
	// End:0x25
	if(__NFUN_170__(MuzzleIndex, 2))
	{
		MuzzleIndex = 0;
	}
	// End:0xC5
	if(__NFUN_340__(MuzzleFlashActors[MuzzleIndex], none))
	{
		MuzzleFlashActors[MuzzleIndex].__NFUN_591__(1);
		MuzzleFlashActors[MuzzleIndex].SystemSizeScale = __NFUN_196__(DrawScale, default.DrawScale);
		// End:0xA9
		if(MuzzleFlashActors[MuzzleIndex].bIsFriendSpawner)
		{
			dnFriendFX_Spawners(MuzzleFlashActors[MuzzleIndex]).ExecuteEffect(true);			
		}
		else
		{
			MuzzleFlashActors[MuzzleIndex].Trigger(self, Instigator);
		}
	}
	PerformFire();
	return;
}

simulated function PerformFire(optional EventInfo AnimEventInfo)
{
	local Rotator MuzzleRot;
	local Vector startLocation;

	// End:0x13A
	if(__NFUN_148__(__NFUN_173__(int(Role), int(ROLE_Authority)), __NFUN_340__(__NFUN_568__(), none)))
	{
		FireShot();
		MuzzleRot = MeshInstance.__NFUN_534__(MuzzleNames[MuzzleIndex], true);
		// End:0x82
		if(__NFUN_340__(PlayerUser, none))
		{
			startLocation = PlayerUser.CalcedViewLocation;
			MuzzleRot.Pitch = PlayerUser.CalcedViewRotation.Pitch;			
		}
		else
		{
			startLocation = MeshInstance.__NFUN_533__(MuzzleNames[MuzzleIndex], true, false);
		}
		MuzzleRot.Yaw = __NFUN_190__(MuzzleRot.Yaw, int(__NFUN_195__(HorizSpreadScalar, float(MaxSpread))));
		MuzzleRot.Pitch = __NFUN_190__(MuzzleRot.Pitch, int(__NFUN_195__(VertSpreadScalar, float(MaxSpread))));
		__NFUN_616__(startLocation, __NFUN_238__(startLocation, __NFUN_234__(Vector(MuzzleRot), ShotDistance)), TraceDamageType, MaxTracePenetrationCount);
		// End:0x128
		if(__NFUN_173__(ShellCasingCounter, 0))
		{
			Eject_Casing(AnimEventInfo);
		}
		ShellCasingCounter = __NFUN_164__(__NFUN_165__(ShellCasingCounter, 1), 3);
	}
	return;
}

simulated event PerformTraceFireEffects(class<TraceDamageType> TraceDamageType, Vector TraceStart, Vector TraceEnd, Actor HitActor)
{
	local BeamSystem Beam;

	TraceStart = MeshInstance.__NFUN_533__(MuzzleNames[MuzzleIndex], true, false);
	super(Actor).PerformTraceFireEffects(TraceDamageType, TraceStart, TraceEnd, HitActor);
	SpawnWeaponTracer(TraceStart, TraceEnd, 1, class'dnTracerFX_BeamSegment', class'WaterBubblesTracer', HitActor);
	return;
}

simulated event float GetBaseDamage(Actor Victim, optional Pawn Instigator, optional class<DamageType> DamageType, optional Vector HitDirection, optional Vector HitLocation, optional name BoneName, optional Vector SourceTraceOrigin)
{
	// End:0x1A
	if(__NFUN_340__(PlayerUser, none))
	{
		return __NFUN_195__(float(ShotDamage), PlayerShotDamageScale);
	}
	return float(ShotDamage);
	return;
}

simulated function AttachComplete()
{
	local int i;

	i = 0;
	J0x07:

	// End:0x5A [Loop If]
	if(__NFUN_169__(i, 3))
	{
		// End:0x50
		if(__NFUN_340__(MuzzleFlashActors[i], none))
		{
			MuzzleFlashActors[i].TickStyle = MuzzleFlashActors[i].default.TickStyle;
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	super(dnUsableSomething).AttachComplete();
	return;
}

simulated function DetachComplete()
{
	local int i;

	i = 0;
	J0x07:

	// End:0x47 [Loop If]
	if(__NFUN_169__(i, 3))
	{
		// End:0x3D
		if(__NFUN_340__(MuzzleFlashActors[i], none))
		{
			MuzzleFlashActors[i].TickStyle = 0;
		}
		__NFUN_184__(i);
		// [Loop Continue]
		goto J0x07;
	}
	super(dnControl).DetachComplete();
	return;
}

simulated function StartFiring()
{
	super.StartFiring();
	FindAndPlaySound('MG42_Fire', 1);
	return;
}

simulated function StopFiring()
{
	super.StopFiring();
	FindAndStopSound('MG42_Fire', 3);
	// End:0x34
	if(__NFUN_340__(User, none))
	{
		User.SetUsableSomethingAnimation('MG42_Idle');
	}
	return;
}

simulated function StartOverheatedState()
{
	super.StartOverheatedState();
	FindAndPlaySound('MachinegunTurret_Overheat', 1);
	return;
}

function bool AimingIsEnabled()
{
	return __NFUN_148__(__NFUN_145__(bInCrashMode), super.AimingIsEnabled());
	return;
}

final function TriggerFunc_StartCrashing()
{
	bInCrashMode = true;
	ControlEvent(, 'StartCrash');
	return;
}

final function TriggerFunc_StopCrashing()
{
	bInCrashMode = false;
	ControlEvent(, 'StopCrash');
	return;
}

final function TriggerFunc_HitFromRight()
{
	ControlEvent(, 'HitRight');
	return;
}

final function TriggerFunc_HitFromLeft()
{
	ControlEvent(, 'HitLeft');
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	// End:0xA5
	if(__NFUN_339__(dnControl_Turret_MountedGrenadeLauncher(self), none))
	{
		PrecacheIndex.__NFUN_1266__(class'dnTracerFX_BeamSegment');
		PrecacheIndex.__NFUN_1266__(class'WaterBubblesTracer');
		PrecacheIndex.__NFUN_1279__(TraceDamageType);
		PrecacheIndex.__NFUN_1267__(AmmoCasingMesh);
		PrecacheIndex.__NFUN_1277__(VoicePack, 'MG42_BrassEject');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'MG42_Fire');
		PrecacheIndex.__NFUN_1277__(VoicePack, 'MG42_Idle');
	}
	PrecacheIndex.__NFUN_1266__(MuzzleFlashClass);
	PrecacheIndex.__NFUN_1281__('MG42_AimGrid');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'MachinegunTurret_Overheat');
	return;
}

state() AttachUserAnim
{
	simulated event BeginState()
	{
		super(Object).BeginState();
		User.__NFUN_605__(InterpolationInTime, false, 'AnimCallback_AttachedToDecoration');
		return;
	}

	simulated event EndState()
	{
		local float StoredRotatePitch, StoredLastRotatePitch;

		StoredRotatePitch = float(RotatePitch);
		StoredLastRotatePitch = float(LastRotatePitch);
		super.EndState();
		RotatePitch = int(StoredRotatePitch);
		LastRotatePitch = int(StoredLastRotatePitch);
		return;
	}
	stop;
}

state() Crashing
{
	event BeginState()
	{
		super(Object).BeginState();
		RotatePitch = 0;
		LastRotatePitch = 0;
		return;
	}
	stop;
}

state HitBase
{
	simulated function AnimCallback_UserAnimEnd()
	{
		super(dnControl).AnimCallback_UserAnimEnd();
		// End:0x1E
		if(bInCrashMode)
		{
			ControlEvent(, 'Crashing');			
		}
		else
		{
			ControlEvent(, 'idle');
		}
		return;
	}
	stop;
}

state() HitRight extends HitBase
{	stop;
}

state() HitLeft extends HitBase
{	stop;
}

defaultproperties
{
	VertSpreadScalar=1
	HorizSpreadScalar=1
	MaxSpread=256
	ShotDistance=50000
	ShotDamage=5
	PlayerShotDamageScale=4.2
	TraceDamageType='dnGame.LargeCaliberBulletDamage'
	MuzzleIndex=-1
	MuzzleNames[0]=mount_muzzle_1
	MuzzleNames[1]=mount_muzzle_2
	MuzzleNames[2]=mount_muzzle_3
	MuzzleFlashClass='p_Weapons.MG42_MuzzleFlash.MG42_MuzzleFlash_Spawner'
	AmmoCasingMesh='sm_class_dukeitems.machinegun_shell_casing.MachineGunShell_Casing'
	AmmoCasingMaterial='dnMaterial.dnPhysicsMaterial_LargeBulletCasing'
	ShellEjectionDir=(X=1.291717E-41,Y=2.797242E-17,Z=1)
	ShellEjectionForce=200
	MinPitch=-8192
	MaxPitch=8192
	MinYaw=-8192
	MaxYaw=8192
	bClampYaw=true
	bUseInstantAimRate=true
	PitchAimRate=32768
	YawAimRate=16384
	RotationSoundName=MGL_Rotate
	RotationSoundModSideways=(Min=0,Max=0)
	RotationSoundModUpDown=(Min=0,Max=0)
	AimingBoneName=pivot
	FireHeightBoneName=Root
	YawPivotBoneName=mount_yaw
	PitchPivotBoneName=mount_pitch
	Crosshair='dt_hud.crosshairs.crosshair_mg42_fb'
	FireViewShake=(bNoLerp=false,bToggleSign=true,Style=0,Function=4,FalloffActor=none,FalloffDistance=0,ShakeDuration=0.2,ShakeFrequency=0.1,ShakeMagnitude=300,ShakeFullMagnitude=0,ShakeFullMagnitudeTime=0,ShakeName=MG42_Fire_Shake)
	FireRumble=(RumbleName=MG42_Rumble,RumbleDuration=0.14,RumbleLeftMagnitude=0.22,RumbleRightMagnitude=0.55,FalloffActor=none,FalloffDistance=0)
	OverheatMaxTime=10
	HeatPerShot=1.5
	OverheatNoFireSound=MG42_NoFire
	OverheatWarnTimePCT=0.8
	OverheatSmokeClass='p_Weapons.MG42_MuzzleFlash.MG42_Overheat_Main'
	OverheatMountName=mount_muzzle_1
}