/*******************************************************************************
 * Details_Generic_Vibrator generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Details_Generic_Vibrator extends Details_Generic
	collapsecategories;

enum EVIBRATOR_State
{
	EVIBRATOR_Off,
	EVIBRATOR_On
};

var() bool bQuestItemHack;
var localized string QuestItemUsePhrase;
var Details_Generic_Vibrator.EVIBRATOR_State VibratorState;

function StartSelfOff()
{
	DecoActivity(0, 'TurnVibOff');
	super(dnDecoration).StartSelfOff();
	return;
}

function PostVerifySelf()
{
	DecoActivity(0, 'StartOn');
	super(dnDecoration).PostVerifySelf();
	bUsable = __NFUN_145__(bQuestItemHack);
	bGrabbable = bQuestItemHack;
	// End:0x43
	if(bGrabbable)
	{
		UsePhrase = QuestItemUsePhrase;
	}
	return;
}

function DoThatVibratorThing()
{
	DecoActivity(0, 'Vibrate');
	__NFUN_607__(__NFUN_226__(0.06, 0.05), false, 'DoThatVibratorThing');
	return;
}

function HitByEMP(optional float Duration, optional Pawn Instigator)
{
	super(dnDecoration).HitByEMP(Duration, Instigator);
	DecoActivity(0, 'TurnVibEMP');
	return;
}

function EMPDone()
{
	super(dnDecoration).EMPDone();
	SetState(VibratorState);
	return;
}

event Used(Actor Other, Pawn EventInstigator)
{
	local Details_Generic_Vibrator.EVIBRATOR_State NewState;

	super(dnDecoration).Used(Other, EventInstigator);
	// End:0x1B
	if(bEMPulsed)
	{
		return;
	}
	switch(VibratorState)
	{
		// End:0x33
		case 0:
			NewState = 1;
			// End:0x46
			break;
		// End:0x43
		case 1:
			NewState = 0;
			// End:0x46
			break;
		// End:0xFFFF
		default:
			break;
	}
	SetState(NewState);
	return;
}

function Grabbed(Pawn Grabber)
{
	local Details_Generic_Vibrator V;

	super(dnDecoration).Grabbed(Grabber);
	// End:0x90
	foreach __NFUN_747__(class'Details_Generic_Vibrator', V)
	{
		// End:0x2B
		if(__NFUN_339__(V, self))
		{
			continue;			
		}
		V.bQuestItemHack = false;
		V.bGrabbable = false;
		V.bUsable = V.default.bUsable;
		V.UsePhrase = V.default.UsePhrase;		
	}	
	class'Inventory'.static.AttemptPickup(class'dnQuestItem_Vibrator', none, Grabber, 2);
	GlobalTrigger('Vibrator_QuestItem_Located');
	Grabber.bGrabbing = false;
	Grabber.DropCarriedActor(, true,, true, true);
	bSilentDestroy = true;
	__NFUN_614__();
	return;
}

final function SetState(Details_Generic_Vibrator.EVIBRATOR_State NewState)
{
	VibratorState = NewState;
	switch(NewState)
	{
		// End:0x28
		case 0:
			DecoActivity(0, 'TurnVibOff');
			// End:0x40
			break;
		// End:0x3D
		case 1:
			DecoActivity(0, 'TurnVibOn');
			// End:0x40
			break;
		// End:0xFFFF
		default:
			break;
	}
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
	// End:0x26
	if(bQuestItemHack)
	{
		PrecacheIndex.__NFUN_1266__(class'dnQuestItem_Vibrator');
	}
	return;
}

defaultproperties
{
	QuestItemUsePhrase="<?int?dnDecorations.Details_Generic_Vibrator.QuestItemUsePhrase?>"
	DecoActivities_Default=/* Array type was not detected. */
}