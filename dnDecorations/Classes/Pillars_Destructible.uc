/*******************************************************************************
 * Pillars_Destructible generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Pillars_Destructible extends aFinalDecoration
	abstract
	collapsecategories;

struct SSortChunk
{
	var int ChunkIndex;
	var float Distance;
};

var array<Pillars_Destructible_Chunk> Chunks;
var int MaxChunkDestroyPerFrame;
var int ChunkDestroyTickStamp;
var int ChunkDestroyCount;

simulated function ChunkSpawned(Pillars_Destructible_Chunk Chunk)
{
	local int i;

	i = __NFUN_166__(__NFUN_743__(), 1);
	J0x0C:

	// End:0x51 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		// End:0x47
		if(__NFUN_340__(__NFUN_740__(i), __NFUN_742__(i)))
		{
			Chunk.__NFUN_741__(i, __NFUN_740__(i));
		}
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x0C;
	}
	Chunks[Chunks.Add(1)] = Chunk;
	return;
}

simulated function ChunkDestroyed(Pillars_Destructible_Chunk Chunk)
{
	// End:0x35
	if(__NFUN_174__(ChunkDestroyTickStamp, Level.LevelTickStamp))
	{
		ChunkDestroyTickStamp = Level.LevelTickStamp;
		ChunkDestroyCount = 0;
	}
	__NFUN_184__(ChunkDestroyCount);
	return;
}

final simulated function bool IsAtChunkDestroyLimitForFrame()
{
	// End:0x2A
	if(__NFUN_173__(ChunkDestroyTickStamp, Level.LevelTickStamp))
	{
		// End:0x2A
		if(__NFUN_172__(ChunkDestroyCount, MaxChunkDestroyPerFrame))
		{
			return true;
		}
	}
	return false;
	return;
}

function float GetSpawnOnDestroyedDelay()
{
	return 0;
	return;
}

simulated event Engine.Actor.ETraceFireHitResponse TraceFireHit(Actor SourceActor, class<TraceDamageType> TraceDamageType, Vector SourceTraceOrigin, Vector HitLocation, Vector HitNormal, name HitBoneName, bool bExtentTrace)
{
	local int i;
	local Vector TraceStart, TraceEnd;
	local STraceHitResult HitResult;
	local Pillars_Destructible_Chunk TestChunk;
	local Engine.Actor.ETraceFireHitResponse RetVal;

	RetVal = super(KarmaActor).TraceFireHit(SourceActor, TraceDamageType, SourceTraceOrigin, HitLocation, HitNormal, HitBoneName, bExtentTrace);
	// End:0xF1
	if(DecorationIsDead())
	{
		TraceEnd = __NFUN_239__(HitLocation, __NFUN_235__(float(10), HitNormal));
		TraceStart = SourceTraceOrigin;
		i = __NFUN_166__(string(Chunks), 1);
		J0x6A:

		// End:0xF1 [Loop If]
		if(__NFUN_172__(i, 0))
		{
			// End:0xE7
			if(__NFUN_340__(Chunks[i], none))
			{
				// End:0xE7
				if(Chunks[i].__NFUN_618__(SourceActor, TraceStart, TraceEnd, HitResult))
				{
					return Chunks[i].TraceFireHit(SourceActor, TraceDamageType, SourceTraceOrigin, HitLocation, HitNormal, HitBoneName, false);
				}
			}
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x6A;
		}
	}
	return RetVal;
	return;
}

function HurtRadiusActivity(Actor DamageInstigator, float DamageAmount, Vector DamageOrigin, float DamageRadius, float DamageFalloffStart, class<DamageType> DamageType, Vector DamageStart, optional bool bIgnoreDrawScale, optional float RelativeScale)
{
	local int i, j;
	local float Dist;
	local array<float> Distances;
	local array<SSortChunk> SortChunks;

	super(KarmaActor).HurtRadiusActivity(DamageInstigator, DamageAmount, DamageOrigin, DamageRadius, DamageFalloffStart, DamageType, DamageStart, bIgnoreDrawScale, RelativeScale);
	// End:0x1EE
	if(DecorationIsDead())
	{
		i = __NFUN_166__(string(Chunks), 1);
		J0x4C:

		// End:0x10D [Loop If]
		if(__NFUN_172__(i, 0))
		{
			// End:0x103
			if(__NFUN_340__(Chunks[i], none))
			{
				Dist = __NFUN_252__(__NFUN_239__(DamageOrigin, Chunks[i].Location));
				j = 0;
				J0x94:

				// End:0xCB [Loop If]
				if(__NFUN_169__(j, string(SortChunks)))
				{
					// End:0xC1
					if(__NFUN_200__(Dist, SortChunks[j].Distance))
					{
						// [Explicit Break]
						goto J0xCB;
					}
					__NFUN_184__(j);
					// [Loop Continue]
					goto J0x94;
				}
				J0xCB:

				SortChunks.Insert(j, 1);
				SortChunks[j].ChunkIndex = i;
				SortChunks[j].Distance = Dist;
			}
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x4C;
		}
		i = 0;
		J0x114:

		// End:0x1EE [Loop If]
		if(__NFUN_169__(i, MaxChunkDestroyPerFrame))
		{
			// End:0x136
			if(__NFUN_172__(i, string(SortChunks)))
			{
				// [Explicit Break]
				goto J0x1EE;
			}
			j = SortChunks[i].ChunkIndex;
			// End:0x1E4
			if(__NFUN_340__(Chunks[j], none))
			{
				Chunks[j].bAllowHurtRadius = true;
				Chunks[j].HurtRadiusActivity(DamageInstigator, DamageAmount, DamageOrigin, DamageRadius, DamageFalloffStart, DamageType, DamageStart, bIgnoreDrawScale, RelativeScale);
				// End:0x1E4
				if(__NFUN_340__(Chunks[j], none))
				{
					Chunks[j].bAllowHurtRadius = false;
				}
			}
			__NFUN_184__(i);
			// [Loop Continue]
			goto J0x114;
		}
	}
	J0x1EE:

	return;
}

defaultproperties
{
	MaxChunkDestroyPerFrame=3
	ChunkDestroyTickStamp=-1
	bSurviveDeath=true
	HealthPrefab=5
	Health=10
	bAITransparent=true
	bNetTemporary=true
	Mass=500
}