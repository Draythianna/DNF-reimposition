/*******************************************************************************
 * Biology_Generic_Tentacle generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Biology_Generic_Tentacle extends Biology_Generic
	collapsecategories;

enum ETentacleState
{
	ETS_Idle,
	ETS_Inspecting,
	ETS_Tracking,
	ETS_Swiping
};

var() noexport float TrackingRate "Speed that this tentacle can track enemies.";
var() noexport float DamageDisableTime "Amount of time to be disabled when damaged.";
var() noexport float DamageDisableTimeVariance "By now, you know it's true... I vary you.";
var() noexport float SwipeDamage "Base damage to apply per swipe.";
var() noexport float SwipeDamageVariance "Variance on swipe damage.";
var() noexport float SwipeDamageRadius "Radius of swipe damage.";
var() noexport float SwipeDamageFalloffStart "Falloff start of the radius damage of the swipe.";
var() noexport float IdleInspectTime "Time to be idle before doing an inspection.";
var() noexport float IdleInspectTimeVariance "Variance on idle inspect time.";
var name PassiveIdleName;
var name ActiveIdleName;
var name SwipeAttackBoneName;
var() array<name> InspectAnimNames;
var() array<name> SwipeAnimNames;
var() noexport float DetectionRadius "Becomes the SensorRadius for the Pod's KSphereSensor.  If zero, sensor will be disabled.";
var() noexport float AttackRadius "Distance the target must be before an attack can occur. Should be less than DetectionRadius.";
var() noexport name ForceInspectTag "Trigger this event to make the tentacle inspect the area.";
var() noexport name ForceExtendTag "Trigger this event to make the tentacle become active.";
var() noexport name ForceRetractTag "Trigger this event to make the tentacle become inactive.";
var() noexport name ForceSwipeTag "Trigger this event to make the tentacle swipe.";
var() noexport name InspectedEvent "Event that is triggered when this tentacle has completed an inspection.";
var() noexport name ExtendedEvent "Event that is triggered when this tentacle is fully extended.";
var() noexport name RetractedEvent "Event that is triggered when this tentacle is fully retracted.";
var() noexport name SwipedEvent "Event that is triggered when this tentacle has completed a swipe.";
var() noexport int MaxAttackAngle "Max angle from target to attack. 0=only straight ahead. 16384=approx 90 degrees";
var() float ImpulseLift;
var() float ImpulseMag;
var() noexport bool EnableCollision "Use invisible collision hull to prevent player from passing through tentacle while active.";
var() Color StunnedActorColor;
var() Color DefaultActorColor;
var Biology_Generic_Tentacle.ETentacleState TentacleState;
var bool bStunned;
var bool bForceRetract;
var float AimGridX;
var float AimGridY;
var Biology_Generic_AlienSensor Sensor;
var float AimGridMin;
var float AimGridMax;
var int NumTripMines;
var Biology_Generic_Tentacle_Collision CollisionHelper;

event PostBeginPlay()
{
	super(dnDecoration).PostBeginPlay();
	Sensor = Biology_Generic_AlienSensor(FindMountedActor(, class'Biology_Generic_AlienSensor'));
	Sensor.__NFUN_1124__(DetectionRadius);
	MaxAttackAngle = __NFUN_191__(MaxAttackAngle, 0, 16384);
	AimGridMax = __NFUN_196__(float(MaxAttackAngle), 16384);
	AimGridMin = __NFUN_194__(AimGridMax);
	__NFUN_718__('ForceInspect', ForceInspectTag);
	__NFUN_718__('ForceExtend', ForceExtendTag);
	__NFUN_718__('ForceRetract', ForceRetractTag);
	__NFUN_718__('ForceSwipe', ForceSwipeTag);
	__NFUN_601__('Generic0', DefaultActorColor);
	return;
}

event PostVerifySelf()
{
	local int i;

	// End:0x56
	if(__NFUN_145__(EnableCollision))
	{
		i = __NFUN_166__(string(MountOnSpawn), 1);
		J0x1A:

		// End:0x56 [Loop If]
		if(__NFUN_172__(i, 0))
		{
			// End:0x4C
			if(__NFUN_339__(MountOnSpawn[i].SpawnClass, class'Biology_Generic_Tentacle_Collision'))
			{
				MountOnSpawn.Remove(i, 1);
			}
			__NFUN_185__(i);
			// [Loop Continue]
			goto J0x1A;
		}
	}
	super(dnDecoration).PostVerifySelf();
	// End:0x7C
	if(EnableCollision)
	{
		CollisionHelper = Biology_Generic_Tentacle_Collision(FindMountedActor(, class'Biology_Generic_Tentacle_Collision'));
	}
	return;
}

simulated function InitializeAnimation()
{
	super(RenderActor).InitializeAnimation();
	AnimationController.SetAnimState(PassiveIdleName);
	__NFUN_605__(__NFUN_226__(IdleInspectTime, IdleInspectTimeVariance), false, 'Inspect');
	return;
}

final function Retract()
{
	// End:0x5A
	if(__NFUN_174__(int(TentacleState), int(0)))
	{
		TentacleState = 0;
		AnimationController.SetAnimState(PassiveIdleName);
		DecoActivity(0, 'Retract');
		GlobalTrigger(RetractedEvent,, self);
		__NFUN_605__(__NFUN_226__(IdleInspectTime, IdleInspectTimeVariance), false, 'Inspect');
	}
	return;
}

final function Extend()
{
	// End:0x5A
	if(__NFUN_148__(__NFUN_173__(int(TentacleState), int(0)), __NFUN_145__(bStunned)))
	{
		__NFUN_606__('Inspect');
		TentacleState = 2;
		AnimationController.SetAnimState(ActiveIdleName);
		DecoActivity(0, 'Extend');
		GlobalTrigger(ExtendedEvent,, self);
	}
	return;
}

final function Inspect()
{
	// End:0x5C
	if(__NFUN_148__(__NFUN_148__(__NFUN_173__(int(TentacleState), int(0)), __NFUN_145__(bStunned)), __NFUN_170__(string(InspectAnimNames), 0)))
	{
		TentacleState = 1;
		AnimationController.SetAnimState(InspectAnimNames[__NFUN_187__(string(InspectAnimNames))]);
		DecoActivity(0, 'Extend');
	}
	return;
}

final function Swipe()
{
	// End:0x4F
	if(__NFUN_148__(__NFUN_174__(int(TentacleState), int(3)), __NFUN_170__(string(SwipeAnimNames), 0)))
	{
		TentacleState = 3;
		AnimationController.SetAnimState(SwipeAnimNames[__NFUN_187__(string(SwipeAnimNames))]);
		DecoActivity(0, 'Swipe');
	}
	return;
}

final function TriggerFunc_ForceExtend()
{
	bForceRetract = false;
	Extend();
	return;
}

final function TriggerFunc_ForceRetract()
{
	bForceRetract = true;
	Retract();
	return;
}

final function TriggerFunc_ForceInspect()
{
	Inspect();
	return;
}

final function TriggerFunc_ForceSwipe()
{
	Swipe();
	return;
}

final function Alerted(Actor Alertee)
{
	// End:0x0E
	if(__NFUN_339__(Alertee, none))
	{
		return;
	}
	Target = Alertee;
	// End:0x2F
	if(__NFUN_150__(bStunned, bForceRetract))
	{
		return;
	}
	// End:0x53
	if(__NFUN_150__(__NFUN_173__(int(TentacleState), int(0)), __NFUN_173__(int(TentacleState), int(1))))
	{
		Extend();
	}
	return;
}

final function UnAlerted()
{
	Target = none;
	return;
}

event Tick(float DeltaTime)
{
	local float DesiredGridX, DesiredGridY, CurrTrackRate;
	local Vector DirToTarget;
	local Rotator RotToTarget;

	super(Actor).Tick(DeltaTime);
	// End:0x2F
	if(__NFUN_148__(__NFUN_170__(NumTripMines, 0), __NFUN_174__(int(TentacleState), int(3))))
	{
		Swipe();		
	}
	else
	{
		// End:0x77
		if(__NFUN_150__(__NFUN_148__(__NFUN_150__(bForceRetract, __NFUN_339__(Target, none)), __NFUN_173__(int(TentacleState), int(2))), __NFUN_148__(bStunned, __NFUN_174__(int(TentacleState), int(0)))))
		{
			Retract();
		}
	}
	// End:0x128
	if(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_148__(__NFUN_340__(Target, none), __NFUN_145__(bStunned)), __NFUN_145__(bForceRetract)), __NFUN_201__(DetectionRadius, 0)), __NFUN_339__(Pawn(Target).ActiveHoloDuke, none)))
	{
		// End:0xDF
		if(__NFUN_174__(int(TentacleState), int(3)))
		{
			AttemptSwipe();
		}
		DirToTarget = __NFUN_253__(__NFUN_240__(__NFUN_239__(Target.Location, Location), Rotation));
		DesiredGridX = __NFUN_194__(DirToTarget.Y);
		DesiredGridY = __NFUN_194__(DirToTarget.X);
	}
	CurrTrackRate = __NFUN_195__(TrackingRate, DeltaTime);
	AimGridX = __NFUN_227__(__NFUN_198__(AimGridX, __NFUN_195__(__NFUN_199__(DesiredGridX, AimGridX), CurrTrackRate)), AimGridMin, AimGridMax);
	AimGridY = __NFUN_227__(__NFUN_198__(AimGridY, __NFUN_195__(__NFUN_199__(DesiredGridY, AimGridY), CurrTrackRate)), AimGridMin, AimGridMax);
	DesiredGridX = __NFUN_227__(__NFUN_198__(AimGridX, __NFUN_195__(__NFUN_196__(AimGridX, 0.707107), 0.292893)), AimGridMin, AimGridMax);
	DesiredGridY = __NFUN_227__(__NFUN_198__(AimGridY, __NFUN_195__(__NFUN_196__(AimGridY, 0.707107), 0.292893)), AimGridMin, AimGridMax);
	AnimationController.SetChannelGridState('Base', DesiredGridX, DesiredGridY);
	return;
}

event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	// End:0x23
	if(__NFUN_148__(__NFUN_201__(Damage, 0), __NFUN_340__(Instigator, none)))
	{
		Stun();
	}
	super(dnDecoration).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
	return;
}

function Stun()
{
	bStunned = true;
	bIgnoreAimAssist = true;
	__NFUN_605__(__NFUN_226__(DamageDisableTime, DamageDisableTimeVariance), false, 'UnStunned');
	// End:0x3E
	if(EnableCollision)
	{
		CollisionHelper.Deactivate();
	}
	__NFUN_601__('Generic0', StunnedActorColor);
	FindAndPlaySound('Tentacle_Pain');
	__NFUN_606__('Inspect');
	return;
}

final function UnStunned()
{
	__NFUN_601__('Generic0', DefaultActorColor);
	bStunned = false;
	bIgnoreAimAssist = false;
	// End:0x36
	if(EnableCollision)
	{
		CollisionHelper.Activate();
	}
	// End:0x50
	if(__NFUN_340__(Target, none))
	{
		Alerted(Target);		
	}
	else
	{
		__NFUN_605__(__NFUN_226__(IdleInspectTime, IdleInspectTimeVariance), false, 'Inspect');
	}
	return;
}

final function AttemptSwipe()
{
	// End:0x39
	if(__NFUN_202__(__NFUN_199__(__NFUN_251__(__NFUN_239__(Target.Location, Location)), Target.CollisionRadius), AttackRadius))
	{
		Swipe();
	}
	return;
}

final k2call function SwipeAttack()
{
	local Vector SwipeLocation;

	// End:0x5E
	if(__NFUN_148__(__NFUN_340__(__NFUN_568__(), none), __NFUN_173__(int(TentacleState), int(3))))
	{
		SwipeLocation = MeshInstance.__NFUN_533__(SwipeAttackBoneName, true);
		HurtRadius(__NFUN_226__(SwipeDamage, SwipeDamageVariance), SwipeLocation, SwipeDamageRadius, SwipeDamageFalloffStart, class'TentacleDamage', Location);
	}
	return;
}

simulated function bool CanHurtRadiusOther(Actor Other)
{
	local Vector Impulse;
	local Pawn TargetPawn;

	// End:0x0E
	if(__NFUN_339__(Other, none))
	{
		return false;
	}
	// End:0xA8
	if(__NFUN_148__(Other.bIsPawn, __NFUN_145__(Pawn(Other).IsAlien())))
	{
		TargetPawn = Pawn(Other);
		Impulse = __NFUN_241__(__NFUN_232__(ImpulseMag, 0, ImpulseLift), Rotator(__NFUN_236__(__NFUN_239__(TargetPawn.Location, Location), __NFUN_232__(1, 1, 0))));
		__NFUN_249__(TargetPawn.GameplayDesiredPhysicsVelocity, Impulse);
		return true;
	}
	// End:0xBB
	if(__NFUN_340__(TriggerDamageControlUser(Other), none))
	{
		return true;
	}
	return false;
	return;
}

final function AnimEnd_Inspect()
{
	// End:0x38
	if(__NFUN_173__(int(TentacleState), int(1)))
	{
		GlobalTrigger(InspectedEvent,, self);
		TentacleState = 0;
		__NFUN_605__(__NFUN_226__(IdleInspectTime, IdleInspectTimeVariance), false, 'Inspect');
	}
	return;
}

final function AnimEnd_Swipe()
{
	// End:0x23
	if(__NFUN_173__(int(TentacleState), int(3)))
	{
		GlobalTrigger(SwipedEvent,, self);
		TentacleState = 2;
	}
	return;
}

function OnSenseHumanPawn()
{
	Alerted(Sensor.CurrentlySensingPawn);
	return;
}

function OnUnsenseHumanPawn()
{
	UnAlerted();
	return;
}

simulated function TripMineAttached(Actor TripMineActor, float AutoDetonateTime)
{
	super(Actor).TripMineAttached(TripMineActor, AutoDetonateTime);
	LaserMine(TripMineActor).ArmMineOnPawn();
	__NFUN_184__(NumTripMines);
	return;
}

simulated function TripMineExplode(Actor TripMineActor)
{
	super(Actor).TripMineExplode(TripMineActor);
	__NFUN_185__(NumTripMines);
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	local int i;

	super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1283__(PassiveIdleName, AnimationControllerClass, Mesh);
	PrecacheIndex.__NFUN_1283__(ActiveIdleName, AnimationControllerClass, Mesh);
	i = __NFUN_166__(string(InspectAnimNames), 1);
	J0x52:

	// End:0x89 [Loop If]
	if(__NFUN_172__(i, 0))
	{
		PrecacheIndex.__NFUN_1283__(InspectAnimNames[i], AnimationControllerClass, Mesh);
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x52;
	}
	i = __NFUN_166__(string(SwipeAnimNames), 1);
	J0x98:

	// End:0xCF [Loop If]
	if(__NFUN_172__(i, 0))
	{
		PrecacheIndex.__NFUN_1283__(SwipeAnimNames[i], AnimationControllerClass, Mesh);
		__NFUN_185__(i);
		// [Loop Continue]
		goto J0x98;
	}
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Tentacle_Idle');
	PrecacheIndex.__NFUN_1277__(VoicePack, 'Tentacle_Pain');
	PrecacheIndex.__NFUN_1279__(class'TentacleDamage');
	return;
}

defaultproperties
{
	TrackingRate=10
	DamageDisableTime=15
	DamageDisableTimeVariance=2
	SwipeDamage=20
	SwipeDamageVariance=4
	SwipeDamageRadius=50
	SwipeDamageFalloffStart=1075
	IdleInspectTime=6
	IdleInspectTimeVariance=2
	PassiveIdleName=IdlePassive
	ActiveIdleName=IdleActive
	SwipeAttackBoneName=mount_swipe
	InspectAnimNames(0)=Pitch
}