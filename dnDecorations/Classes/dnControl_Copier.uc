/*******************************************************************************
 * dnControl_Copier generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class dnControl_Copier extends dnControl_Chair
	collapsecategories;

const STATE_INDEX_USEABLE = 0;
const STATE_INDEX_LIDOPERATIONMODE = 6;

var() noexport int TimesToOpenBeforeAssCopy "Pretty much what it says." "Number of times the player must open the" "copier before Duke hops up on top of it.";
var bool bLidOpen;
var bool bMakingCopy;
var int NumTimesOpened;
var dnControlHelper_Copier_PrintedPage PrintingPage;
var dnControlHelper_Copier_PrintedPage PrintedPage;
var MaterialEx BrokenMat;
var localized string MakeCopyPhrase;

final simulated function MakeCopy()
{
	local int NumMountedActors;

	NumMountedActors = string(MountedActorList);
	bMakingCopy = true;
	DecoActivity(0, 'MakingCopy');
	// End:0x50
	if(__NFUN_170__(string(MountedActorList), NumMountedActors))
	{
		PrintingPage = dnControlHelper_Copier_PrintedPage(MountedActorList[__NFUN_166__(string(MountedActorList), 1)].MountedActor);
	}
	// End:0x62
	if(__NFUN_340__(PrintingPage, none))
	{
		PrintedPageSpawned();
	}
	// End:0x8A
	if(__NFUN_340__(DukePlayer(User), none))
	{
		DukePlayer(User).GivePermanentEgoCapAward(7);
	}
	return;
}

final function PrintedPageSpawned()
{
	// End:0x0E
	if(__NFUN_339__(PrintingPage, none))
	{
		return;
	}
	// End:0x3E
	if(__NFUN_340__(PrintedPage, none))
	{
		PrintedPage.bGrabbable = false;
		PrintedPage.bNoDamage = true;
	}
	PrintingPage.SlideOutOfCopier();
	return;
}

simulated function FinishMakeCopy()
{
	bMakingCopy = false;
	// End:0x37
	if(__NFUN_340__(PrintedPage, none))
	{
		PrintedPage.bSpawnOnDestroyed = false;
		PrintedPage.CriticalDamage(true);
	}
	PrintedPage = PrintingPage;
	PrintingPage = none;
	// End:0x5D
	if(__NFUN_201__(Health, float(0)))
	{
		bUsable = true;
	}
	DecoActivity(0, 'LidUsed');
	return;
}

function SetLidState()
{
	SetState(6);
	return;
}

final function LidOpened()
{
	bLidOpen = true;
	__NFUN_184__(NumTimesOpened);
	UsePhrase = MakeCopyPhrase;
	// End:0x30
	if(__NFUN_172__(NumTimesOpened, TimesToOpenBeforeAssCopy))
	{
		SetState(0);
	}
	return;
}

final function LidClosed()
{
	UsePhrase = default.UsePhrase;
	bLidOpen = false;
	return;
}

simulated function bool CanBeUsedBy(Pawn User)
{
	// End:0x13
	if(__NFUN_150__(__NFUN_704__(), bMakingCopy))
	{
		return false;
	}
	return super.CanBeUsedBy(User);
	return;
}

simulated event TakeDamage(Pawn Instigator, float Damage, Vector DamageOrigin, Vector DamageDirection, class<DamageType> DamageType, optional name HitBoneName, optional Vector DamageStart)
{
	// End:0x39
	if(__NFUN_357__(DamageType, class'ExplosionDamage'))
	{
		super(dnControl).TakeDamage(Instigator, Damage, DamageOrigin, DamageDirection, DamageType, HitBoneName, DamageStart);
	}
	return;
}

simulated event Destroyed()
{
	bUsable = false;
	__NFUN_741__(1, BrokenMat);
	super(dnUsableSomething).Destroyed();
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super.RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1269__(BrokenMat);
	return;
}

state() LidOperation
{
	event Used(Actor Other, Pawn EventInstigator)
	{
		DecoActivity(0, 'LidUsed');
		return;
	}
	stop;
}

state() Useable
{
	function BeginState()
	{
		super(Object).BeginState();
		// End:0x1C
		if(__NFUN_173__(NumTimesOpened, 0))
		{
			SetState(6);			
		}
		else
		{
			NumTimesOpened = 0;
		}
		return;
	}

	event Used(Actor Other, Pawn EventInstigator)
	{
		// End:0x1B
		if(__NFUN_145__(bLidOpen))
		{
			DecoActivity(0, 'NormalUsed');			
		}
		else
		{
			// End:0x32
			if(__NFUN_339__(User, none))
			{
				AttachPawn(EventInstigator);
			}
		}
		return;
	}
	stop;
}

state() idle
{
	simulated function InteractUser(Pawn PUser)
	{
		// End:0x16
		if(__NFUN_339__(User, PUser))
		{
			MakeCopy();
		}
		return;
	}

	simulated function AnimCallback_UserAnimEnd()
	{
		super(dnControl).AnimCallback_UserAnimEnd();
		DetachPawnSuccess(false);
		return;
	}

	event Used(Actor Other, Pawn EventInstigator)
	{
		return;
	}
	stop;
}

defaultproperties
{
	TimesToOpenBeforeAssCopy=1
	BrokenMat='mt_skins4.Copier.Copier_HV_BShade_BRKN'
	MakeCopyPhrase="<?int?dnDecorations.dnControl_Copier.MakeCopyPhrase?>"
}