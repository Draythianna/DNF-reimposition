/*******************************************************************************
 * Electronics_Generic_AnalogClock generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Electronics_Generic_AnalogClock extends Electronics_Generic_Clock
	abstract
	collapsecategories;

var() noexport bool bSmoothSecond "Indicates whether the clock Second hand will move smoothly from point to point or snap once per update rate period.";
var() noexport bool bSmoothMinute "Indicates whether the clock Minute hand will move smoothly from point to point or snap once per update rate period.";
var() noexport bool bSmoothHour "Indicates whether the clock Hour hand will move smoothly from point to point or snap once per update rate period.";
var() noexport Rotator HandRotationDir "Place 1 in the angle that the hands should rotate around ex (1,0,0). Using anything but 1 will result in really stupid results.";
var() noexport Rotator HandRotationOffset "How much to adjust the initial angle of each hand by to have it tell the correct time.";
var() noexport name TickSoundName "VoicePack entry to play each time the update happens.  Only happens when bSmoothMotion=FALSE.";
var Actor HourHand;
var Actor MinuteHand;
var Actor SecondHand;

function PostVerifySelf()
{
	super.PostVerifySelf();
	HourHand = FindMountedActor('HourHand');
	MinuteHand = FindMountedActor('MinuteHand');
	SecondHand = FindMountedActor('SecondHand');
	return;
}

function UpdateDisplay(float Hour, float Minute, float Second)
{
	local int ClockHour, ClockMinute, ClockSecond;

	Hour = __NFUN_196__(__NFUN_197__(Hour, float(NumHours)), float(NumHours));
	__NFUN_208__(Minute, float(NumMinutes));
	__NFUN_208__(Second, float(NumSeconds));
	ClockHour = int(__NFUN_195__(__NFUN_198__(__NFUN_198__(Hour, __NFUN_196__(Minute, float(NumHours))), __NFUN_196__(__NFUN_196__(Second, float(NumMinutes)), float(NumHours))), 65535));
	ClockMinute = int(__NFUN_195__(__NFUN_198__(Minute, __NFUN_196__(Second, float(NumMinutes))), 65535));
	ClockSecond = int(__NFUN_195__(Second, 65535));
	// End:0xC5
	if(__NFUN_340__(HourHand, none))
	{
		MoveHand(HourHand, ClockHour, bSmoothHour);
	}
	// End:0xE7
	if(__NFUN_340__(MinuteHand, none))
	{
		MoveHand(MinuteHand, ClockMinute, bSmoothMinute);
	}
	// End:0x109
	if(__NFUN_340__(SecondHand, none))
	{
		MoveHand(SecondHand, ClockSecond, bSmoothSecond);
	}
	FindAndPlaySound(TickSoundName, 1);
	return;
}

function SetTimeAtEMP()
{
	TimeOverride.Hour = __NFUN_164__(Level.Hour, NumHours);
	TimeOverride.Minute = __NFUN_164__(Level.Minute, NumMinutes);
	TimeOverride.Second = __NFUN_164__(Level.Second, NumSeconds);
	return;
}

final function MoveHand(Actor HandActor, int Target, bool bSmoothMotion)
{
	local float HandMoveTime;

	// End:0x17
	if(bSmoothMotion)
	{
		HandMoveTime = UpdateRate;		
	}
	else
	{
		HandMoveTime = 0;
	}
	HandActor.__NFUN_663__(__NFUN_275__(__NFUN_266__(HandRotationDir, float(Target)), HandRotationOffset), 0, HandMoveTime,,,,,,, true);
	return;
}

event RegisterPrecacheComponents(PrecacheIndex PrecacheIndex)
{
	super(dnDecoration).RegisterPrecacheComponents(PrecacheIndex);
	PrecacheIndex.__NFUN_1277__(VoicePack, TickSoundName);
	return;
}

defaultproperties
{
	bSmoothMinute=true
	bSmoothHour=true
	HandRotationDir=(Pitch=74245,Yaw=571080704,Roll=0)
	MountOnSpawn=/* Array type was not detected. */
}