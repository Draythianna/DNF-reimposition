/*******************************************************************************
 * Electronics_Generic_CigaretteMachine generated by Eliot.UELib using UELib.CLI.
 * Eliot.UELib Â© 2009-2022 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Electronics_Generic_CigaretteMachine extends Electronics_Generic
	collapsecategories;

const KNOB_TOP_ONE = 'KNOB_TOP_ONE';
const KNOB_TOP_TWO = 'KNOB_TOP_TWO';
const KNOB_TOP_THREE = 'KNOB_TOP_THREE';
const KNOB_TOP_FOUR = 'KNOB_TOP_FOUR';
const KNOB_TOP_FIVE = 'KNOB_TOP_FIVE';
const KNOB_TOP_SIX = 'KNOB_TOP_SIX';
const KNOB_TOP_SEVEN = 'KNOB_TOP_SEVEN';
const KNOB_TOP_EIGHT = 'KNOB_TOP_EIGHT';
const KNOB_BOTTOM_ONE = 'KNOB_BOTTOM_ONE';
const KNOB_BOTTOM_TWO = 'KNOB_BOTTOM_TWO';
const KNOB_BOTTOM_THREE = 'KNOB_BOTTOM_THREE';
const KNOB_BOTTOM_FOUR = 'KNOB_BOTTOM_FOUR';
const KNOB_BOTTOM_FIVE = 'KNOB_BOTTOM_FIVE';
const KNOB_BOTTOM_SIX = 'KNOB_BOTTOM_SIX';
const KNOB_BOTTOM_SEVEN = 'KNOB_BOTTOM_SEVEN';
const KNOB_BOTTOM_EIGHT = 'KNOB_BOTTOM_EIGHT';

var int MaxVends;
var Details_Generic_CigarettePack VendSlots[8];

function int GetVendSlotIndex(name CheckTag)
{
	switch(CheckTag)
	{
		// End:0x10
		case 'KNOB_TOP_ONE':
		// End:0x1A
		case 'KNOB_BOTTOM_ONE':
			return 0;
		// End:0x22
		case 'KNOB_TOP_TWO':
		// End:0x2C
		case 'KNOB_BOTTOM_TWO':
			return 1;
		// End:0x34
		case 'KNOB_TOP_THREE':
		// End:0x3F
		case 'KNOB_BOTTOM_THREE':
			return 2;
		// End:0x47
		case 'KNOB_TOP_FOUR':
		// End:0x52
		case 'KNOB_BOTTOM_FOUR':
			return 3;
		// End:0x5A
		case 'KNOB_TOP_FIVE':
		// End:0x65
		case 'KNOB_BOTTOM_FIVE':
			return 4;
		// End:0x6D
		case 'KNOB_TOP_SIX':
		// End:0x78
		case 'KNOB_BOTTOM_SIX':
			return 5;
		// End:0x80
		case 'KNOB_TOP_SEVEN':
		// End:0x8B
		case 'KNOB_BOTTOM_SEVEN':
			return 6;
		// End:0x93
		case 'KNOB_TOP_EIGHT':
		// End:0x9E
		case 'KNOB_BOTTOM_EIGHT':
			return 7;
		// End:0xFFFF
		default:
			return -1;
			break;
	}
	return;
}

function dnGame.aFinalDecoration.ECigPackType GetSmokesVendType(name CheckTag)
{
	switch(CheckTag)
	{
		// End:0x10
		case 'KNOB_TOP_ONE':
		// End:0x18
		case 'KNOB_TOP_FIVE':
		// End:0x20
		case 'KNOB_BOTTOM_FOUR':
		// End:0x2B
		case 'KNOB_BOTTOM_EIGHT':
			return 0;
		// End:0x33
		case 'KNOB_TOP_TWO':
		// End:0x3B
		case 'KNOB_TOP_SIX':
		// End:0x43
		case 'KNOB_BOTTOM_THREE':
		// End:0x4E
		case 'KNOB_BOTTOM_SEVEN':
			return 1;
		// End:0x56
		case 'KNOB_TOP_THREE':
		// End:0x5E
		case 'KNOB_TOP_SEVEN':
		// End:0x66
		case 'KNOB_BOTTOM_TWO':
		// End:0x71
		case 'KNOB_BOTTOM_SIX':
			return 2;
		// End:0x79
		case 'KNOB_TOP_FOUR':
		// End:0x81
		case 'KNOB_TOP_EIGHT':
		// End:0x89
		case 'KNOB_BOTTOM_ONE':
		// End:0x94
		case 'KNOB_BOTTOM_FIVE':
			return 3;
		// End:0xFFFF
		default:
			return 4;
			break;
	}
	return;
}

function VendItem(Electronics_Generic_CigaretteMachine_Knob Knob)
{
	local dnGame.aFinalDecoration.ECigPackType VendSmokesType;
	local int VendSlotIndex;
	local name VendDecoName, VendItemName;
	local Details_Generic_CigarettePack VendedItem;

	// End:0x0E
	if(__NFUN_339__(Knob, none))
	{
		return;
	}
	// End:0x1D
	if(__NFUN_171__(__NFUN_185__(MaxVends), 0))
	{
		return;
	}
	VendSlotIndex = GetVendSlotIndex(Knob.Tag);
	// End:0x49
	if(__NFUN_173__(VendSlotIndex, -1))
	{
		return;
	}
	// End:0x5D
	if(__NFUN_340__(VendSlots[VendSlotIndex], none))
	{
		return;
	}
	VendSmokesType = GetSmokesVendType(Knob.Tag);
	// End:0x88
	if(__NFUN_173__(int(VendSmokesType), int(4)))
	{
		return;
	}
	VendDecoName = __NFUN_343__(__NFUN_302__("VendItem_", string(VendSlotIndex)));
	DecoActivity(0, VendDecoName);
	VendItemName = __NFUN_343__(__NFUN_302__("VendItemSlot_", string(VendSlotIndex)));
	VendedItem = Details_Generic_CigarettePack(FindMountedActor(VendItemName));
	// End:0x131
	if(__NFUN_339__(VendedItem, none))
	{
		__NFUN_355__(__NFUN_303__(__NFUN_302__(string(self), ":VendItem - No item spawned with tag of"), string(VendItemName)));
		return;
	}
	VendedItem.CigType = VendSmokesType;
	VendedItem.SlotIndex = VendSlotIndex;
	VendedItem.VendOwner = self;
	VendedItem.ExecuteVerifySelf();
	VendSlots[VendSlotIndex] = VendedItem;
	return;
}

function NotifyPickup(Actor Other, Pawn EventInstigator)
{
	local Details_Generic_CigarettePack CigItem;

	super(RenderActor).NotifyPickup(Other, EventInstigator);
	CigItem = Details_Generic_CigarettePack(Other);
	// End:0x2E
	if(__NFUN_339__(CigItem, none))
	{
		return;
	}
	// End:0x65
	if(__NFUN_339__(CigItem, VendSlots[CigItem.SlotIndex]))
	{
		VendSlots[CigItem.SlotIndex] = none;
	}
	return;
}

defaultproperties
{
	MaxVends=20
	DecoActivities_Default=/* Array type was not detected. */
}